{"content":"11","createAt":1640446431,"id":"3k5smhgz"}{"content":"22","createAt":1640446448,"id":"qiqmpxkk"}{"content":"33","createAt":1640446468,"id":"r5p48z93"}{"content":"55","createAt":1640446550,"id":"pgvmmeor"}{"content":"9999","createAt":1640446747,"id":"mzbzyj1a"}{"content":"abc","createAt":1640518473,"id":"dxalq7uj"}{"content":"abc","createAt":1640521099,"id":"nwqxkcfj"}{"content":"abc","createAt":1640521178,"id":"lv81iv36"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND, 0666)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640521207,"id":"pdn3unoe"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND, 0666)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640521323,"id":"r56k7ztk"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND, 0666)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640521326,"id":"t8f4kxmv"}{"content":"","createAt":1640521633,"id":"tsisw9bm"}{"content":"","createAt":1640521660,"id":"nv1mwcg1"}{"content":"","createAt":1640521914,"id":"ssxwdv52"}{"content":"","createAt":1640521969,"id":"jij186l6"}{"content":"","createAt":1640521999,"id":"pzlfoktk"}{"content":"","createAt":1640522008,"id":"l41t1igk"}{"content":"","createAt":1640522797,"id":"eaxctsvm"}{"content":"book","createAt":1640571914,"id":"nhirpn4m"}{"content":"","createAt":1640574828,"id":"nqrvkgwm"}{"content":"","createAt":1640575065,"id":"t1b5zn2m"}{"content":"abc","createAt":1640575259,"id":"n29zfw5k"}{"content":"abc","createAt":1640575288,"id":"3skad2xk"}{"content":"abc","createAt":1640575380,"id":"1aiocdqr"}{"content":"","createAt":1640575627,"id":"4c4x3rtd"}{"content":"","createAt":1640576648,"id":"9uabm6vh"}{"content":"","createAt":1640577021,"id":"5g2a1yxe"}{"content":"","createAt":1640577103,"id":"b1km7t9k"}{"content":"","createAt":1640577373,"id":"2not7cxv"}{"content":"","createAt":1640577500,"id":"3cgjw3on"}{"content":"package com.winning.bas.clinical.shiftchange.cis.inpatient.shiftchange;\n\nimport com.winning.akso.biz.webmvc.context.BizContext;\nimport com.winning.amts.encounter.inpatient.api.InpatientEncounterApi;\nimport com.winning.amts.encounter.inpatient.dtos.input.InpatientEncounterListAmtsInputDTO;\nimport com.winning.amts.encounter.inpatient.dtos.output.InpatientEncounterListAmtsOutputDTO;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.service.facade.InpatientEncounterFacade;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.shiftchange.util.RpcCallUtils;\nimport com.winning.bmts.encounter.inpatient.api.EncounterTagApi;\nimport com.winning.bmts.encounter.inpatient.api.InpatientEncounterQuery;\nimport com.winning.bmts.encounter.inpatient.dtos.input.InpatientEncounterListInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.input.QueryEncounterTagInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.InpatientEncounterListOutputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.QueryEncounterTagOutputDTO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class InpatientEncounterFacadeImpl implements InpatientEncounterFacade {\n\n    @Autowired\n    private InpatientEncounterQuery inpatientEncounterQuery;\n    \n    @Autowired\n    private EncounterTagApi encounterTagApi;\n    \n    @Autowired\n    private InpatientEncounterApi inpatientEncounterApi;\n\n    @Override\n    public List\u003cInpatientEncounterListOutputDTO\u003e queryInpatientEncounterListBmts(InpatientEncounterListInputDTO inputDTO) {\n        inputDTO.setSoid(new Long[]{BizContext.getCurrentHospitalSOID()});\n        return RpcCallUtils.call(() -\u003e inpatientEncounterQuery.queryInpatientEncounterList(inputDTO), \"调用就诊中台检索患者信息出错\");\n    }\n\n    @Override\n    public List\u003cQueryEncounterTagOutputDTO\u003e queryEncounterTagsByExample(QueryEncounterTagInputDTO inputDTO) {\n        inputDTO.setSoid(new Long[]{BizContext.getCurrentHospitalSOID()});\n        return RpcCallUtils.call(() -\u003e encounterTagApi.queryEncounterTagsByExample(inputDTO), \"\");\n    }\n\n    @Override\n    public List\u003cInpatientEncounterListAmtsOutputDTO\u003e queryInpatientEncounterListAmts(InpatientEncounterListAmtsInputDTO inputDTO) {\n        inputDTO.setSoid(new Long[]{BizContext.getCurrentHospitalSOID()});\n        return RpcCallUtils.call(() -\u003e inpatientEncounterApi.queryInpatientEncounterList(inputDTO), \"调用就诊中台检索患者信息出错\");\n    }\n    \n    \n    \n\n}\n","createAt":1640577538,"id":"qg94kaov"}{"content":"","createAt":1640581559,"id":"a1nzth3o"}{"content":"","createAt":1640584224,"id":"x92gwda4"}{"content":"","createAt":1640584436,"id":"bz9t7qln"}{"content":"","createAt":1640584524,"id":"efczyy6g"}{"content":"1","createAt":1640585305,"id":"kp1pxksb"}{"content":"2","createAt":1640585313,"id":"s4xwlcel"}{"content":"1","createAt":1640585566,"id":"39ek7kx9"}{"content":"2","createAt":1640585578,"id":"dxtvwljv"}{"content":"1","createAt":1640585614,"id":"mgyaft4p"}{"content":"1","createAt":1640585637,"id":"oxxhctq4"}{"content":"abc","createAt":1640585712,"id":"p7qyl93c"}{"content":"            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n                \n                this.loadHistory()\n            })","createAt":1640585785,"id":"8g2291s5"}{"content":"","createAt":1640592594,"id":"y4maiy7u"}{"content":"","createAt":1640592632,"id":"5miz7to5"}{"content":"","createAt":1640592643,"id":"dca5n1ns"}{"content":"","createAt":1640592659,"id":"wjmx67x2"}{"content":"","createAt":1640592693,"id":"4e4pvgh1"}{"content":"","createAt":1640592765,"id":"p469xmwh"}{"content":"","createAt":1640592780,"id":"1axzsaga"}{"content":"","createAt":1640592880,"id":"1p2bp4mo"}{"content":"","createAt":1640593090,"id":"wasmi4yr"}{"content":"abv","createAt":1640593105,"id":"v1c8k3dl"}{"content":"","createAt":1640593117,"id":"9bivzqyi"}{"content":"you show it","createAt":1640593324,"id":"lo4kkisi"}{"content":"","createAt":1640594626,"id":"53soz3qo"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640595855,"id":"ck4lp82s"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596027,"id":"f6325ngz"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596084,"id":"l8uqf5k5"}{"content":"if|else|while|do|for|return","createAt":1640596205,"id":"r2tc52nc"}{"content":"if|else|while|do|for|return","createAt":1640596214,"id":"cntqdhij"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596224,"id":"cl7fy4ce"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596249,"id":"26n74ixf"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596335,"id":"qhgk6o5e"}{"content":"","createAt":1640596387,"id":"27m99mic"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596393,"id":"l5au5dq9"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596424,"id":"epniwmtq"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640596453,"id":"ai5kbrd5"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640596480,"id":"99q9zhc1"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640596544,"id":"33ebnq7x"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597236,"id":"9altws3n"}{"content":"clikeCount","createAt":1640597421,"id":"rgfdjbp6"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597435,"id":"a2frnwcw"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597640,"id":"lpimbdlp"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597934,"id":"powruicx"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597984,"id":"ykj4aegv"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640598019,"id":"gxjt29f4"}{"content":"   \u003cdiv class=\"data-option\"\u003e\n                    \u003cdiv class=\"data-option__code\"\u003eGo\u003c/div\u003e\n                    \u003cdiv class=\"data-option__copy\"\u003e复制\u003c/div\u003e\n                    \u003cdiv class=\"data-option__toggle\"\u003e源码\u003c/div\u003e\n                \u003c/div\u003e","createAt":1640598156,"id":"rmjzz85l"}{"content":"data-code","createAt":1640598188,"id":"jr1dkt2p"}{"content":"   \u003cdiv class=\"data-option\"\u003e\n                    \u003cdiv class=\"data-option__code\"\u003eGo\u003c/div\u003e\n                    \u003cdiv class=\"data-option__copy\"\u003e复制\u003c/div\u003e\n                    \u003cdiv class=\"data-option__toggle\"\u003e源码\u003c/div\u003e\n                \u003c/div\u003e","createAt":1640598195,"id":"3rdb8cbc"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640598227,"id":"pr4lbygd"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640598270,"id":"9mn73759"}{"content":"abc","createAt":1640599060,"id":"1ai7nviw"}{"content":"abc","createAt":1640599112,"id":"vkgeybbz"}{"content":"     // 4. 代码高亮\n                    let codeType = this.checkCodeType($.el('#data-input').value)\n                    $.log(codeType)\n                    if (codeType) {\n                        $.el('.data-code').innerHTML = `\u003cpre class=\"language-${codeType}\"\u003e\u003ccode class=\"language-${codeType}\"\u003e${$.el('#data-input').value}\u003c/code\u003e\u003c/pre\u003e`\n                        Prism.highlightAll()\n                        $.toggle('.data-code')\n                    }","createAt":1640599618,"id":"m9umka88"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n)\n\nvar mutex sync.Mutex\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\tmutex.Lock()\n\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n\n\tmutex.Unlock()\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640601249,"id":"q3tx46tn"}{"content":"package com.winning.bas.clinical.shiftchange.cis.inpatient.service;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.TypeReference;\nimport com.winning.akso.biz.webmvc.context.BizContext;\nimport com.winning.amts.execution.charting.dto.ChartItemValueAmtsDTO;\nimport com.winning.amts.execution.charting.dto.input.ChartItemTrendAmtsQueryInputDTO;\nimport com.winning.amts.execution.charting.dto.output.ChartItemTrendAmtsOutputDTO;\nimport com.winning.amts.execution.charting.dto.output.ChartItemTrendAmtsQueryOutputDTO;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.common.*;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.dto.input.*;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.dto.output.*;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.service.facade.*;\nimport com.winning.base.akso.common.page.WinPagedList;\nimport com.winning.base.akso.timer.WinningTimer;\nimport com.winning.base.akso.utils.spring.BeanMapper;\nimport com.winning.bmts.encounter.inpatient.dtos.input.InpatientEncounterListInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.input.QueryEncounterTagInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.EncounterTagOutputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.InpatientEncounterListOutputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.QueryEncounterTagOutputDTO;\nimport com.winning.business.emr.inpatient.dtos.input.InpatientEmrStructureDataHistoryQueryInputDTO;\nimport com.winning.business.emr.inpatient.dtos.output.InpatientEmrStructureDataOutputDTO;\nimport com.winning.business.mdm.foundation.sdk.ValueSdk;\nimport com.winning.clinical.diagnosis.inpatient.dto.input.PatientDiagnosisQueryInputDTO;\nimport com.winning.clinical.diagnosis.inpatient.dto.output.PatientEncounterDianosisOutputDTO;\nimport com.winning.clinical.inpatient.mdm.shiftchange.dto.*;\nimport com.winning.pts.exception.WinningRuntimeException;\nimport com.winning.pts.utils.collection.ListUtil;\nimport com.winning.pts.utils.time.DateUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static java.util.stream.Collectors.*;\n\n/**\n * @author CHENG\n */\n@Service\npublic class ShiftChangeRecordService {\n\n    @Autowired\n    private ShiftChangeRecordFacade shiftChangeRecordFacade;\n\n    @Autowired\n    private ShiftChangeRecordSettingFacade recordSettingFacade;\n\n    @Autowired\n    private InpatientEncounterFacade inpatientEncounterFacade;\n\n    @Autowired\n    private CliDiagnosisRpcFacade diagnosisRpcFacade;\n\n    @Autowired\n    private InpatientEmrRpcFacade inpatientEmrRpcFacade;\n\n    @Autowired\n    private SignInformationRpcFacade signInformationRpcFacade;\n\n    @Autowired\n    private OrgSdkUtil orgSdkUtil;\n\n    @Autowired\n    private EmployeeSdkUtil employeeSdkUtil;\n\n    @Autowired\n    private ValueSdk valueSdk;\n\n\n    /**\n     * 保存交接班记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordSaveOutputAO saveShiftChangeRecord(ShiftChangeRecordSaveInputAO inputAO) {\n        ShiftChangeRecordSaveOutputAO outputAO = shiftChangeRecordFacade.saveShiftChangeRecord(inputAO);\n        return outputAO;\n    }\n\n    /**\n     * 交接班签名\n     *\n     * @param inputAO\n     */\n    public void sign(ShiftChangeSignatureSaveInputAO inputAO) {\n        shiftChangeRecordFacade.sign(inputAO);\n    }\n\n    /**\n     * 获取交接班记录单数据\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordDataGetOutputAO getShiftChangeRecordData(ShiftChangeRecordIdInputAO inputAO) {\n\n        ShiftChangeRecordDataGetOutputAO shiftChangeRecordData = shiftChangeRecordFacade.getShiftChangeRecordData(inputAO);\n        String shiftChangeRecordContent = shiftChangeRecordData.getShiftChangeRecordContent();\n\n        HashMap\u003cString, String\u003e controlDefMap = JSONObject.parseObject(shiftChangeRecordContent, new TypeReference\u003cHashMap\u003cString, String\u003e\u003e() {\n        });\n        shiftChangeRecordData.setShiftChangeRecordContent(controlDefMap.get(ControlDefEnum.CONTROL_REQ_DATA.code));\n\n        return shiftChangeRecordData;\n    }\n\n    /**\n     * 多条件查询交接班记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public WinPagedList\u003cShiftChangeRecordQueryOutputAO\u003e queryByExample(ShiftChangeRecordQueryInputAO inputAO) {\n        Long[] soid = {BizContext.getCurrentHospitalSOID()};\n\n        // 1. 查询数据\n        WinPagedList\u003cShiftChangeRecordQueryOutputAO\u003e outputAO = shiftChangeRecordFacade.queryByExample(inputAO);\n\n        // 2. 拼接业务单元、人员名称\n        List\u003cShiftChangeRecordQueryOutputAO\u003e dataList = outputAO.getData();\n        if (ListUtil.isNotEmpty(dataList)) {\n            // 业务单元描述\n            orgSdkUtil.forOrgName(dataList, ShiftChangeRecordQueryOutputAO::getBuId, ShiftChangeRecordQueryOutputAO::setBuDesc, soid);\n\n            // 人员名称\n            employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordQueryOutputAO::getHandOverBy, ShiftChangeRecordQueryOutputAO::setHandOverByName, soid);\n            employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordQueryOutputAO::getTakeOverBy, ShiftChangeRecordQueryOutputAO::setTakeOverByName, soid);\n        }\n\n        return outputAO;\n    }\n\n    /**\n     * 删除交接班记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordDeleteOutputAO deleteRecord(ShiftChangeRecordIdInputAO inputAO) {\n        return shiftChangeRecordFacade.deleteRecord(inputAO);\n    }\n\n\n    public ShiftChangeRecordGetOutputAO getRecordByIdForUpdate(ShiftChangeRecordIdInputAO inputAO) {\n        Long shiftChangeRecordId = inputAO.getShiftChangeRecordId();\n\n        // 1. 查询旧数据\n        ShiftChangeRecordGetOutputAO recordGetOutputAO = shiftChangeRecordFacade.getRecordById(inputAO);\n\n        // 2. 查询第三方数据\n        ShiftChangeRecordGetOutputAO thirdPartyOutputAO = new ShiftChangeRecordGetOutputAO();\n        thirdPartyOutputAO.setDocContentList(new ArrayList\u003c\u003e());\n        thirdPartyOutputAO.setBuId(recordGetOutputAO.getBuId());\n        init3rdPartyRecordData(inputAO, shiftChangeRecordId, thirdPartyOutputAO);\n\n        // 3. 合并数据 （目前只合并患者数据）\n        List\u003cShiftChangeContentGetOutputAO\u003e docContentList = recordGetOutputAO.getDocContentList();\n        List\u003cShiftChangeContentGetOutputAO\u003e thirdPartyDocContentList = thirdPartyOutputAO.getDocContentList();\n        if (ListUtil.isEmpty(docContentList)) {\n            if (ListUtil.isNotEmpty(thirdPartyDocContentList)) {\n                recordGetOutputAO.setDocContentList(thirdPartyDocContentList);\n            }\n        } else {\n            if (ListUtil.isNotEmpty(thirdPartyDocContentList)) {\n                // 两边均存在数据，合并\n                Map\u003cString, ShiftChangeContentGetOutputAO\u003e thirdPartyTplNoToCtrlMap\n                        = thirdPartyDocContentList.stream().collect(toMap(ShiftChangePrefabCtrlDataGetOutputAO::getPrefabControlRecordNo, Function.identity()));\n\n                docContentList.forEach(ctrl -\u003e {\n                    String tplNo = ctrl.getPrefabControlRecordNo();\n                    ShiftChangeContentGetOutputAO thirdPartyCtrl = thirdPartyTplNoToCtrlMap.get(tplNo);\n                    // 相同组件合并\n                    if (thirdPartyCtrl != null) {\n                        List\u003cShiftChangeContentItemAO\u003e thirdPartyCtrlItemList = thirdPartyCtrl.getItemList();\n                        if (ListUtil.isNotEmpty(thirdPartyCtrlItemList)) {\n                            // 按用户encounterId合并\n                            List\u003cShiftChangeContentItemAO\u003e itemList = ctrl.getItemList() == null ? new ArrayList\u003c\u003e() : ctrl.getItemList();\n                            ctrl.setItemList(itemList);\n\n                            Map\u003cLong, ShiftChangeContentItemAO\u003e encIdToItemMap \n                                    = itemList.stream().collect(toMap(ShiftChangeContentItemAO::getEncounterId, Function.identity()));\n                            thirdPartyCtrlItemList.forEach(thirdPartyItem -\u003e {\n                                Long encounterId = thirdPartyItem.getEncounterId();\n                                ShiftChangeContentItemAO item = encIdToItemMap.get(encounterId);\n                                if (item == null) {\n                                    // 不存在直接添加\n                                    itemList.add(thirdPartyItem);\n                                } else {\n                                    // 存在合并第一列\n                                    List\u003cShiftChangeContentDetailItemAO\u003e detailList = item.getDetailList();\n                                    detailList.set(0, thirdPartyItem.getDetailList().get(0));\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        \n        return recordGetOutputAO;\n    }\n\n    /**\n     * 获取交班记录详情\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordGetOutputAO getRecordById(ShiftChangeRecordIdInputAO inputAO) {\n        Long[] soid = {BizContext.getCurrentHospitalSOID()};\n        Long shiftChangeRecordId = inputAO.getShiftChangeRecordId();\n\n        // 1. 获取记录详情\n        ShiftChangeRecordGetOutputAO recordGetOutputAO = shiftChangeRecordFacade.getRecordById(inputAO);\n\n        // 2. 拉取第三方数据用于展示\n        if (checkRecordIsEmpty(recordGetOutputAO)) {\n            init3rdPartyRecordData(inputAO, shiftChangeRecordId, recordGetOutputAO);\n        }\n\n        // 3. 拼接描述数据\n        fillFoundationValue(soid, recordGetOutputAO);\n\n        return recordGetOutputAO;\n    }\n\n    /**\n     * 主数据拼接\n     *\n     * @param soid\n     * @param recordGetOutputAO\n     */\n    private void fillFoundationValue(Long[] soid, ShiftChangeRecordGetOutputAO recordGetOutputAO) {\n        // 业务单元描述\n        List\u003cShiftChangeRecordGetOutputAO\u003e dataList = Collections.singletonList(recordGetOutputAO);\n        orgSdkUtil.forOrgName(dataList, ShiftChangeRecordGetOutputAO::getBuId, ShiftChangeRecordGetOutputAO::setBuDesc, soid);\n\n        // 人员名称\n        employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordGetOutputAO::getHandOverBy, ShiftChangeRecordGetOutputAO::setHandOverByName, soid);\n        employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordGetOutputAO::getTakeOverBy, ShiftChangeRecordGetOutputAO::setTakeOverByName, soid);\n\n        // 术语描述\n        List\u003cShiftChangePatiStatsTagAO\u003e patiStatsTagList = recordGetOutputAO.getPatiStatsTagList();\n        if (ListUtil.isNotEmpty(patiStatsTagList)) {\n            List\u003cLong\u003e patientTypeCodeList = patiStatsTagList.stream().map(tag -\u003e {\n                        List\u003cShiftChangePatiStatsTagItemAO\u003e tagList = tag.getTagList();\n                        if (ListUtil.isNotEmpty(tagList)) {\n                            return tagList.stream().map(ShiftChangePatiStatsTagItemAO::getShiftChangePatientTypeCode).collect(toList());\n                        } else {\n                            return new ArrayList\u003cLong\u003e();\n                        }\n                    }).flatMap(List::stream)\n                    .collect(toList());\n\n            Map\u003cLong, String\u003e valueToDescMap = valueSdk.forValueDesc(soid, patientTypeCodeList);\n            patiStatsTagList.forEach(tag -\u003e {\n                List\u003cShiftChangePatiStatsTagItemAO\u003e tagList = tag.getTagList();\n                if (ListUtil.isNotEmpty(tagList)) {\n                    tagList.forEach(t -\u003e t.setShiftChangePatientTypeCodeDesc(valueToDescMap.get(t.getShiftChangePatientTypeCode())));\n                }\n            });\n        }\n    }\n\n    /**\n     * 初始化第三方数据\n     *\n     * @param inputAO\n     * @param shiftChangeRecordId\n     * @param recordGetOutputAO\n     */\n    private void init3rdPartyRecordData(ShiftChangeRecordIdInputAO inputAO, Long shiftChangeRecordId, ShiftChangeRecordGetOutputAO recordGetOutputAO) {\n        ShiftChangeRecordDataGetOutputAO recordData = shiftChangeRecordFacade.getShiftChangeRecordData(inputAO);\n        if (recordData == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"找不到对应交接班配置!\");\n        }\n        String shiftChangeRecordContent = recordData.getShiftChangeRecordContent();\n        HashMap\u003cString, String\u003e controlDefMap = JSONObject.parseObject(shiftChangeRecordContent, new TypeReference\u003cHashMap\u003cString, String\u003e\u003e() {\n        });\n\n        String defContentString = controlDefMap.get(ControlDefEnum.CONTROL_CONTENT.code);\n        if (defContentString != null) {\n            InpatientEncounterListInputDTO iptEncInputDto = new InpatientEncounterListInputDTO();\n            iptEncInputDto.setDeptId(recordGetOutputAO.getBuId());\n            iptEncInputDto.setInpatientStatus(FoundationConst.INPATIENT_STATUS_ADMISSION_AREA_CODE);\n            iptEncInputDto.setPageType(\"A\");\n            List\u003cInpatientEncounterListOutputDTO\u003e bmtsEncounterList = inpatientEncounterFacade.queryInpatientEncounterListBmts(iptEncInputDto);\n\n            List\u003cQueryEncounterTagOutputDTO\u003e tagOutputDTOList = new ArrayList\u003c\u003e();\n            if (ListUtil.isNotEmpty(bmtsEncounterList)) {\n                List\u003cLong\u003e encounterIds = bmtsEncounterList.stream().map(InpatientEncounterListOutputDTO::getEncounterId).collect(toList());\n\n                QueryEncounterTagInputDTO encounterTagInputDTO = new QueryEncounterTagInputDTO();\n                do {\n                    List\u003cLong\u003e currEncIds = encounterIds.subList(0, Math.min(encounterIds.size(), 100));\n                    encounterIds = encounterIds.size() \u003e 100 ? encounterIds.subList(100, encounterIds.size()) : Collections.emptyList();\n                    encounterTagInputDTO.setEncounterIds(currEncIds);\n                    tagOutputDTOList.addAll(inpatientEncounterFacade.queryEncounterTagsByExample(encounterTagInputDTO));\n                } while (ListUtil.isNotEmpty(encounterIds));\n            }\n\n            QueryShiftChangeContentControlOutputDTO docContent = JSONObject.parseObject(defContentString, QueryShiftChangeContentControlOutputDTO.class);\n            List\u003cShiftChangeContentControlOutputDTO\u003e contentControlList = docContent.getShiftChangeContentControlList();\n            if (ListUtil.isNotEmpty(contentControlList)) {\n                List\u003cShiftChangeContentGetOutputAO\u003e contentGetOutputAOList = buildDocContentCtrlInfo(shiftChangeRecordId, bmtsEncounterList, tagOutputDTOList, contentControlList, false);\n                recordGetOutputAO.setDocContentList(contentGetOutputAOList);\n            }\n        }\n\n\n        // 5.2 病区概况组件\n        String defBuOverViewString = controlDefMap.get(ControlDefEnum.CONTROL_BU_OVERVIEW.code);\n        if (defBuOverViewString != null) {\n            QueryShiftChangeBuOverviewControlOutputDTO buOverviewControlWrapper = JSONObject.parseObject(defBuOverViewString, QueryShiftChangeBuOverviewControlOutputDTO.class);\n            if (buOverviewControlWrapper != null) {\n                List\u003cShiftChangeBuOverviewControlOutputDTO\u003e buOverviewControlList = buOverviewControlWrapper.getShiftChangeBuOverviewControlList();\n                if (ListUtil.isNotEmpty(buOverviewControlList)) {\n                    List\u003cShiftChangePatientStatsGetOutputAO\u003e patientStatsGetOutputAOS = buOverviewControlList.stream().map(buOverviewCtrl -\u003e {\n                        ShiftChangePatientStatsGetOutputAO patientStats = BeanMapper.map(buOverviewCtrl, ShiftChangePatientStatsGetOutputAO.class);\n                        patientStats.setPrefabControlRecordNo(buOverviewCtrl.getPrefabControlReqTplNo());\n                        patientStats.setPrefabControlTypeCode(buOverviewCtrl.getPrefabControlTypeCode());\n                        patientStats.setPrefabControlNo(buOverviewCtrl.getPrefabControlNo());\n                        patientStats.setPrefabControlCaption(buOverviewCtrl.getPrefabControlCaption());\n\n                        List\u003cPrefabControlBuOverviewOutputDTO\u003e prefabControlBuOverviewList = buOverviewCtrl.getPrefabControlBuOverviewList();\n                        if (ListUtil.isNotEmpty(prefabControlBuOverviewList)) {\n                            List\u003cShiftChangePatientStatsItemAO\u003e statsItemAOS = prefabControlBuOverviewList.stream().map(buOverviewCtrlItem -\u003e {\n                                ShiftChangePatientStatsItemAO statsItemAO = new ShiftChangePatientStatsItemAO();\n                                statsItemAO.setSeqNo(buOverviewCtrlItem.getSeqNo());\n                                statsItemAO.setPatientStatsTypeCode(buOverviewCtrlItem.getPatientStatsTypeCode());\n                                statsItemAO.setStatsCustomizeColumnCaption(buOverviewCtrlItem.getColumnCaption());\n                                statsItemAO.setPatientStatsValue(0);\n                                return statsItemAO;\n                            }).collect(toList());\n                            patientStats.setItemList(statsItemAOS);\n                        }\n                        return patientStats;\n                    }).collect(toList());\n                    recordGetOutputAO.setPatientStatsList(patientStatsGetOutputAOS);\n                }\n            }\n        }\n    }\n\n    /**\n     * 构建医生交接班控件数据\n     *\n     * @param shiftChangeRecordId\n     * @param encounterList\n     * @param tagOutputDTOList\n     * @return\n     */\n    private List\u003cShiftChangeContentGetOutputAO\u003e buildDocContentCtrlInfo(Long shiftChangeRecordId, List\u003cInpatientEncounterListOutputDTO\u003e encounterList, List\u003cQueryEncounterTagOutputDTO\u003e tagOutputDTOList, List\u003cShiftChangeContentControlOutputDTO\u003e contentControlList, boolean manualAdd) {\n        if (ListUtil.isNotEmpty(encounterList)) {\n            List\u003cLong\u003e encounterIds\n                    = encounterList.stream().map(InpatientEncounterListOutputDTO::getEncounterId).collect(toList());\n            Map\u003cLong, InpatientEncounterListOutputDTO\u003e encIdToPatiInfoMap = encounterList.stream().collect(toMap(x -\u003e x.getEncounterId(), y -\u003e y));\n\n            // 查询患者诊断信息\n            List\u003cShiftChangeDataEnum\u003e diagnosisEnumList = ShiftChangeDataEnum.valuesOfDiagnosis();\n            List\u003cLong\u003e diagnosisTypeCodeList = diagnosisEnumList.stream().map(ShiftChangeDataEnum::getFoundationValue).collect(toList());\n            PatientDiagnosisQueryInputDTO diagnosisQueryInputDTO = new PatientDiagnosisQueryInputDTO();\n            diagnosisQueryInputDTO.setEncounterIdList(encounterIds);\n            diagnosisQueryInputDTO.setDiagnosisTypeCodeList(diagnosisTypeCodeList);\n            List\u003cPatientEncounterDianosisOutputDTO\u003e diagnosisOutputDTOS = diagnosisRpcFacade.queryDiagnosisByExample(diagnosisQueryInputDTO);\n            diagnosisOutputDTOS = diagnosisOutputDTOS == null ? Collections.emptyList() : diagnosisOutputDTOS;\n            Map\u003cLong, List\u003cPatientEncounterDianosisOutputDTO\u003e\u003e encIdToDiagnosisListMap\n                    = diagnosisOutputDTOS.stream().collect(Collectors.groupingBy(PatientEncounterDianosisOutputDTO::getEncounterId));\n\n\n            // 患者标签\n            Map\u003cLong, HashSet\u003cLong\u003e\u003e patiTypeCodeToEncIds = classifyTags(tagOutputDTOList);\n            Map\u003cLong, List\u003cEncounterTagOutputDTO\u003e\u003e rawEncIdToTagsMap = tagOutputDTOList.stream()\n                    .filter(x -\u003e ListUtil.isNotEmpty(x.getTags()))\n                    .collect(toMap(x -\u003e x.getEncounterId(), y -\u003e y.getTags()));\n\n            // 按规则抽取数据\n            List\u003cShiftChangeDataEnum\u003e dataEnumList = Arrays.asList(ShiftChangeDataEnum.values());\n            Map\u003cLong, Map\u003cShiftChangeDataEnum, String\u003e\u003e dataInfo = new HashMap\u003c\u003e();\n\n            encounterList.forEach(encInfo -\u003e {\n                Long encounterId = encInfo.getEncounterId();\n                Map\u003cShiftChangeDataEnum, String\u003e dataDetails = new EnumMap\u003c\u003e(ShiftChangeDataEnum.class);\n                dataInfo.put(encounterId, dataDetails);\n\n                // 患者基本信息组装 \n                buildBaseInfoData(dataEnumList, encInfo, rawEncIdToTagsMap.get(encounterId), dataDetails);\n\n                // 患者诊断信息组装\n                List\u003cPatientEncounterDianosisOutputDTO\u003e diagnosisList = encIdToDiagnosisListMap.get(encounterId);\n                buildDiagnosisData(dataDetails, diagnosisList);\n\n                // 护理域、记录域数据\n                buildRecordData(encounterId, dataDetails);\n\n            });\n\n            // 5. 按组件实际需求组装各个组件数据结构\n\n            // 5.1 医生交接班组件\n            return contentControlList.stream()\n                    .map(ctrl -\u003e buildDocContentCtrlData(shiftChangeRecordId, encIdToPatiInfoMap, patiTypeCodeToEncIds, dataInfo, ctrl, manualAdd))\n                    .filter(Objects::nonNull)\n                    .collect(toList());\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * 查询诊断数据\n     *\n     * @param dataDetails\n     * @param diagnosisList\n     */\n    private void buildDiagnosisData(Map\u003cShiftChangeDataEnum, String\u003e dataDetails, List\u003cPatientEncounterDianosisOutputDTO\u003e diagnosisList) {\n        if (ListUtil.isNotEmpty(diagnosisList)) {\n            // 诊断分组\n            Map\u003cLong, List\u003cPatientEncounterDianosisOutputDTO\u003e\u003e typeGroup\n                    = diagnosisList.stream().collect(groupingBy(PatientEncounterDianosisOutputDTO::getDiagnosisTypeCode));\n            typeGroup.forEach((diagnosisTypeCode, diagnosisOfType) -\u003e {\n                ShiftChangeDataEnum dataEnum = ShiftChangeDataEnum.valueOfFoundationValue(diagnosisTypeCode);\n                dataDetails.put(dataEnum,\n                        diagnosisOfType.stream()\n                                .map(PatientEncounterDianosisOutputDTO::getDiagnosisFullDesc)\n                                .collect(Collectors.joining(\", \"))\n                );\n            });\n        }\n    }\n\n    /**\n     * 查询患者基本信息\n     *\n     * @param dataEnumList\n     * @param encInfo\n     * @param tags\n     * @param dataDetails\n     */\n    private void buildBaseInfoData(List\u003cShiftChangeDataEnum\u003e dataEnumList, InpatientEncounterListOutputDTO encInfo, List\u003cEncounterTagOutputDTO\u003e tags, Map\u003cShiftChangeDataEnum, String\u003e dataDetails) {\n        dataEnumList.forEach(dataEnum -\u003e {\n            if (dataEnum.equals(ShiftChangeDataEnum.BED_NO)) {\n                dataDetails.put(dataEnum, encInfo.getBedNo());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.FULL_NAME)) {\n                dataDetails.put(dataEnum, encInfo.getFullName());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.GENDER_NAME)) {\n                dataDetails.put(dataEnum, encInfo.getGenderName());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.IMRN)) {\n                dataDetails.put(dataEnum, encInfo.getImrn());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.TAGS)) {\n                if (ListUtil.isNotEmpty(tags)) {\n                    String tagsString = tags.stream().map(EncounterTagOutputDTO::getTagName).collect(Collectors.joining(\", \"));\n                    dataDetails.put(dataEnum, tagsString);\n                }\n            }\n        });\n    }\n\n    /**\n     * 查询第三方数据：护理、记录域\n     *\n     * @param encounterId\n     * @param dataDetails\n     */\n    private void buildRecordData(Long encounterId, Map\u003cShiftChangeDataEnum, String\u003e dataDetails) {\n        // 最新体征数据组装 - 护理域\n        List\u003cEncSignInfoEnum\u003e encSignInfoEnums = EncSignInfoEnum.valueOfNeed();\n        Map\u003cLong, EncSignInfoEnum\u003e conceptIdToSignInfoMap = encSignInfoEnums.stream().collect(toMap(EncSignInfoEnum::getCode, Function.identity()));\n\n        ChartItemTrendAmtsQueryInputDTO signInfoInputDto = new ChartItemTrendAmtsQueryInputDTO();\n        signInfoInputDto.setEncounterId(encounterId);\n        Date current = new Date(WinningTimer.getTime());\n        Date beginOfCurrent = DateUtil.beginOfDate(current);\n        signInfoInputDto.setStartAt(beginOfCurrent);\n        signInfoInputDto.setEndAt(current);\n        signInfoInputDto.setConceptIds(new ArrayList\u003c\u003e(conceptIdToSignInfoMap.keySet()));\n\n        ChartItemTrendAmtsQueryOutputDTO signInfo = signInformationRpcFacade.queryChartItemTrendByExample(signInfoInputDto);\n\n        if (signInfo != null \u0026\u0026 ListUtil.isNotEmpty(signInfo.getChartItems())) {\n            List\u003cChartItemTrendAmtsOutputDTO\u003e chartItems = signInfo.getChartItems();\n            // 获取最新时间\n            Date latestDate = chartItems.stream()\n                    .filter(x -\u003e ListUtil.isNotEmpty(x.getChartItemValues()))\n                    .map(x -\u003e x.getChartItemValues()\n                            .stream()\n                            .max(Comparator.comparing(ChartItemValueAmtsDTO::getChartMainAt))\n                            .orElse(null))\n                    .filter(Objects::nonNull)\n                    .max(Comparator.comparing(ChartItemValueAmtsDTO::getChartMainAt))\n                    .map(ChartItemValueAmtsDTO::getChartMainAt)\n                    .orElse(null);\n\n            if (latestDate != null) {\n                // 获取最新体征数据\n                List\u003cChartItemValueAmtsDTO\u003e chartItemValueList = chartItems.stream()\n                        .filter(x -\u003e ListUtil.isNotEmpty(x.getChartItemValues()))\n                        .map(x -\u003e x.getChartItemValues()\n                                .stream()\n                                .filter(y -\u003e latestDate.equals(y.getChartMainAt()))\n                                .findFirst()\n                                .orElse(null))\n                        .filter(Objects::nonNull)\n                        .collect(toList());\n\n                if (ListUtil.isNotEmpty(chartItemValueList)) {\n                    String signInfoStr = chartItemValueList.stream().map(x -\u003e {\n                        String val = String.valueOf(x.getChartItemValueContent());\n                        Long conceptId = x.getConceptId();\n                        EncSignInfoEnum signInfoEnum = conceptIdToSignInfoMap.get(conceptId);\n                        return signInfoEnum.getMsg() + \": \" + val + signInfoEnum.getUnit();\n                    }).collect(joining(\", \"));\n\n                    dataDetails.put(ShiftChangeDataEnum.LATEST_PHY_SIGN, signInfoStr);\n                }\n            }\n        }\n\n\n        // 主诉、现病史数据组装 - 记录域\n        //主诉\n        getInpatientEmrData(encounterId, \"WIN3.347724.10717\")\n                .ifPresent(x -\u003e dataDetails.put(ShiftChangeDataEnum.CHIEF_COMPLAINT, x));\n\n        //现病史\n        getInpatientEmrData(encounterId, \"WIN3.347724.10643\")\n                .ifPresent(x -\u003e dataDetails.put(ShiftChangeDataEnum.CHIEF_COMPLAINT, x));\n    }\n\n    /**\n     * 构建医生交接班数据\n     *\n     * @param shiftChangeRecordId\n     * @param encIdToPatiInfoMap\n     * @param patiTypeCodeToEncIds\n     * @param dataInfo\n     * @param ctrl\n     * @param manualAdd\n     */\n    private ShiftChangeContentGetOutputAO buildDocContentCtrlData(Long shiftChangeRecordId, Map\u003cLong, InpatientEncounterListOutputDTO\u003e encIdToPatiInfoMap, Map\u003cLong, HashSet\u003cLong\u003e\u003e patiTypeCodeToEncIds, Map\u003cLong, Map\u003cShiftChangeDataEnum, String\u003e\u003e dataInfo, ShiftChangeContentControlOutputDTO ctrl, boolean manualAdd) {\n        Long prefabControlTypeCode = ctrl.getPrefabControlTypeCode();\n        if (FoundationConst.PREFAB_CONTROL_TYPE_COMMON_PATIENT.equals(prefabControlTypeCode)) {\n            ShiftChangeContentGetOutputAO content = new ShiftChangeContentGetOutputAO();\n\n            List\u003cShiftChangeContentItemAO\u003e thisCtrlItemList = new ArrayList\u003c\u003e();\n            content.setItemList(thisCtrlItemList);\n            content.setPrefabControlRecordNo(ctrl.getPrefabControlReqTplNo());\n            content.setPrefabControlTypeCode(ctrl.getPrefabControlTypeCode());\n            content.setPrefabControlNo(ctrl.getPrefabControlNo());\n            content.setPrefabControlCaption(ctrl.getPrefabControlCaption());\n\n            // 医生交接班组件\n            List\u003cPrefabControlPatiTypeOutputDTO\u003e patiTypeList = ctrl.getPatiTypeList();\n            // 患者类型\n            List\u003cLong\u003e patiTypeCodeList\n                    = patiTypeList.stream().map(PrefabControlPatiTypeOutputDTO::getShiftChangePatientTypeCode).collect(toList());\n\n            // 列定义\n            List\u003cPrefabCtrlShiftChgContOutputDTO\u003e dataList = ctrl.getDataList();\n            List\u003cList\u003cDisplayFormatUtil.Seg\u003e\u003e formatList = dataList.stream().map(x -\u003e DisplayFormatUtil.buildFormat(x.getColumnDisplayFormat())).collect(toList());\n\n            // 数据组合\n            patiTypeCodeToEncIds.forEach((patiType, encIds) -\u003e {\n                if (manualAdd || patiTypeCodeList.contains(patiType)) {\n                    if (encIds != null \u0026\u0026 !encIds.isEmpty()) {\n                        List\u003cShiftChangeContentItemAO\u003e itemList = encIds.stream().map(encId -\u003e {\n                            Map\u003cShiftChangeDataEnum, String\u003e metaMap = dataInfo.get(encId);\n\n                            ShiftChangeContentItemAO contentItem = new ShiftChangeContentItemAO();\n                            contentItem.setShiftChangeRecordId(shiftChangeRecordId);\n                            contentItem.setEncounterId(encId);\n                            contentItem.setImrn(metaMap.get(ShiftChangeDataEnum.IMRN));\n                            contentItem.setFullName(metaMap.get(ShiftChangeDataEnum.FULL_NAME));\n                            contentItem.setGenderCode(encIdToPatiInfoMap.get(encId).getGenderCode());\n                            contentItem.setAgeCond(encIdToPatiInfoMap.get(encId).getAge());\n                            contentItem.setBedNo(metaMap.get(ShiftChangeDataEnum.BED_NO));\n\n                            // 列定义\n                            AtomicInteger idx = new AtomicInteger(0);\n                            List\u003cShiftChangeContentDetailItemAO\u003e detailItemAOList = dataList.stream().map(col -\u003e {\n                                ShiftChangeContentDetailItemAO detailItem = new ShiftChangeContentDetailItemAO();\n                                detailItem.setColumnCaption(col.getColumnCaption());\n                                detailItem.setColumnWidth(col.getColumnWidth());\n                                detailItem.setColumnContent(DisplayFormatUtil.displayFromFormat(metaMap, formatList.get(idx.getAndIncrement())));\n\n                                return detailItem;\n                            }).collect(toList());\n                            contentItem.setDetailList(detailItemAOList);\n\n                            return contentItem;\n                        }).collect(toList());\n                        thisCtrlItemList.addAll(itemList);\n                    }\n                }\n            });\n            return content;\n        }\n        return null;\n    }\n\n    /**\n     * 获取 记录域 数据\n     *\n     * @param encounterId        就诊标识\n     * @param inpEmrSectionWinId 病历段落编码\n     * @return\n     */\n    private Optional\u003cString\u003e getInpatientEmrData(Long encounterId, String inpEmrSectionWinId) {\n        InpatientEmrStructureDataHistoryQueryInputDTO queryInputDTO = new InpatientEmrStructureDataHistoryQueryInputDTO();\n        queryInputDTO.setEncounterId(encounterId);\n\n        queryInputDTO.setInpEmrSectionWinId(inpEmrSectionWinId);\n        InpatientEmrStructureDataOutputDTO presentHistory = inpatientEmrRpcFacade.queryInpatientEmrSetStructureDataHistory(queryInputDTO);\n        if (presentHistory != null \u0026\u0026 ListUtil.isNotEmpty(presentHistory.getEmrSectionInfo())) {\n            return Optional.ofNullable(presentHistory.getEmrSectionInfo().get(0).getInpatEmrSectionPlainTxt());\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * 按标签和权重对就诊ID归类\n     *\n     * @param encounterTagOutputDTOS\n     * @return\n     */\n    private Map\u003cLong, HashSet\u003cLong\u003e\u003e classifyTags(List\u003cQueryEncounterTagOutputDTO\u003e encounterTagOutputDTOS) {\n        // tag - set\u003cencounterId\u003e\n        Map\u003cLong, HashSet\u003cLong\u003e\u003e tagToEncIds = new HashMap\u003c\u003e(16);\n        encounterTagOutputDTOS.forEach(encTag -\u003e {\n            List\u003cEncounterTagOutputDTO\u003e tags = encTag.getTags();\n            if (ListUtil.isEmpty(tags)) {\n                EncCliTagEnum tagEnum = EncCliTagEnum.NORMAL;\n                HashSet\u003cLong\u003e encIds = tagToEncIds.computeIfAbsent(tagEnum.getTagCode(), k -\u003e new HashSet\u003c\u003e());\n                encIds.add(encTag.getEncounterId());\n            } else {\n                tags.forEach(tag -\u003e {\n                    EncCliTagEnum tagEnum\n                            = EncCliTagEnum.valueOfTagCode(tag.getTagId());\n                    HashSet\u003cLong\u003e encIds = tagToEncIds.computeIfAbsent(tagEnum.getTagCode(), k -\u003e new HashSet\u003c\u003e());\n                    encIds.add(encTag.getEncounterId());\n                });\n            }\n        });\n\n\n        // 按权重调整\n        List\u003cEncCliTagEnum\u003e sortedTagEnums\n                = Arrays.stream(EncCliTagEnum.values())\n                .sorted(Comparator.comparingInt(EncCliTagEnum::getWeight))\n                .collect(toList());\n\n        Set\u003cLong\u003e usedEncIds = new HashSet\u003c\u003e();\n        Map\u003cLong, HashSet\u003cLong\u003e\u003e codeToEncIds = new HashMap\u003c\u003e(16);\n        sortedTagEnums.forEach(tagEnum -\u003e {\n            HashSet\u003cLong\u003e encIds = tagToEncIds.get(tagEnum.getTagCode());\n            if (encIds != null) {\n                encIds.removeIf(usedEncIds::contains);\n                usedEncIds.addAll(encIds);\n                codeToEncIds.put(tagEnum.getCode(), encIds);\n            }\n        });\n        return codeToEncIds;\n    }\n\n    private boolean checkRecordIsEmpty(ShiftChangeRecordGetOutputAO recordGetOutputAO) {\n        List\u003cShiftChangeBuSummaryGetOutputAO\u003e buSummaryList = recordGetOutputAO.getBuSummaryList();\n        List\u003cShiftChangeContentGetOutputAO\u003e docContentList = recordGetOutputAO.getDocContentList();\n        List\u003cShiftChangePatientStatsGetOutputAO\u003e patientStatsList = recordGetOutputAO.getPatientStatsList();\n        return ListUtil.isEmpty(buSummaryList)\n                \u0026\u0026 ListUtil.isEmpty(docContentList)\n                \u0026\u0026 ListUtil.isEmpty(patientStatsList);\n    }\n\n\n    /**\n     * 新建交班单\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordSaveOutputAO initShiftChangeRecord(ShiftChangeRecordInitInputAO inputAO) {\n        // 1. 通过shiftChangeSettingId获取交班单结构数据JSON\n        ShiftChangeRecordSettingAO recordSettingAO = recordSettingFacade.getRecordSettingById(inputAO.getShiftChangeRecordSettingId());\n        if (recordSettingAO == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"找不到对应交接班配置!\");\n        }\n        Long tplCliOrderReqId = recordSettingAO.getTplCliOrderReqId();\n        if (tplCliOrderReqId == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"请先配置交接班配置组件详情!\");\n        }\n        String tplClinicalOrderReqData = recordSettingFacade.getTplClinicalOrderReqDataById(tplCliOrderReqId);\n        if (tplClinicalOrderReqData == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"请先配置交接班配置组件详情!\");\n        }\n\n        // 2. 重复性验证\n        ShiftChangeRecordQueryInputAO queryInputAO = new ShiftChangeRecordQueryInputAO();\n        queryInputAO.setShiftChangeCode(inputAO.getShiftChangeCode());\n        queryInputAO.setBuId(inputAO.getBuId());\n        queryInputAO.setShiftChangeDateStart(inputAO.getShiftChangeDate());\n        queryInputAO.setShiftChangeDateEnd(inputAO.getShiftChangeDate());\n        WinPagedList\u003cShiftChangeRecordQueryOutputAO\u003e existResponse = shiftChangeRecordFacade.queryByExample(queryInputAO);\n        if (ListUtil.isNotEmpty(existResponse.getData())) {\n            throw new WinningRuntimeException(ErrorConstantEnum.REPEAT_DATE.getCode(), \"当前班次存在交班记录，不能重复添加\");\n        }\n\n        // 构建模板数据\n        ShiftChangeRecordDataInputAO dataInputAO = new ShiftChangeRecordDataInputAO();\n\n        QueryShiftChangeBuOverviewControlOutputDTO buOverviewControl = recordSettingFacade.getBuOverviewControlByReqId(tplCliOrderReqId);\n        QueryShiftChangeContentControlOutputDTO contentControl = recordSettingFacade.getContentControlByReqId(tplCliOrderReqId);\n\n        Map\u003cString, String\u003e controlDefMap = new HashMap\u003c\u003e();\n        controlDefMap.put(ControlDefEnum.CONTROL_CONTENT.code, JSONObject.toJSONString(contentControl));\n        controlDefMap.put(ControlDefEnum.CONTROL_BU_OVERVIEW.code, JSONObject.toJSONString(buOverviewControl));\n        controlDefMap.put(ControlDefEnum.CONTROL_REQ_DATA.code, tplClinicalOrderReqData);\n\n        dataInputAO.setShiftChangeRecordContent(JSONObject.toJSONString(controlDefMap));\n        inputAO.setShiftChangeRecordData(dataInputAO);\n\n        // 2. 保存交班单\n        return shiftChangeRecordFacade.initShiftChangeRecord(inputAO);\n    }\n\n    /**\n     * 撤销已提交记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordSaveOutputAO revokeRecord(ShiftChangeRecordIdInputAO inputAO) {\n        return shiftChangeRecordFacade.revokeRecord(inputAO);\n    }\n\n    /**\n     * 查询病区患者\n     *\n     * @param inputAO\n     * @return\n     */\n    public List\u003cInpatientEncounterQueryOutputAO\u003e queryInpatientEncounterByExample(InpatientEncounterQueryInputAO inputAO) {\n        InpatientEncounterListInputDTO iptEncounterInputDto = new InpatientEncounterListInputDTO();\n        iptEncounterInputDto.setDeptId(inputAO.getDeptId());\n        iptEncounterInputDto.setInpatientStatus(FoundationConst.INPATIENT_STATUS_ADMISSION_AREA_CODE);\n        iptEncounterInputDto.setPageType(\"A\");\n        List\u003cInpatientEncounterListOutputDTO\u003e encounterList = inpatientEncounterFacade.queryInpatientEncounterListBmts(iptEncounterInputDto);\n        if (ListUtil.isNotEmpty(encounterList)) {\n            return BeanMapper.mapList(encounterList, InpatientEncounterListOutputDTO.class, InpatientEncounterQueryOutputAO.class);\n        } else {\n            return Collections.emptyList();\n        }\n    }\n\n    /**\n     * 单个患者交班信息查询\n     *\n     * @param inputAO\n     * @return\n     */\n    public List\u003cShiftChangeContentItemAO\u003e singlePatientContentInit(SinglePatientContentInitInputAO inputAO) {\n        Long shiftChangeRecordId = inputAO.getShiftChangeRecordId();\n\n        ShiftChangeRecordIdInputAO recordIdInputAO = new ShiftChangeRecordIdInputAO();\n        recordIdInputAO.setShiftChangeRecordId(inputAO.getShiftChangeRecordId());\n        ShiftChangeRecordDataGetOutputAO recordData = shiftChangeRecordFacade.getShiftChangeRecordData(recordIdInputAO);\n        if (recordData == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"找不到对应交接班配置!\");\n        }\n        String shiftChangeRecordContent = recordData.getShiftChangeRecordContent();\n        HashMap\u003cString, String\u003e controlDefMap = JSONObject.parseObject(shiftChangeRecordContent, new TypeReference\u003cHashMap\u003cString, String\u003e\u003e() {\n        });\n\n        String defContentString = controlDefMap.get(ControlDefEnum.CONTROL_CONTENT.code);\n        if (defContentString != null) {\n            // TODO 替换amts接口\n            InpatientEncounterListInputDTO iptEncInputDto = new InpatientEncounterListInputDTO();\n            iptEncInputDto.setInpatientStatus(FoundationConst.INPATIENT_STATUS_ADMISSION_AREA_CODE);\n            iptEncInputDto.setEncounterIds(inputAO.getEncounterIdList());\n            iptEncInputDto.setPageType(\"A\");\n            List\u003cInpatientEncounterListOutputDTO\u003e bmtsEncounterList = inpatientEncounterFacade.queryInpatientEncounterListBmts(iptEncInputDto);\n\n            List\u003cQueryEncounterTagOutputDTO\u003e tagOutputDTOList = new ArrayList\u003c\u003e();\n            if (ListUtil.isNotEmpty(bmtsEncounterList)) {\n                List\u003cLong\u003e encounterIds = bmtsEncounterList.stream().map(InpatientEncounterListOutputDTO::getEncounterId).collect(toList());\n\n                QueryEncounterTagInputDTO encounterTagInputDTO = new QueryEncounterTagInputDTO();\n                do {\n                    List\u003cLong\u003e currEncIds = encounterIds.subList(0, Math.min(encounterIds.size(), 100));\n                    encounterIds = encounterIds.size() \u003e 100 ? encounterIds.subList(100, encounterIds.size()) : Collections.emptyList();\n                    encounterTagInputDTO.setEncounterIds(currEncIds);\n                    tagOutputDTOList.addAll(inpatientEncounterFacade.queryEncounterTagsByExample(encounterTagInputDTO));\n                } while (ListUtil.isNotEmpty(encounterIds));\n            }\n\n            QueryShiftChangeContentControlOutputDTO docContent = JSONObject.parseObject(defContentString, QueryShiftChangeContentControlOutputDTO.class);\n            List\u003cShiftChangeContentControlOutputDTO\u003e contentControlList = docContent.getShiftChangeContentControlList();\n            if (ListUtil.isNotEmpty(contentControlList)) {\n\n                contentControlList = contentControlList.stream().filter(x -\u003e x.getShiftChangePrefabControlId().equals(inputAO.getShiftChangePrefabControlId())).collect(toList());\n                if (ListUtil.isNotEmpty(contentControlList)) {\n                    List\u003cShiftChangeContentGetOutputAO\u003e contentGetOutputAOList = buildDocContentCtrlInfo(shiftChangeRecordId, bmtsEncounterList, tagOutputDTOList, contentControlList, true);\n                    if (ListUtil.isNotEmpty(contentGetOutputAOList)) {\n                        return contentGetOutputAOList.get(0).getItemList();\n                    }\n                }\n            }\n        }\n        return Collections.emptyList();\n    }\n\n    public enum ControlDefEnum {\n        CONTROL_BU_OVERVIEW(\"buOverView\", QueryShiftChangeBuOverviewControlOutputDTO.class),\n        CONTROL_CONTENT(\"docContent\", QueryShiftChangeContentControlOutputDTO.class),\n        CONTROL_REQ_DATA(\"reqData\", String.class),\n        ;\n\n        ControlDefEnum(String code, Class clazz) {\n            this.code = code;\n            this.clazz = clazz;\n        }\n\n        /**\n         * 编码\n         */\n        private String code;\n        /**\n         * 类\n         */\n        private Class clazz;\n    }\n}\n","createAt":1640676477,"id":"bnubjm83"}{"content":"http://localhost:8080/share/bnubjm83","createAt":1640676663,"id":"2p6t9wsq"}