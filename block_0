{"content":"11","createAt":1640446431,"id":"3k5smhgz"}{"content":"22","createAt":1640446448,"id":"qiqmpxkk"}{"content":"33","createAt":1640446468,"id":"r5p48z93"}{"content":"55","createAt":1640446550,"id":"pgvmmeor"}{"content":"9999","createAt":1640446747,"id":"mzbzyj1a"}{"content":"abc","createAt":1640518473,"id":"dxalq7uj"}{"content":"abc","createAt":1640521099,"id":"nwqxkcfj"}{"content":"abc","createAt":1640521178,"id":"lv81iv36"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND, 0666)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640521207,"id":"pdn3unoe"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND, 0666)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640521323,"id":"r56k7ztk"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND, 0666)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640521326,"id":"t8f4kxmv"}{"content":"","createAt":1640521633,"id":"tsisw9bm"}{"content":"","createAt":1640521660,"id":"nv1mwcg1"}{"content":"","createAt":1640521914,"id":"ssxwdv52"}{"content":"","createAt":1640521969,"id":"jij186l6"}{"content":"","createAt":1640521999,"id":"pzlfoktk"}{"content":"","createAt":1640522008,"id":"l41t1igk"}{"content":"","createAt":1640522797,"id":"eaxctsvm"}{"content":"book","createAt":1640571914,"id":"nhirpn4m"}{"content":"","createAt":1640574828,"id":"nqrvkgwm"}{"content":"","createAt":1640575065,"id":"t1b5zn2m"}{"content":"abc","createAt":1640575259,"id":"n29zfw5k"}{"content":"abc","createAt":1640575288,"id":"3skad2xk"}{"content":"abc","createAt":1640575380,"id":"1aiocdqr"}{"content":"","createAt":1640575627,"id":"4c4x3rtd"}{"content":"","createAt":1640576648,"id":"9uabm6vh"}{"content":"","createAt":1640577021,"id":"5g2a1yxe"}{"content":"","createAt":1640577103,"id":"b1km7t9k"}{"content":"","createAt":1640577373,"id":"2not7cxv"}{"content":"","createAt":1640577500,"id":"3cgjw3on"}{"content":"package com.winning.bas.clinical.shiftchange.cis.inpatient.shiftchange;\n\nimport com.winning.akso.biz.webmvc.context.BizContext;\nimport com.winning.amts.encounter.inpatient.api.InpatientEncounterApi;\nimport com.winning.amts.encounter.inpatient.dtos.input.InpatientEncounterListAmtsInputDTO;\nimport com.winning.amts.encounter.inpatient.dtos.output.InpatientEncounterListAmtsOutputDTO;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.service.facade.InpatientEncounterFacade;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.shiftchange.util.RpcCallUtils;\nimport com.winning.bmts.encounter.inpatient.api.EncounterTagApi;\nimport com.winning.bmts.encounter.inpatient.api.InpatientEncounterQuery;\nimport com.winning.bmts.encounter.inpatient.dtos.input.InpatientEncounterListInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.input.QueryEncounterTagInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.InpatientEncounterListOutputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.QueryEncounterTagOutputDTO;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class InpatientEncounterFacadeImpl implements InpatientEncounterFacade {\n\n    @Autowired\n    private InpatientEncounterQuery inpatientEncounterQuery;\n    \n    @Autowired\n    private EncounterTagApi encounterTagApi;\n    \n    @Autowired\n    private InpatientEncounterApi inpatientEncounterApi;\n\n    @Override\n    public List\u003cInpatientEncounterListOutputDTO\u003e queryInpatientEncounterListBmts(InpatientEncounterListInputDTO inputDTO) {\n        inputDTO.setSoid(new Long[]{BizContext.getCurrentHospitalSOID()});\n        return RpcCallUtils.call(() -\u003e inpatientEncounterQuery.queryInpatientEncounterList(inputDTO), \"调用就诊中台检索患者信息出错\");\n    }\n\n    @Override\n    public List\u003cQueryEncounterTagOutputDTO\u003e queryEncounterTagsByExample(QueryEncounterTagInputDTO inputDTO) {\n        inputDTO.setSoid(new Long[]{BizContext.getCurrentHospitalSOID()});\n        return RpcCallUtils.call(() -\u003e encounterTagApi.queryEncounterTagsByExample(inputDTO), \"\");\n    }\n\n    @Override\n    public List\u003cInpatientEncounterListAmtsOutputDTO\u003e queryInpatientEncounterListAmts(InpatientEncounterListAmtsInputDTO inputDTO) {\n        inputDTO.setSoid(new Long[]{BizContext.getCurrentHospitalSOID()});\n        return RpcCallUtils.call(() -\u003e inpatientEncounterApi.queryInpatientEncounterList(inputDTO), \"调用就诊中台检索患者信息出错\");\n    }\n    \n    \n    \n\n}\n","createAt":1640577538,"id":"qg94kaov"}{"content":"","createAt":1640581559,"id":"a1nzth3o"}{"content":"","createAt":1640584224,"id":"x92gwda4"}{"content":"","createAt":1640584436,"id":"bz9t7qln"}{"content":"","createAt":1640584524,"id":"efczyy6g"}{"content":"1","createAt":1640585305,"id":"kp1pxksb"}{"content":"2","createAt":1640585313,"id":"s4xwlcel"}{"content":"1","createAt":1640585566,"id":"39ek7kx9"}{"content":"2","createAt":1640585578,"id":"dxtvwljv"}{"content":"1","createAt":1640585614,"id":"mgyaft4p"}{"content":"1","createAt":1640585637,"id":"oxxhctq4"}{"content":"abc","createAt":1640585712,"id":"p7qyl93c"}{"content":"            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n                \n                this.loadHistory()\n            })","createAt":1640585785,"id":"8g2291s5"}{"content":"","createAt":1640592594,"id":"y4maiy7u"}{"content":"","createAt":1640592632,"id":"5miz7to5"}{"content":"","createAt":1640592643,"id":"dca5n1ns"}{"content":"","createAt":1640592659,"id":"wjmx67x2"}{"content":"","createAt":1640592693,"id":"4e4pvgh1"}{"content":"","createAt":1640592765,"id":"p469xmwh"}{"content":"","createAt":1640592780,"id":"1axzsaga"}{"content":"","createAt":1640592880,"id":"1p2bp4mo"}{"content":"","createAt":1640593090,"id":"wasmi4yr"}{"content":"abv","createAt":1640593105,"id":"v1c8k3dl"}{"content":"","createAt":1640593117,"id":"9bivzqyi"}{"content":"you show it","createAt":1640593324,"id":"lo4kkisi"}{"content":"","createAt":1640594626,"id":"53soz3qo"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640595855,"id":"ck4lp82s"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596027,"id":"f6325ngz"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596084,"id":"l8uqf5k5"}{"content":"if|else|while|do|for|return","createAt":1640596205,"id":"r2tc52nc"}{"content":"if|else|while|do|for|return","createAt":1640596214,"id":"cntqdhij"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596224,"id":"cl7fy4ce"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596249,"id":"26n74ixf"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596335,"id":"qhgk6o5e"}{"content":"","createAt":1640596387,"id":"27m99mic"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596393,"id":"l5au5dq9"}{"content":"{\n    let view = {\n        el: '#main-wrapper',\n        template: `\n        `,\n        render(data) {\n            $.el(this.el).innerHTML = $.evalTemplate(this.template, data)\n        }\n    }\n\n    let model = {\n        filter: {}\n    }\n\n    let controller = {\n        init(view, model) {\n            this.view = view\n            this.model = model\n            this.bindEvents()\n            this.bindEventHub()\n        },\n        bindEvents: function () {\n            $.bindEvent('.submit-btn', 'click', (e, from) =\u003e {\n                checkIsCode($.el('#data-input').value)\n                // 1. 执行提交\n                $.request('/api/v1/msg/save', {\n                    \"content\": $.el('#data-input').value,\n                    \"createAt\": \"\"\n                }).then(result =\u003e {\n                    $.log(result)\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n\n                    // TODO 3. 保存历史记录\n                    let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                    anywhereData.unshift(result)\n                    localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                })\n            })\n\n            $.bindEvent('.refresh-btn', 'click', (e, from) =\u003e {\n                $.toggle('.submit-btn')\n                $.toggle('.refresh-btn')\n                $.el('.share-left').classList.remove(\"success\")\n                $.el('.share-right').classList.remove(\"success\")\n                $.el('#data-input').value = \"\"\n                $.el('.share-info').innerHTML = \"\"\n            })\n\n            $.bindEvent('.share-btn', 'click', () =\u003e {\n                $.copy($.el('.share-info a').href)\n            })\n\n            $.bindEvent('.aside-option', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n            })\n\n            $.bindEvent('.nav-item__his', 'click', () =\u003e {\n                $.fade('#aside-wrapper')\n                this.loadHistory()\n            })\n\n            $.bindEvent(\".aside-item__delete\", 'click', (e, from) =\u003e {\n                let idx = from.parentNode.dataset.idx\n                let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n                anywhereData.splice(idx, 1)\n                localStorage.setItem(\"anywhere\", JSON.stringify(anywhereData))\n\n                this.loadHistory()\n            })\n\n        },\n        bindEventHub() {\n            window.eventHub.on(\"load-share\", (data) =\u003e {\n                let id = data.value\n                $.get(\"/api/v1/msg/load\", {id}).then((result) =\u003e {\n                    $.el('#data-input').value = result.content\n\n                    // 2. 切换状态\n                    $.toggle('.submit-btn')\n                    $.toggle('.refresh-btn')\n                    $.el('.share-left').classList.add(\"success\")\n                    $.el('.share-right').classList.add(\"success\")\n\n                    $.el('.share-info').innerHTML = `\u003ca target=\"_blank\" href=\"/share/${result.id}\" title=\"分享链接\"\u003e${location.protocol + \"//\" + location.host}/share/${result.id}\u003c/a\u003e`\n                })\n            })\n        },\n        loadHistory() {\n            let anywhereData = JSON.parse(localStorage.getItem(\"anywhere\") || \"[]\")\n            if (anywhereData.length) {\n                $.el('.aside-content').innerHTML = anywhereData.map((item, idx) =\u003e `\n                    \u003cdiv class=\"aside-item\"\u003e\n                        \u003cdiv class=\"aside-item__option\" data-idx=\"${idx}\" data-id=\"${item.id}\"\u003e\n                         \u003cdiv class=\"aside-item__time\"\u003e${$.dateFormat(\"YY.mm.dd HH:MM:SS\", new Date(item.createAt * 1000))}\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__save\"\u003e保存\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__delete\"\u003e删除\u003c/div\u003e\n                         \u003cdiv class=\"aside-item__share\"\u003e分享\u003c/div\u003e\n                       \u003c/div\u003e\n                       \u003cdiv class=\"aside-item__data\"\u003e${item.content}\u003c/div\u003e\n                    \u003c/div\u003e\n                    `).join(\"\")\n            } else {\n                $.el('.aside-content').innerHTML = \"\"\n            }\n        },\n        checkIsCode(inString) {\n            if (!inString) {\n                return false\n            }\n\n            let codeRegex = {\n                \"common\": \"(package|import|func|class|string|return)\",\n                \"markup\": \"\u003c[^\\\u003e]+\u003e\",\n                \"clike\": \"(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\",\n                \"js\": \"(await|break|class|const|let|var|undefined|document|query)\",\n                \"go\": \"(chan|const|continue|default|defer|range|struct|var|iota|nil)\",\n                \"sql\": \"(select|from|distinct|count|join|left|where|in|exist)\"\n\n            }\n\n            Object.keys(codeRegex).map(key =\u003e {\n                let reg = new RegExp(codeRegex[key], \"ig\")\n                $.log(reg.test(inString))\n            })\n\n\n        },\n\n        onload() {\n        },\n    }\n\n    controller.init(view, model)\n}\n","createAt":1640596424,"id":"epniwmtq"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640596453,"id":"ai5kbrd5"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640596480,"id":"99q9zhc1"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640596544,"id":"33ebnq7x"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597236,"id":"9altws3n"}{"content":"clikeCount","createAt":1640597421,"id":"rgfdjbp6"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597435,"id":"a2frnwcw"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597640,"id":"lpimbdlp"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597934,"id":"powruicx"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640597984,"id":"ykj4aegv"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640598019,"id":"gxjt29f4"}{"content":"   \u003cdiv class=\"data-option\"\u003e\n                    \u003cdiv class=\"data-option__code\"\u003eGo\u003c/div\u003e\n                    \u003cdiv class=\"data-option__copy\"\u003e复制\u003c/div\u003e\n                    \u003cdiv class=\"data-option__toggle\"\u003e源码\u003c/div\u003e\n                \u003c/div\u003e","createAt":1640598156,"id":"rmjzz85l"}{"content":"data-code","createAt":1640598188,"id":"jr1dkt2p"}{"content":"   \u003cdiv class=\"data-option\"\u003e\n                    \u003cdiv class=\"data-option__code\"\u003eGo\u003c/div\u003e\n                    \u003cdiv class=\"data-option__copy\"\u003e复制\u003c/div\u003e\n                    \u003cdiv class=\"data-option__toggle\"\u003e源码\u003c/div\u003e\n                \u003c/div\u003e","createAt":1640598195,"id":"3rdb8cbc"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640598227,"id":"pr4lbygd"}{"content":"package routes\n\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\n\n// NewRouter 返回一个 mux.Router 类型指针，从而可以当作处理器使用\nfunc NewRouter() *mux.Router {\n\n\t// 创建 mux.Router 路由器示例\n\trouter := mux.NewRouter().StrictSlash(true)\n\n\t// 应用请求日志中间件\n\trouter.Use(loggingRequestInfo)\n\n\t// 遍历 web.go 中定义的所有 webRoutes\n\tfor _, route := range webRoutes {\n\t\t// 将每个 web 路由应用到路由器\n\t\trouter.Methods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(route.HandlerFunc)\n\t}\n\n\trouter.\n\t\tPathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"./static/\"))))\n\n\treturn router\n}\n\n// 记录请求日志信息中间件\nfunc loggingRequestInfo(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// 打印请求 URL 明细\n\t\t//url, _ := json.Marshal(r.URL)\n\t\t//log.Println(string(url))\n\n\t\tfmt.Printf(\"Request URL: %s\\n\", r.URL)\n\t\tfmt.Printf(\"User Agent: %s\\n\", r.Header.Get(\"User-Agent\"))\n\t\tfmt.Printf(\"Request Header: %v\\n\", r.Header)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n","createAt":1640598270,"id":"9mn73759"}{"content":"abc","createAt":1640599060,"id":"1ai7nviw"}{"content":"abc","createAt":1640599112,"id":"vkgeybbz"}{"content":"     // 4. 代码高亮\n                    let codeType = this.checkCodeType($.el('#data-input').value)\n                    $.log(codeType)\n                    if (codeType) {\n                        $.el('.data-code').innerHTML = `\u003cpre class=\"language-${codeType}\"\u003e\u003ccode class=\"language-${codeType}\"\u003e${$.el('#data-input').value}\u003c/code\u003e\u003c/pre\u003e`\n                        Prism.highlightAll()\n                        $.toggle('.data-code')\n                    }","createAt":1640599618,"id":"m9umka88"}{"content":"package handlers\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"sync\"\n)\n\nvar mutex sync.Mutex\nvar fileIdxMap = make(map[string]string)\nvar LastFileIdx = []int64{0, -1}\n\nfunc WriteToFile(id string, data []byte) {\n\tmutex.Lock()\n\n\t// 1. 块文件\n\tfileIdx := LastFileIdx[0]\n\tcursor := LastFileIdx[1]\n\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\tif cursor == -1 {\n\t\t// 创建文件快\n\t\tcreateBlock(blockName)\n\t}\n\n\twriteFile(blockName, data)\n\n\t// 2. 索引文件\n\tcursorEnd := cursor + 1 + int64(len(data))\n\tupdateIdx(id, fileIdx, cursor+1, cursorEnd)\n\tLastFileIdx[0] = fileIdx\n\tLastFileIdx[1] = cursorEnd - 1\n\n\tmutex.Unlock()\n}\n\nfunc ReadFromFile(id string) []byte {\n\t// 1. 索引读取\n\tfileIdxString := fileIdxMap[id]\n\tfileMeta := strings.Split(fileIdxString, \":\")\n\tfileIdx, _ := strconv.ParseInt(fileMeta[0], 10, 32)\n\tstart, _ := strconv.ParseInt(fileMeta[1], 10, 32)\n\tend, _ := strconv.ParseInt(fileMeta[2], 10, 32)\n\n\t// 2. 读取文件\n\tblockName := \"block_\" + strconv.FormatInt(fileIdx, 10)\n\treturn readFile(blockName, start, end)\n}\n\nfunc InitFileIdx() {\n\tfile, err := os.Open(\"./block_idx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\n\tcontent, err := ioutil.ReadAll(file)\n\tidxLines := strings.Split(string(content), \"\\n\")\n\tfor i := range idxLines {\n\t\tline := idxLines[i]\n\t\tsplitIdx := strings.Index(line, \":\")\n\t\tif splitIdx != -1 {\n\t\t\tfileIdxMap[line[:splitIdx]] = line[splitIdx+1:]\n\t\t\tif i == len(idxLines)-2 {\n\t\t\t\tfileEndIdx, _ := strconv.ParseInt(line[strings.LastIndex(line, \":\")+1:], 10, 32)\n\t\t\t\tLastFileIdx[1] = fileEndIdx - 1\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nfunc createBlock(blockName string) {\n\tfile, err := os.Create(blockName)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer file.Close()\n}\n\nfunc writeFile(blockName string, data []byte) {\n\n\tfile, _ := os.OpenFile(blockName, os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\n\tvar buf bytes.Buffer\n\tbinary.Write(\u0026buf, binary.LittleEndian, data)\n\tfile.Write(buf.Bytes())\n}\n\nfunc readFile(blockName string, start int64, end int64) []byte {\n\tfile, err := os.OpenFile(blockName, os.O_APPEND, 0666)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tsize := end - start\n\tbuff := make([]byte, size)\n\n\tfile.Seek(start, io.SeekStart)\n\tfor {\n\t\tlens, err := file.Read(buff)\n\t\tif err == io.EOF || lens \u003c 0 || lens == int(size) {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tdefer file.Close()\n\treturn buff\n}\n\nfunc updateIdx(id string, fileIdx int64, start int64, end int64) {\n\tidx := strconv.FormatInt(fileIdx, 10) + \":\" + strconv.FormatInt(start, 10) + \":\" + strconv.FormatInt(end, 10)\n\t// 1. 写内存\n\tfileIdxMap[id] = idx\n\n\t// 2. 写文件\n\tf, err := os.OpenFile(\"./block_idx\", os.O_APPEND, 0666)\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\n\tidx = id + \":\" + idx\n\t_, err = f.Write([]byte(idx + \"\\n\"))\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t}\n\tf.Close()\n}\n","createAt":1640601249,"id":"q3tx46tn"}{"content":"package com.winning.bas.clinical.shiftchange.cis.inpatient.service;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.fastjson.TypeReference;\nimport com.winning.akso.biz.webmvc.context.BizContext;\nimport com.winning.amts.execution.charting.dto.ChartItemValueAmtsDTO;\nimport com.winning.amts.execution.charting.dto.input.ChartItemTrendAmtsQueryInputDTO;\nimport com.winning.amts.execution.charting.dto.output.ChartItemTrendAmtsOutputDTO;\nimport com.winning.amts.execution.charting.dto.output.ChartItemTrendAmtsQueryOutputDTO;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.common.*;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.dto.input.*;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.dto.output.*;\nimport com.winning.bas.clinical.shiftchange.cis.inpatient.service.facade.*;\nimport com.winning.base.akso.common.page.WinPagedList;\nimport com.winning.base.akso.timer.WinningTimer;\nimport com.winning.base.akso.utils.spring.BeanMapper;\nimport com.winning.bmts.encounter.inpatient.dtos.input.InpatientEncounterListInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.input.QueryEncounterTagInputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.EncounterTagOutputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.InpatientEncounterListOutputDTO;\nimport com.winning.bmts.encounter.inpatient.dtos.output.QueryEncounterTagOutputDTO;\nimport com.winning.business.emr.inpatient.dtos.input.InpatientEmrStructureDataHistoryQueryInputDTO;\nimport com.winning.business.emr.inpatient.dtos.output.InpatientEmrStructureDataOutputDTO;\nimport com.winning.business.mdm.foundation.sdk.ValueSdk;\nimport com.winning.clinical.diagnosis.inpatient.dto.input.PatientDiagnosisQueryInputDTO;\nimport com.winning.clinical.diagnosis.inpatient.dto.output.PatientEncounterDianosisOutputDTO;\nimport com.winning.clinical.inpatient.mdm.shiftchange.dto.*;\nimport com.winning.pts.exception.WinningRuntimeException;\nimport com.winning.pts.utils.collection.ListUtil;\nimport com.winning.pts.utils.time.DateUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\nimport static java.util.stream.Collectors.*;\n\n/**\n * @author CHENG\n */\n@Service\npublic class ShiftChangeRecordService {\n\n    @Autowired\n    private ShiftChangeRecordFacade shiftChangeRecordFacade;\n\n    @Autowired\n    private ShiftChangeRecordSettingFacade recordSettingFacade;\n\n    @Autowired\n    private InpatientEncounterFacade inpatientEncounterFacade;\n\n    @Autowired\n    private CliDiagnosisRpcFacade diagnosisRpcFacade;\n\n    @Autowired\n    private InpatientEmrRpcFacade inpatientEmrRpcFacade;\n\n    @Autowired\n    private SignInformationRpcFacade signInformationRpcFacade;\n\n    @Autowired\n    private OrgSdkUtil orgSdkUtil;\n\n    @Autowired\n    private EmployeeSdkUtil employeeSdkUtil;\n\n    @Autowired\n    private ValueSdk valueSdk;\n\n\n    /**\n     * 保存交接班记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordSaveOutputAO saveShiftChangeRecord(ShiftChangeRecordSaveInputAO inputAO) {\n        ShiftChangeRecordSaveOutputAO outputAO = shiftChangeRecordFacade.saveShiftChangeRecord(inputAO);\n        return outputAO;\n    }\n\n    /**\n     * 交接班签名\n     *\n     * @param inputAO\n     */\n    public void sign(ShiftChangeSignatureSaveInputAO inputAO) {\n        shiftChangeRecordFacade.sign(inputAO);\n    }\n\n    /**\n     * 获取交接班记录单数据\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordDataGetOutputAO getShiftChangeRecordData(ShiftChangeRecordIdInputAO inputAO) {\n\n        ShiftChangeRecordDataGetOutputAO shiftChangeRecordData = shiftChangeRecordFacade.getShiftChangeRecordData(inputAO);\n        String shiftChangeRecordContent = shiftChangeRecordData.getShiftChangeRecordContent();\n\n        HashMap\u003cString, String\u003e controlDefMap = JSONObject.parseObject(shiftChangeRecordContent, new TypeReference\u003cHashMap\u003cString, String\u003e\u003e() {\n        });\n        shiftChangeRecordData.setShiftChangeRecordContent(controlDefMap.get(ControlDefEnum.CONTROL_REQ_DATA.code));\n\n        return shiftChangeRecordData;\n    }\n\n    /**\n     * 多条件查询交接班记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public WinPagedList\u003cShiftChangeRecordQueryOutputAO\u003e queryByExample(ShiftChangeRecordQueryInputAO inputAO) {\n        Long[] soid = {BizContext.getCurrentHospitalSOID()};\n\n        // 1. 查询数据\n        WinPagedList\u003cShiftChangeRecordQueryOutputAO\u003e outputAO = shiftChangeRecordFacade.queryByExample(inputAO);\n\n        // 2. 拼接业务单元、人员名称\n        List\u003cShiftChangeRecordQueryOutputAO\u003e dataList = outputAO.getData();\n        if (ListUtil.isNotEmpty(dataList)) {\n            // 业务单元描述\n            orgSdkUtil.forOrgName(dataList, ShiftChangeRecordQueryOutputAO::getBuId, ShiftChangeRecordQueryOutputAO::setBuDesc, soid);\n\n            // 人员名称\n            employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordQueryOutputAO::getHandOverBy, ShiftChangeRecordQueryOutputAO::setHandOverByName, soid);\n            employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordQueryOutputAO::getTakeOverBy, ShiftChangeRecordQueryOutputAO::setTakeOverByName, soid);\n        }\n\n        return outputAO;\n    }\n\n    /**\n     * 删除交接班记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordDeleteOutputAO deleteRecord(ShiftChangeRecordIdInputAO inputAO) {\n        return shiftChangeRecordFacade.deleteRecord(inputAO);\n    }\n\n\n    public ShiftChangeRecordGetOutputAO getRecordByIdForUpdate(ShiftChangeRecordIdInputAO inputAO) {\n        Long shiftChangeRecordId = inputAO.getShiftChangeRecordId();\n\n        // 1. 查询旧数据\n        ShiftChangeRecordGetOutputAO recordGetOutputAO = shiftChangeRecordFacade.getRecordById(inputAO);\n\n        // 2. 查询第三方数据\n        ShiftChangeRecordGetOutputAO thirdPartyOutputAO = new ShiftChangeRecordGetOutputAO();\n        thirdPartyOutputAO.setDocContentList(new ArrayList\u003c\u003e());\n        thirdPartyOutputAO.setBuId(recordGetOutputAO.getBuId());\n        init3rdPartyRecordData(inputAO, shiftChangeRecordId, thirdPartyOutputAO);\n\n        // 3. 合并数据 （目前只合并患者数据）\n        List\u003cShiftChangeContentGetOutputAO\u003e docContentList = recordGetOutputAO.getDocContentList();\n        List\u003cShiftChangeContentGetOutputAO\u003e thirdPartyDocContentList = thirdPartyOutputAO.getDocContentList();\n        if (ListUtil.isEmpty(docContentList)) {\n            if (ListUtil.isNotEmpty(thirdPartyDocContentList)) {\n                recordGetOutputAO.setDocContentList(thirdPartyDocContentList);\n            }\n        } else {\n            if (ListUtil.isNotEmpty(thirdPartyDocContentList)) {\n                // 两边均存在数据，合并\n                Map\u003cString, ShiftChangeContentGetOutputAO\u003e thirdPartyTplNoToCtrlMap\n                        = thirdPartyDocContentList.stream().collect(toMap(ShiftChangePrefabCtrlDataGetOutputAO::getPrefabControlRecordNo, Function.identity()));\n\n                docContentList.forEach(ctrl -\u003e {\n                    String tplNo = ctrl.getPrefabControlRecordNo();\n                    ShiftChangeContentGetOutputAO thirdPartyCtrl = thirdPartyTplNoToCtrlMap.get(tplNo);\n                    // 相同组件合并\n                    if (thirdPartyCtrl != null) {\n                        List\u003cShiftChangeContentItemAO\u003e thirdPartyCtrlItemList = thirdPartyCtrl.getItemList();\n                        if (ListUtil.isNotEmpty(thirdPartyCtrlItemList)) {\n                            // 按用户encounterId合并\n                            List\u003cShiftChangeContentItemAO\u003e itemList = ctrl.getItemList() == null ? new ArrayList\u003c\u003e() : ctrl.getItemList();\n                            ctrl.setItemList(itemList);\n\n                            Map\u003cLong, ShiftChangeContentItemAO\u003e encIdToItemMap \n                                    = itemList.stream().collect(toMap(ShiftChangeContentItemAO::getEncounterId, Function.identity()));\n                            thirdPartyCtrlItemList.forEach(thirdPartyItem -\u003e {\n                                Long encounterId = thirdPartyItem.getEncounterId();\n                                ShiftChangeContentItemAO item = encIdToItemMap.get(encounterId);\n                                if (item == null) {\n                                    // 不存在直接添加\n                                    itemList.add(thirdPartyItem);\n                                } else {\n                                    // 存在合并第一列\n                                    List\u003cShiftChangeContentDetailItemAO\u003e detailList = item.getDetailList();\n                                    detailList.set(0, thirdPartyItem.getDetailList().get(0));\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        \n        return recordGetOutputAO;\n    }\n\n    /**\n     * 获取交班记录详情\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordGetOutputAO getRecordById(ShiftChangeRecordIdInputAO inputAO) {\n        Long[] soid = {BizContext.getCurrentHospitalSOID()};\n        Long shiftChangeRecordId = inputAO.getShiftChangeRecordId();\n\n        // 1. 获取记录详情\n        ShiftChangeRecordGetOutputAO recordGetOutputAO = shiftChangeRecordFacade.getRecordById(inputAO);\n\n        // 2. 拉取第三方数据用于展示\n        if (checkRecordIsEmpty(recordGetOutputAO)) {\n            init3rdPartyRecordData(inputAO, shiftChangeRecordId, recordGetOutputAO);\n        }\n\n        // 3. 拼接描述数据\n        fillFoundationValue(soid, recordGetOutputAO);\n\n        return recordGetOutputAO;\n    }\n\n    /**\n     * 主数据拼接\n     *\n     * @param soid\n     * @param recordGetOutputAO\n     */\n    private void fillFoundationValue(Long[] soid, ShiftChangeRecordGetOutputAO recordGetOutputAO) {\n        // 业务单元描述\n        List\u003cShiftChangeRecordGetOutputAO\u003e dataList = Collections.singletonList(recordGetOutputAO);\n        orgSdkUtil.forOrgName(dataList, ShiftChangeRecordGetOutputAO::getBuId, ShiftChangeRecordGetOutputAO::setBuDesc, soid);\n\n        // 人员名称\n        employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordGetOutputAO::getHandOverBy, ShiftChangeRecordGetOutputAO::setHandOverByName, soid);\n        employeeSdkUtil.forEmpName(dataList, ShiftChangeRecordGetOutputAO::getTakeOverBy, ShiftChangeRecordGetOutputAO::setTakeOverByName, soid);\n\n        // 术语描述\n        List\u003cShiftChangePatiStatsTagAO\u003e patiStatsTagList = recordGetOutputAO.getPatiStatsTagList();\n        if (ListUtil.isNotEmpty(patiStatsTagList)) {\n            List\u003cLong\u003e patientTypeCodeList = patiStatsTagList.stream().map(tag -\u003e {\n                        List\u003cShiftChangePatiStatsTagItemAO\u003e tagList = tag.getTagList();\n                        if (ListUtil.isNotEmpty(tagList)) {\n                            return tagList.stream().map(ShiftChangePatiStatsTagItemAO::getShiftChangePatientTypeCode).collect(toList());\n                        } else {\n                            return new ArrayList\u003cLong\u003e();\n                        }\n                    }).flatMap(List::stream)\n                    .collect(toList());\n\n            Map\u003cLong, String\u003e valueToDescMap = valueSdk.forValueDesc(soid, patientTypeCodeList);\n            patiStatsTagList.forEach(tag -\u003e {\n                List\u003cShiftChangePatiStatsTagItemAO\u003e tagList = tag.getTagList();\n                if (ListUtil.isNotEmpty(tagList)) {\n                    tagList.forEach(t -\u003e t.setShiftChangePatientTypeCodeDesc(valueToDescMap.get(t.getShiftChangePatientTypeCode())));\n                }\n            });\n        }\n    }\n\n    /**\n     * 初始化第三方数据\n     *\n     * @param inputAO\n     * @param shiftChangeRecordId\n     * @param recordGetOutputAO\n     */\n    private void init3rdPartyRecordData(ShiftChangeRecordIdInputAO inputAO, Long shiftChangeRecordId, ShiftChangeRecordGetOutputAO recordGetOutputAO) {\n        ShiftChangeRecordDataGetOutputAO recordData = shiftChangeRecordFacade.getShiftChangeRecordData(inputAO);\n        if (recordData == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"找不到对应交接班配置!\");\n        }\n        String shiftChangeRecordContent = recordData.getShiftChangeRecordContent();\n        HashMap\u003cString, String\u003e controlDefMap = JSONObject.parseObject(shiftChangeRecordContent, new TypeReference\u003cHashMap\u003cString, String\u003e\u003e() {\n        });\n\n        String defContentString = controlDefMap.get(ControlDefEnum.CONTROL_CONTENT.code);\n        if (defContentString != null) {\n            InpatientEncounterListInputDTO iptEncInputDto = new InpatientEncounterListInputDTO();\n            iptEncInputDto.setDeptId(recordGetOutputAO.getBuId());\n            iptEncInputDto.setInpatientStatus(FoundationConst.INPATIENT_STATUS_ADMISSION_AREA_CODE);\n            iptEncInputDto.setPageType(\"A\");\n            List\u003cInpatientEncounterListOutputDTO\u003e bmtsEncounterList = inpatientEncounterFacade.queryInpatientEncounterListBmts(iptEncInputDto);\n\n            List\u003cQueryEncounterTagOutputDTO\u003e tagOutputDTOList = new ArrayList\u003c\u003e();\n            if (ListUtil.isNotEmpty(bmtsEncounterList)) {\n                List\u003cLong\u003e encounterIds = bmtsEncounterList.stream().map(InpatientEncounterListOutputDTO::getEncounterId).collect(toList());\n\n                QueryEncounterTagInputDTO encounterTagInputDTO = new QueryEncounterTagInputDTO();\n                do {\n                    List\u003cLong\u003e currEncIds = encounterIds.subList(0, Math.min(encounterIds.size(), 100));\n                    encounterIds = encounterIds.size() \u003e 100 ? encounterIds.subList(100, encounterIds.size()) : Collections.emptyList();\n                    encounterTagInputDTO.setEncounterIds(currEncIds);\n                    tagOutputDTOList.addAll(inpatientEncounterFacade.queryEncounterTagsByExample(encounterTagInputDTO));\n                } while (ListUtil.isNotEmpty(encounterIds));\n            }\n\n            QueryShiftChangeContentControlOutputDTO docContent = JSONObject.parseObject(defContentString, QueryShiftChangeContentControlOutputDTO.class);\n            List\u003cShiftChangeContentControlOutputDTO\u003e contentControlList = docContent.getShiftChangeContentControlList();\n            if (ListUtil.isNotEmpty(contentControlList)) {\n                List\u003cShiftChangeContentGetOutputAO\u003e contentGetOutputAOList = buildDocContentCtrlInfo(shiftChangeRecordId, bmtsEncounterList, tagOutputDTOList, contentControlList, false);\n                recordGetOutputAO.setDocContentList(contentGetOutputAOList);\n            }\n        }\n\n\n        // 5.2 病区概况组件\n        String defBuOverViewString = controlDefMap.get(ControlDefEnum.CONTROL_BU_OVERVIEW.code);\n        if (defBuOverViewString != null) {\n            QueryShiftChangeBuOverviewControlOutputDTO buOverviewControlWrapper = JSONObject.parseObject(defBuOverViewString, QueryShiftChangeBuOverviewControlOutputDTO.class);\n            if (buOverviewControlWrapper != null) {\n                List\u003cShiftChangeBuOverviewControlOutputDTO\u003e buOverviewControlList = buOverviewControlWrapper.getShiftChangeBuOverviewControlList();\n                if (ListUtil.isNotEmpty(buOverviewControlList)) {\n                    List\u003cShiftChangePatientStatsGetOutputAO\u003e patientStatsGetOutputAOS = buOverviewControlList.stream().map(buOverviewCtrl -\u003e {\n                        ShiftChangePatientStatsGetOutputAO patientStats = BeanMapper.map(buOverviewCtrl, ShiftChangePatientStatsGetOutputAO.class);\n                        patientStats.setPrefabControlRecordNo(buOverviewCtrl.getPrefabControlReqTplNo());\n                        patientStats.setPrefabControlTypeCode(buOverviewCtrl.getPrefabControlTypeCode());\n                        patientStats.setPrefabControlNo(buOverviewCtrl.getPrefabControlNo());\n                        patientStats.setPrefabControlCaption(buOverviewCtrl.getPrefabControlCaption());\n\n                        List\u003cPrefabControlBuOverviewOutputDTO\u003e prefabControlBuOverviewList = buOverviewCtrl.getPrefabControlBuOverviewList();\n                        if (ListUtil.isNotEmpty(prefabControlBuOverviewList)) {\n                            List\u003cShiftChangePatientStatsItemAO\u003e statsItemAOS = prefabControlBuOverviewList.stream().map(buOverviewCtrlItem -\u003e {\n                                ShiftChangePatientStatsItemAO statsItemAO = new ShiftChangePatientStatsItemAO();\n                                statsItemAO.setSeqNo(buOverviewCtrlItem.getSeqNo());\n                                statsItemAO.setPatientStatsTypeCode(buOverviewCtrlItem.getPatientStatsTypeCode());\n                                statsItemAO.setStatsCustomizeColumnCaption(buOverviewCtrlItem.getColumnCaption());\n                                statsItemAO.setPatientStatsValue(0);\n                                return statsItemAO;\n                            }).collect(toList());\n                            patientStats.setItemList(statsItemAOS);\n                        }\n                        return patientStats;\n                    }).collect(toList());\n                    recordGetOutputAO.setPatientStatsList(patientStatsGetOutputAOS);\n                }\n            }\n        }\n    }\n\n    /**\n     * 构建医生交接班控件数据\n     *\n     * @param shiftChangeRecordId\n     * @param encounterList\n     * @param tagOutputDTOList\n     * @return\n     */\n    private List\u003cShiftChangeContentGetOutputAO\u003e buildDocContentCtrlInfo(Long shiftChangeRecordId, List\u003cInpatientEncounterListOutputDTO\u003e encounterList, List\u003cQueryEncounterTagOutputDTO\u003e tagOutputDTOList, List\u003cShiftChangeContentControlOutputDTO\u003e contentControlList, boolean manualAdd) {\n        if (ListUtil.isNotEmpty(encounterList)) {\n            List\u003cLong\u003e encounterIds\n                    = encounterList.stream().map(InpatientEncounterListOutputDTO::getEncounterId).collect(toList());\n            Map\u003cLong, InpatientEncounterListOutputDTO\u003e encIdToPatiInfoMap = encounterList.stream().collect(toMap(x -\u003e x.getEncounterId(), y -\u003e y));\n\n            // 查询患者诊断信息\n            List\u003cShiftChangeDataEnum\u003e diagnosisEnumList = ShiftChangeDataEnum.valuesOfDiagnosis();\n            List\u003cLong\u003e diagnosisTypeCodeList = diagnosisEnumList.stream().map(ShiftChangeDataEnum::getFoundationValue).collect(toList());\n            PatientDiagnosisQueryInputDTO diagnosisQueryInputDTO = new PatientDiagnosisQueryInputDTO();\n            diagnosisQueryInputDTO.setEncounterIdList(encounterIds);\n            diagnosisQueryInputDTO.setDiagnosisTypeCodeList(diagnosisTypeCodeList);\n            List\u003cPatientEncounterDianosisOutputDTO\u003e diagnosisOutputDTOS = diagnosisRpcFacade.queryDiagnosisByExample(diagnosisQueryInputDTO);\n            diagnosisOutputDTOS = diagnosisOutputDTOS == null ? Collections.emptyList() : diagnosisOutputDTOS;\n            Map\u003cLong, List\u003cPatientEncounterDianosisOutputDTO\u003e\u003e encIdToDiagnosisListMap\n                    = diagnosisOutputDTOS.stream().collect(Collectors.groupingBy(PatientEncounterDianosisOutputDTO::getEncounterId));\n\n\n            // 患者标签\n            Map\u003cLong, HashSet\u003cLong\u003e\u003e patiTypeCodeToEncIds = classifyTags(tagOutputDTOList);\n            Map\u003cLong, List\u003cEncounterTagOutputDTO\u003e\u003e rawEncIdToTagsMap = tagOutputDTOList.stream()\n                    .filter(x -\u003e ListUtil.isNotEmpty(x.getTags()))\n                    .collect(toMap(x -\u003e x.getEncounterId(), y -\u003e y.getTags()));\n\n            // 按规则抽取数据\n            List\u003cShiftChangeDataEnum\u003e dataEnumList = Arrays.asList(ShiftChangeDataEnum.values());\n            Map\u003cLong, Map\u003cShiftChangeDataEnum, String\u003e\u003e dataInfo = new HashMap\u003c\u003e();\n\n            encounterList.forEach(encInfo -\u003e {\n                Long encounterId = encInfo.getEncounterId();\n                Map\u003cShiftChangeDataEnum, String\u003e dataDetails = new EnumMap\u003c\u003e(ShiftChangeDataEnum.class);\n                dataInfo.put(encounterId, dataDetails);\n\n                // 患者基本信息组装 \n                buildBaseInfoData(dataEnumList, encInfo, rawEncIdToTagsMap.get(encounterId), dataDetails);\n\n                // 患者诊断信息组装\n                List\u003cPatientEncounterDianosisOutputDTO\u003e diagnosisList = encIdToDiagnosisListMap.get(encounterId);\n                buildDiagnosisData(dataDetails, diagnosisList);\n\n                // 护理域、记录域数据\n                buildRecordData(encounterId, dataDetails);\n\n            });\n\n            // 5. 按组件实际需求组装各个组件数据结构\n\n            // 5.1 医生交接班组件\n            return contentControlList.stream()\n                    .map(ctrl -\u003e buildDocContentCtrlData(shiftChangeRecordId, encIdToPatiInfoMap, patiTypeCodeToEncIds, dataInfo, ctrl, manualAdd))\n                    .filter(Objects::nonNull)\n                    .collect(toList());\n        }\n        return Collections.emptyList();\n    }\n\n    /**\n     * 查询诊断数据\n     *\n     * @param dataDetails\n     * @param diagnosisList\n     */\n    private void buildDiagnosisData(Map\u003cShiftChangeDataEnum, String\u003e dataDetails, List\u003cPatientEncounterDianosisOutputDTO\u003e diagnosisList) {\n        if (ListUtil.isNotEmpty(diagnosisList)) {\n            // 诊断分组\n            Map\u003cLong, List\u003cPatientEncounterDianosisOutputDTO\u003e\u003e typeGroup\n                    = diagnosisList.stream().collect(groupingBy(PatientEncounterDianosisOutputDTO::getDiagnosisTypeCode));\n            typeGroup.forEach((diagnosisTypeCode, diagnosisOfType) -\u003e {\n                ShiftChangeDataEnum dataEnum = ShiftChangeDataEnum.valueOfFoundationValue(diagnosisTypeCode);\n                dataDetails.put(dataEnum,\n                        diagnosisOfType.stream()\n                                .map(PatientEncounterDianosisOutputDTO::getDiagnosisFullDesc)\n                                .collect(Collectors.joining(\", \"))\n                );\n            });\n        }\n    }\n\n    /**\n     * 查询患者基本信息\n     *\n     * @param dataEnumList\n     * @param encInfo\n     * @param tags\n     * @param dataDetails\n     */\n    private void buildBaseInfoData(List\u003cShiftChangeDataEnum\u003e dataEnumList, InpatientEncounterListOutputDTO encInfo, List\u003cEncounterTagOutputDTO\u003e tags, Map\u003cShiftChangeDataEnum, String\u003e dataDetails) {\n        dataEnumList.forEach(dataEnum -\u003e {\n            if (dataEnum.equals(ShiftChangeDataEnum.BED_NO)) {\n                dataDetails.put(dataEnum, encInfo.getBedNo());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.FULL_NAME)) {\n                dataDetails.put(dataEnum, encInfo.getFullName());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.GENDER_NAME)) {\n                dataDetails.put(dataEnum, encInfo.getGenderName());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.IMRN)) {\n                dataDetails.put(dataEnum, encInfo.getImrn());\n            } else if (dataEnum.equals(ShiftChangeDataEnum.TAGS)) {\n                if (ListUtil.isNotEmpty(tags)) {\n                    String tagsString = tags.stream().map(EncounterTagOutputDTO::getTagName).collect(Collectors.joining(\", \"));\n                    dataDetails.put(dataEnum, tagsString);\n                }\n            }\n        });\n    }\n\n    /**\n     * 查询第三方数据：护理、记录域\n     *\n     * @param encounterId\n     * @param dataDetails\n     */\n    private void buildRecordData(Long encounterId, Map\u003cShiftChangeDataEnum, String\u003e dataDetails) {\n        // 最新体征数据组装 - 护理域\n        List\u003cEncSignInfoEnum\u003e encSignInfoEnums = EncSignInfoEnum.valueOfNeed();\n        Map\u003cLong, EncSignInfoEnum\u003e conceptIdToSignInfoMap = encSignInfoEnums.stream().collect(toMap(EncSignInfoEnum::getCode, Function.identity()));\n\n        ChartItemTrendAmtsQueryInputDTO signInfoInputDto = new ChartItemTrendAmtsQueryInputDTO();\n        signInfoInputDto.setEncounterId(encounterId);\n        Date current = new Date(WinningTimer.getTime());\n        Date beginOfCurrent = DateUtil.beginOfDate(current);\n        signInfoInputDto.setStartAt(beginOfCurrent);\n        signInfoInputDto.setEndAt(current);\n        signInfoInputDto.setConceptIds(new ArrayList\u003c\u003e(conceptIdToSignInfoMap.keySet()));\n\n        ChartItemTrendAmtsQueryOutputDTO signInfo = signInformationRpcFacade.queryChartItemTrendByExample(signInfoInputDto);\n\n        if (signInfo != null \u0026\u0026 ListUtil.isNotEmpty(signInfo.getChartItems())) {\n            List\u003cChartItemTrendAmtsOutputDTO\u003e chartItems = signInfo.getChartItems();\n            // 获取最新时间\n            Date latestDate = chartItems.stream()\n                    .filter(x -\u003e ListUtil.isNotEmpty(x.getChartItemValues()))\n                    .map(x -\u003e x.getChartItemValues()\n                            .stream()\n                            .max(Comparator.comparing(ChartItemValueAmtsDTO::getChartMainAt))\n                            .orElse(null))\n                    .filter(Objects::nonNull)\n                    .max(Comparator.comparing(ChartItemValueAmtsDTO::getChartMainAt))\n                    .map(ChartItemValueAmtsDTO::getChartMainAt)\n                    .orElse(null);\n\n            if (latestDate != null) {\n                // 获取最新体征数据\n                List\u003cChartItemValueAmtsDTO\u003e chartItemValueList = chartItems.stream()\n                        .filter(x -\u003e ListUtil.isNotEmpty(x.getChartItemValues()))\n                        .map(x -\u003e x.getChartItemValues()\n                                .stream()\n                                .filter(y -\u003e latestDate.equals(y.getChartMainAt()))\n                                .findFirst()\n                                .orElse(null))\n                        .filter(Objects::nonNull)\n                        .collect(toList());\n\n                if (ListUtil.isNotEmpty(chartItemValueList)) {\n                    String signInfoStr = chartItemValueList.stream().map(x -\u003e {\n                        String val = String.valueOf(x.getChartItemValueContent());\n                        Long conceptId = x.getConceptId();\n                        EncSignInfoEnum signInfoEnum = conceptIdToSignInfoMap.get(conceptId);\n                        return signInfoEnum.getMsg() + \": \" + val + signInfoEnum.getUnit();\n                    }).collect(joining(\", \"));\n\n                    dataDetails.put(ShiftChangeDataEnum.LATEST_PHY_SIGN, signInfoStr);\n                }\n            }\n        }\n\n\n        // 主诉、现病史数据组装 - 记录域\n        //主诉\n        getInpatientEmrData(encounterId, \"WIN3.347724.10717\")\n                .ifPresent(x -\u003e dataDetails.put(ShiftChangeDataEnum.CHIEF_COMPLAINT, x));\n\n        //现病史\n        getInpatientEmrData(encounterId, \"WIN3.347724.10643\")\n                .ifPresent(x -\u003e dataDetails.put(ShiftChangeDataEnum.CHIEF_COMPLAINT, x));\n    }\n\n    /**\n     * 构建医生交接班数据\n     *\n     * @param shiftChangeRecordId\n     * @param encIdToPatiInfoMap\n     * @param patiTypeCodeToEncIds\n     * @param dataInfo\n     * @param ctrl\n     * @param manualAdd\n     */\n    private ShiftChangeContentGetOutputAO buildDocContentCtrlData(Long shiftChangeRecordId, Map\u003cLong, InpatientEncounterListOutputDTO\u003e encIdToPatiInfoMap, Map\u003cLong, HashSet\u003cLong\u003e\u003e patiTypeCodeToEncIds, Map\u003cLong, Map\u003cShiftChangeDataEnum, String\u003e\u003e dataInfo, ShiftChangeContentControlOutputDTO ctrl, boolean manualAdd) {\n        Long prefabControlTypeCode = ctrl.getPrefabControlTypeCode();\n        if (FoundationConst.PREFAB_CONTROL_TYPE_COMMON_PATIENT.equals(prefabControlTypeCode)) {\n            ShiftChangeContentGetOutputAO content = new ShiftChangeContentGetOutputAO();\n\n            List\u003cShiftChangeContentItemAO\u003e thisCtrlItemList = new ArrayList\u003c\u003e();\n            content.setItemList(thisCtrlItemList);\n            content.setPrefabControlRecordNo(ctrl.getPrefabControlReqTplNo());\n            content.setPrefabControlTypeCode(ctrl.getPrefabControlTypeCode());\n            content.setPrefabControlNo(ctrl.getPrefabControlNo());\n            content.setPrefabControlCaption(ctrl.getPrefabControlCaption());\n\n            // 医生交接班组件\n            List\u003cPrefabControlPatiTypeOutputDTO\u003e patiTypeList = ctrl.getPatiTypeList();\n            // 患者类型\n            List\u003cLong\u003e patiTypeCodeList\n                    = patiTypeList.stream().map(PrefabControlPatiTypeOutputDTO::getShiftChangePatientTypeCode).collect(toList());\n\n            // 列定义\n            List\u003cPrefabCtrlShiftChgContOutputDTO\u003e dataList = ctrl.getDataList();\n            List\u003cList\u003cDisplayFormatUtil.Seg\u003e\u003e formatList = dataList.stream().map(x -\u003e DisplayFormatUtil.buildFormat(x.getColumnDisplayFormat())).collect(toList());\n\n            // 数据组合\n            patiTypeCodeToEncIds.forEach((patiType, encIds) -\u003e {\n                if (manualAdd || patiTypeCodeList.contains(patiType)) {\n                    if (encIds != null \u0026\u0026 !encIds.isEmpty()) {\n                        List\u003cShiftChangeContentItemAO\u003e itemList = encIds.stream().map(encId -\u003e {\n                            Map\u003cShiftChangeDataEnum, String\u003e metaMap = dataInfo.get(encId);\n\n                            ShiftChangeContentItemAO contentItem = new ShiftChangeContentItemAO();\n                            contentItem.setShiftChangeRecordId(shiftChangeRecordId);\n                            contentItem.setEncounterId(encId);\n                            contentItem.setImrn(metaMap.get(ShiftChangeDataEnum.IMRN));\n                            contentItem.setFullName(metaMap.get(ShiftChangeDataEnum.FULL_NAME));\n                            contentItem.setGenderCode(encIdToPatiInfoMap.get(encId).getGenderCode());\n                            contentItem.setAgeCond(encIdToPatiInfoMap.get(encId).getAge());\n                            contentItem.setBedNo(metaMap.get(ShiftChangeDataEnum.BED_NO));\n\n                            // 列定义\n                            AtomicInteger idx = new AtomicInteger(0);\n                            List\u003cShiftChangeContentDetailItemAO\u003e detailItemAOList = dataList.stream().map(col -\u003e {\n                                ShiftChangeContentDetailItemAO detailItem = new ShiftChangeContentDetailItemAO();\n                                detailItem.setColumnCaption(col.getColumnCaption());\n                                detailItem.setColumnWidth(col.getColumnWidth());\n                                detailItem.setColumnContent(DisplayFormatUtil.displayFromFormat(metaMap, formatList.get(idx.getAndIncrement())));\n\n                                return detailItem;\n                            }).collect(toList());\n                            contentItem.setDetailList(detailItemAOList);\n\n                            return contentItem;\n                        }).collect(toList());\n                        thisCtrlItemList.addAll(itemList);\n                    }\n                }\n            });\n            return content;\n        }\n        return null;\n    }\n\n    /**\n     * 获取 记录域 数据\n     *\n     * @param encounterId        就诊标识\n     * @param inpEmrSectionWinId 病历段落编码\n     * @return\n     */\n    private Optional\u003cString\u003e getInpatientEmrData(Long encounterId, String inpEmrSectionWinId) {\n        InpatientEmrStructureDataHistoryQueryInputDTO queryInputDTO = new InpatientEmrStructureDataHistoryQueryInputDTO();\n        queryInputDTO.setEncounterId(encounterId);\n\n        queryInputDTO.setInpEmrSectionWinId(inpEmrSectionWinId);\n        InpatientEmrStructureDataOutputDTO presentHistory = inpatientEmrRpcFacade.queryInpatientEmrSetStructureDataHistory(queryInputDTO);\n        if (presentHistory != null \u0026\u0026 ListUtil.isNotEmpty(presentHistory.getEmrSectionInfo())) {\n            return Optional.ofNullable(presentHistory.getEmrSectionInfo().get(0).getInpatEmrSectionPlainTxt());\n        }\n        return Optional.empty();\n    }\n\n    /**\n     * 按标签和权重对就诊ID归类\n     *\n     * @param encounterTagOutputDTOS\n     * @return\n     */\n    private Map\u003cLong, HashSet\u003cLong\u003e\u003e classifyTags(List\u003cQueryEncounterTagOutputDTO\u003e encounterTagOutputDTOS) {\n        // tag - set\u003cencounterId\u003e\n        Map\u003cLong, HashSet\u003cLong\u003e\u003e tagToEncIds = new HashMap\u003c\u003e(16);\n        encounterTagOutputDTOS.forEach(encTag -\u003e {\n            List\u003cEncounterTagOutputDTO\u003e tags = encTag.getTags();\n            if (ListUtil.isEmpty(tags)) {\n                EncCliTagEnum tagEnum = EncCliTagEnum.NORMAL;\n                HashSet\u003cLong\u003e encIds = tagToEncIds.computeIfAbsent(tagEnum.getTagCode(), k -\u003e new HashSet\u003c\u003e());\n                encIds.add(encTag.getEncounterId());\n            } else {\n                tags.forEach(tag -\u003e {\n                    EncCliTagEnum tagEnum\n                            = EncCliTagEnum.valueOfTagCode(tag.getTagId());\n                    HashSet\u003cLong\u003e encIds = tagToEncIds.computeIfAbsent(tagEnum.getTagCode(), k -\u003e new HashSet\u003c\u003e());\n                    encIds.add(encTag.getEncounterId());\n                });\n            }\n        });\n\n\n        // 按权重调整\n        List\u003cEncCliTagEnum\u003e sortedTagEnums\n                = Arrays.stream(EncCliTagEnum.values())\n                .sorted(Comparator.comparingInt(EncCliTagEnum::getWeight))\n                .collect(toList());\n\n        Set\u003cLong\u003e usedEncIds = new HashSet\u003c\u003e();\n        Map\u003cLong, HashSet\u003cLong\u003e\u003e codeToEncIds = new HashMap\u003c\u003e(16);\n        sortedTagEnums.forEach(tagEnum -\u003e {\n            HashSet\u003cLong\u003e encIds = tagToEncIds.get(tagEnum.getTagCode());\n            if (encIds != null) {\n                encIds.removeIf(usedEncIds::contains);\n                usedEncIds.addAll(encIds);\n                codeToEncIds.put(tagEnum.getCode(), encIds);\n            }\n        });\n        return codeToEncIds;\n    }\n\n    private boolean checkRecordIsEmpty(ShiftChangeRecordGetOutputAO recordGetOutputAO) {\n        List\u003cShiftChangeBuSummaryGetOutputAO\u003e buSummaryList = recordGetOutputAO.getBuSummaryList();\n        List\u003cShiftChangeContentGetOutputAO\u003e docContentList = recordGetOutputAO.getDocContentList();\n        List\u003cShiftChangePatientStatsGetOutputAO\u003e patientStatsList = recordGetOutputAO.getPatientStatsList();\n        return ListUtil.isEmpty(buSummaryList)\n                \u0026\u0026 ListUtil.isEmpty(docContentList)\n                \u0026\u0026 ListUtil.isEmpty(patientStatsList);\n    }\n\n\n    /**\n     * 新建交班单\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordSaveOutputAO initShiftChangeRecord(ShiftChangeRecordInitInputAO inputAO) {\n        // 1. 通过shiftChangeSettingId获取交班单结构数据JSON\n        ShiftChangeRecordSettingAO recordSettingAO = recordSettingFacade.getRecordSettingById(inputAO.getShiftChangeRecordSettingId());\n        if (recordSettingAO == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"找不到对应交接班配置!\");\n        }\n        Long tplCliOrderReqId = recordSettingAO.getTplCliOrderReqId();\n        if (tplCliOrderReqId == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"请先配置交接班配置组件详情!\");\n        }\n        String tplClinicalOrderReqData = recordSettingFacade.getTplClinicalOrderReqDataById(tplCliOrderReqId);\n        if (tplClinicalOrderReqData == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"请先配置交接班配置组件详情!\");\n        }\n\n        // 2. 重复性验证\n        ShiftChangeRecordQueryInputAO queryInputAO = new ShiftChangeRecordQueryInputAO();\n        queryInputAO.setShiftChangeCode(inputAO.getShiftChangeCode());\n        queryInputAO.setBuId(inputAO.getBuId());\n        queryInputAO.setShiftChangeDateStart(inputAO.getShiftChangeDate());\n        queryInputAO.setShiftChangeDateEnd(inputAO.getShiftChangeDate());\n        WinPagedList\u003cShiftChangeRecordQueryOutputAO\u003e existResponse = shiftChangeRecordFacade.queryByExample(queryInputAO);\n        if (ListUtil.isNotEmpty(existResponse.getData())) {\n            throw new WinningRuntimeException(ErrorConstantEnum.REPEAT_DATE.getCode(), \"当前班次存在交班记录，不能重复添加\");\n        }\n\n        // 构建模板数据\n        ShiftChangeRecordDataInputAO dataInputAO = new ShiftChangeRecordDataInputAO();\n\n        QueryShiftChangeBuOverviewControlOutputDTO buOverviewControl = recordSettingFacade.getBuOverviewControlByReqId(tplCliOrderReqId);\n        QueryShiftChangeContentControlOutputDTO contentControl = recordSettingFacade.getContentControlByReqId(tplCliOrderReqId);\n\n        Map\u003cString, String\u003e controlDefMap = new HashMap\u003c\u003e();\n        controlDefMap.put(ControlDefEnum.CONTROL_CONTENT.code, JSONObject.toJSONString(contentControl));\n        controlDefMap.put(ControlDefEnum.CONTROL_BU_OVERVIEW.code, JSONObject.toJSONString(buOverviewControl));\n        controlDefMap.put(ControlDefEnum.CONTROL_REQ_DATA.code, tplClinicalOrderReqData);\n\n        dataInputAO.setShiftChangeRecordContent(JSONObject.toJSONString(controlDefMap));\n        inputAO.setShiftChangeRecordData(dataInputAO);\n\n        // 2. 保存交班单\n        return shiftChangeRecordFacade.initShiftChangeRecord(inputAO);\n    }\n\n    /**\n     * 撤销已提交记录\n     *\n     * @param inputAO\n     * @return\n     */\n    public ShiftChangeRecordSaveOutputAO revokeRecord(ShiftChangeRecordIdInputAO inputAO) {\n        return shiftChangeRecordFacade.revokeRecord(inputAO);\n    }\n\n    /**\n     * 查询病区患者\n     *\n     * @param inputAO\n     * @return\n     */\n    public List\u003cInpatientEncounterQueryOutputAO\u003e queryInpatientEncounterByExample(InpatientEncounterQueryInputAO inputAO) {\n        InpatientEncounterListInputDTO iptEncounterInputDto = new InpatientEncounterListInputDTO();\n        iptEncounterInputDto.setDeptId(inputAO.getDeptId());\n        iptEncounterInputDto.setInpatientStatus(FoundationConst.INPATIENT_STATUS_ADMISSION_AREA_CODE);\n        iptEncounterInputDto.setPageType(\"A\");\n        List\u003cInpatientEncounterListOutputDTO\u003e encounterList = inpatientEncounterFacade.queryInpatientEncounterListBmts(iptEncounterInputDto);\n        if (ListUtil.isNotEmpty(encounterList)) {\n            return BeanMapper.mapList(encounterList, InpatientEncounterListOutputDTO.class, InpatientEncounterQueryOutputAO.class);\n        } else {\n            return Collections.emptyList();\n        }\n    }\n\n    /**\n     * 单个患者交班信息查询\n     *\n     * @param inputAO\n     * @return\n     */\n    public List\u003cShiftChangeContentItemAO\u003e singlePatientContentInit(SinglePatientContentInitInputAO inputAO) {\n        Long shiftChangeRecordId = inputAO.getShiftChangeRecordId();\n\n        ShiftChangeRecordIdInputAO recordIdInputAO = new ShiftChangeRecordIdInputAO();\n        recordIdInputAO.setShiftChangeRecordId(inputAO.getShiftChangeRecordId());\n        ShiftChangeRecordDataGetOutputAO recordData = shiftChangeRecordFacade.getShiftChangeRecordData(recordIdInputAO);\n        if (recordData == null) {\n            throw new WinningRuntimeException(ErrorConstantEnum.NOT_FOUND_DATA.getCode(), \"找不到对应交接班配置!\");\n        }\n        String shiftChangeRecordContent = recordData.getShiftChangeRecordContent();\n        HashMap\u003cString, String\u003e controlDefMap = JSONObject.parseObject(shiftChangeRecordContent, new TypeReference\u003cHashMap\u003cString, String\u003e\u003e() {\n        });\n\n        String defContentString = controlDefMap.get(ControlDefEnum.CONTROL_CONTENT.code);\n        if (defContentString != null) {\n            // TODO 替换amts接口\n            InpatientEncounterListInputDTO iptEncInputDto = new InpatientEncounterListInputDTO();\n            iptEncInputDto.setInpatientStatus(FoundationConst.INPATIENT_STATUS_ADMISSION_AREA_CODE);\n            iptEncInputDto.setEncounterIds(inputAO.getEncounterIdList());\n            iptEncInputDto.setPageType(\"A\");\n            List\u003cInpatientEncounterListOutputDTO\u003e bmtsEncounterList = inpatientEncounterFacade.queryInpatientEncounterListBmts(iptEncInputDto);\n\n            List\u003cQueryEncounterTagOutputDTO\u003e tagOutputDTOList = new ArrayList\u003c\u003e();\n            if (ListUtil.isNotEmpty(bmtsEncounterList)) {\n                List\u003cLong\u003e encounterIds = bmtsEncounterList.stream().map(InpatientEncounterListOutputDTO::getEncounterId).collect(toList());\n\n                QueryEncounterTagInputDTO encounterTagInputDTO = new QueryEncounterTagInputDTO();\n                do {\n                    List\u003cLong\u003e currEncIds = encounterIds.subList(0, Math.min(encounterIds.size(), 100));\n                    encounterIds = encounterIds.size() \u003e 100 ? encounterIds.subList(100, encounterIds.size()) : Collections.emptyList();\n                    encounterTagInputDTO.setEncounterIds(currEncIds);\n                    tagOutputDTOList.addAll(inpatientEncounterFacade.queryEncounterTagsByExample(encounterTagInputDTO));\n                } while (ListUtil.isNotEmpty(encounterIds));\n            }\n\n            QueryShiftChangeContentControlOutputDTO docContent = JSONObject.parseObject(defContentString, QueryShiftChangeContentControlOutputDTO.class);\n            List\u003cShiftChangeContentControlOutputDTO\u003e contentControlList = docContent.getShiftChangeContentControlList();\n            if (ListUtil.isNotEmpty(contentControlList)) {\n\n                contentControlList = contentControlList.stream().filter(x -\u003e x.getShiftChangePrefabControlId().equals(inputAO.getShiftChangePrefabControlId())).collect(toList());\n                if (ListUtil.isNotEmpty(contentControlList)) {\n                    List\u003cShiftChangeContentGetOutputAO\u003e contentGetOutputAOList = buildDocContentCtrlInfo(shiftChangeRecordId, bmtsEncounterList, tagOutputDTOList, contentControlList, true);\n                    if (ListUtil.isNotEmpty(contentGetOutputAOList)) {\n                        return contentGetOutputAOList.get(0).getItemList();\n                    }\n                }\n            }\n        }\n        return Collections.emptyList();\n    }\n\n    public enum ControlDefEnum {\n        CONTROL_BU_OVERVIEW(\"buOverView\", QueryShiftChangeBuOverviewControlOutputDTO.class),\n        CONTROL_CONTENT(\"docContent\", QueryShiftChangeContentControlOutputDTO.class),\n        CONTROL_REQ_DATA(\"reqData\", String.class),\n        ;\n\n        ControlDefEnum(String code, Class clazz) {\n            this.code = code;\n            this.clazz = clazz;\n        }\n\n        /**\n         * 编码\n         */\n        private String code;\n        /**\n         * 类\n         */\n        private Class clazz;\n    }\n}\n","createAt":1640676477,"id":"bnubjm83"}{"content":"http://localhost:8080/share/bnubjm83","createAt":1640676663,"id":"2p6t9wsq"}{"content":"/* PrismJS 1.21.0\nhttps://prismjs.com/download.html#themes=prism\u0026languages=markup+css+clike+javascript+markdown */\n/**\n * prism.js default theme for JavaScript, CSS and HTML\n * Based on dabblet (http://dabblet.com)\n * @author Lea Verou\n */\n\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: black;\n\tbackground: none;\n\ttext-shadow: 0 1px white;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 16px;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\npre[class*=\"language-\"]::-moz-selection, pre[class*=\"language-\"] ::-moz-selection,\ncode[class*=\"language-\"]::-moz-selection, code[class*=\"language-\"] ::-moz-selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\npre[class*=\"language-\"]::selection, pre[class*=\"language-\"] ::selection,\ncode[class*=\"language-\"]::selection, code[class*=\"language-\"] ::selection {\n\ttext-shadow: none;\n\tbackground: #b3d4fc;\n}\n\n@media print {\n\tcode[class*=\"language-\"],\n\tpre[class*=\"language-\"] {\n\t\ttext-shadow: none;\n\t}\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tpadding: 1em;\n\t/* margin: .5em 0; */\n\toverflow: auto;\n}\n\n:not(pre) \u003e code[class*=\"language-\"],\npre[class*=\"language-\"] {\n\t/* background: #f5f2f0; */\n\t/* border-left: 2px solid #c7254e; */\n}\n\n/* Inline code */\n:not(pre) \u003e code[class*=\"language-\"] {\n\tpadding: .1em;\n\tborder-radius: .3em;\n\twhite-space: normal;\n}\n\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: slategray;\n}\n\n.token.punctuation {\n\tcolor: #999;\n}\n\n.token.namespace {\n\topacity: .7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: #905;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n\tcolor: #690;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n\tcolor: #9a6e3a;\n\t/* This background color was intended by the author of this theme. */\n\tbackground: hsla(0, 0%, 100%, .5);\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n\tcolor: #07a;\n}\n\n.token.function,\n.token.class-name {\n\tcolor: #DD4A68;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n\tcolor: #333;\n}\n\n.token.important,\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n","createAt":1640684719,"id":"zsgca2gx"}{"content":"time","createAt":1640684996,"id":"grxk8rkj"}{"content":"","createAt":1640740669,"id":"c5a3d1i4"}{"content":"show","createAt":1640744936,"id":"ns342qgh"}{"content":"","createAt":1640745386,"id":"b28c4sw2"}{"content":"","createAt":1640746241,"id":"kqxoo2f3"}{"content":"试试","createAt":1666081040,"id":"eqgcxton"}{"content":"","createAt":1666081141,"id":"ihzcoo1a"}{"content":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"/static/css/main.css\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"/static/css/prism.css\"\u003e\n    \u003ctitle\u003eanywhere\u003c/title\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n\u003cscript\u003e\n    if (!location.hostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)\n        \u0026\u0026 location.hostname !== 'localhost'\n    ) {\n        if (location.protocol === 'http:') {\n            // https 跳转\n            location.href = 'https:' + location.href.substring(window.location.protocol.length)\n        }\n    }\n\u003c/script\u003e\n\n\u003cmain id=\"main\"\u003e\n    \u003cdiv id=\"main-wrapper\"\u003e\n        \u003cdiv id=\"data-wrapper\"\u003e\n            \u003cdiv id=\"data-content\"\u003e\n                \u003ctextarea id=\"data-input\" spellcheck=\"false\"\u003e\u003c/textarea\u003e\n                \u003cdiv class=\"data-code\" style=\"display: none\"\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"data-option\"\u003e\n                    \u003cdiv class=\"data-option__copy\"\u003e复制\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv id=\"data-share\"\u003e\n                \u003cdiv class=\"share-left\"\u003e\n                    \u003cdiv class=\"submit-btn\"\u003e提交\u003c/div\u003e\n                    \u003cdiv class=\"refresh-btn hide\"\u003e刷新\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"share-right\"\u003e\n                    \u003cdiv class=\"share-info\"\u003e\u003c/div\u003e\n                    \u003cdiv class=\"share-btn\"\u003e复制\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/main\u003e\n\n\u003caside id=\"aside\"\u003e\n    \u003cdiv id=\"aside-wrapper\" class=\"hide\"\u003e\n        \u003cdiv class=\"aside-option\"\u003e✖\u003c/div\u003e\n        \u003cdiv class=\"aside-header\"\u003e历史记录\u003c/div\u003e\n        \u003cdiv class=\"aside-content\"\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/aside\u003e\n\n\u003cnav id=\"nav\"\u003e\n    \u003cdiv id=\"nav-wrapper\"\u003e\n        \u003cdiv class=\"nav-item nav-item-btn nav-item__his\"\u003e历史记录\u003c/div\u003e\n        \u003cdiv class=\"nav-item nav-item-btn nav-item__save\"\u003e已保存\u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\n\u003cfooter id=\"footer\"\u003e\u003c/footer\u003e\n\n\u003cscript src=\"/static/js/main.js?version=20210824xx\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\n\u003c/html\u003e","createAt":1666081164,"id":"zodlqqld"}{"content":"","createAt":1666081502,"id":"g89z9wi3"}{"content":"","createAt":1666081505,"id":"cyjr4vec"}{"content":"","createAt":1666081507,"id":"5b228thd"}{"content":"abc","createAt":1666081529,"id":"enqik375"}{"content":"abc","createAt":1666081568,"id":"bj8p6vmr"}{"content":"","createAt":1666081625,"id":"uhvqxfbi"}{"content":"","createAt":1666081754,"id":"kszswnuk"}{"content":"show","createAt":1666081830,"id":"51fbwh1f"}{"content":"啊啊啊","createAt":1666082157,"id":"dzdfkgdz"}{"content":"instanceof","createAt":1666082466,"id":"1v4vuctp"}{"content":"instanceof","createAt":1666082472,"id":"hlahpdvo"}{"content":"\u003ctemplate\u003e\n  \u003cdiv class=\"app-container\"\u003e\n    \u003cel-container\u003e\n      \u003cel-row style=\"position: fixed; right: 40px; z-index: 5\"\u003e\n        \u003cel-switch\n          v-model=\"form.enable\" active-value=\"1\" inactive-value=\"0\"\n          active-text=\"启用\"\n          inactive-text=\"停用\"\n          style=\"margin-right: 20px\"\n          @change=\"switchEventStatus\"\n        \u003e\n        \u003c/el-switch\u003e\n        \u003cel-button type=\"success\" @click=\"addNew\"\u003e新增\u003c/el-button\u003e\n        \u003cel-button type=\"primary\" @click=\"initAllEvent\" title=\"根据配置文件进行首次初始化，后续点击不会更新，只会新增，默认全部非启用\"\u003e全局初始化\u003c/el-button\u003e\n      \u003c/el-row\u003e\n      \u003cel-aside width=\"400px\" style=\"background-color: rgb(238, 241, 246);  margin-bottom: 0; padding: 0\"\u003e\n        \u003cel-table\n            :data=\"tableData.filter(data =\u003e !search || data.eventName.toLowerCase().includes(search.toLowerCase()) || data.eventCode.toLowerCase().includes(search.toLowerCase()))\"\n            style=\"width: 100%\"\u003e\n          \u003cel-table-column\n              align=\"right\"\u003e\n            \u003ctemplate slot=\"header\" slot-scope=\"scope\"\u003e\n              \u003cel-input\n                  type=\"search\"\n                  v-model=\"search\"\n                  size=\"mini\"\n                  placeholder=\"输入关键字搜索\"/\u003e\n            \u003c/template\u003e\n            \u003ctemplate slot-scope=\"scope\"\u003e\n              \u003cdiv @click=\"loadData(scope.$index, scope.row)\" style=\"text-align: left; cursor: pointer\"\u003e \u003cstrong style=\"display: inline-block; width: 115px\"\u003e{{scope.row.eventCode}} \u003c/strong\u003e{{scope.row.eventName}} \u003c/div\u003e\n            \u003c/template\u003e\n          \u003c/el-table-column\u003e\n        \u003c/el-table\u003e\n      \u003c/el-aside\u003e\n\n      \u003cel-container\u003e\n        \u003cel-main style=\"padding: 0px 20px\"\u003e\n          \u003cel-tabs v-model=\"activeName\" type=\"card\"\u003e\n            \u003cel-tab-pane label=\"事件定义\" name=\"first\"\u003e\n              \u003cel-form ref=\"form\" :model=\"form\" label-width=\"80px\"\u003e\n                \u003cel-form-item label=\"事件定义\"\u003e\n                  \u003cel-input v-model=\"form.eventCode\" class=\"wd-200\" placeholder=\"事件编码\"\u003e\u003c/el-input\u003e\n                  \u003cel-input v-model=\"form.eventStdCode\" class=\"wd-200\" placeholder=\"事件标准编码\"\u003e\u003c/el-input\u003e\n                  \u003cel-select v-model=\"form.eventType\" class=\"wd-200\" placeholder=\"事件类型\"\u003e\n                    \u003cel-option label=\"注册 | Register\" value=\"Register\"\u003e\u003c/el-option\u003e\n                    \u003cel-option label=\"查询 | Query\" value=\"Query\"\u003e\u003c/el-option\u003e\n                  \u003c/el-select\u003e\n                  \u003cel-input v-model=\"form.eventName\" class=\"wd-370\" placeholder=\"事件名称\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n                \u003cel-form-item label=\"存储过程\"\u003e\n                  \u003cel-input v-model=\"form.procName\" class=\"wd-370\" placeholder=\"存储过程\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n                \u003cel-form-item label=\"查询语句\"\u003e\n                  \u003cel-input type=\"textarea\" v-model=\"form.selectSql\" @blur=\"fixValue('selectSql')\" :rows=\"6\" placeholder=\"- 用于直接查询，不使用存储过程，只适用于【查询模式】\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n                \u003cel-form-item label=\"查询入参\"\u003e\n                  \u003cel-input v-model=\"form.procIn\" placeholder=\"入参\" @blur=\"fixValue('procIn')\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n                \u003cel-form-item label=\"查询出参\"\u003e\n                  \u003cel-input v-model=\"form.procOut\" placeholder=\"出参\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n                \u003cel-form-item label=\"直接结果\"\u003e\n                  \u003cel-input type=\"textarea\"  v-model=\"form.params\" :rows=\"4\" placeholder=\"- 不查询数据库，直接使用其作为查询结果\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n\n                \u003cel-form-item label=\"返回结构\"\u003e\n                  \u003cel-select v-model=\"form.resultDataStruct\" class=\"wd-200\" placeholder=\"查询数据类型\"\u003e\n                    \u003cel-option label=\"单条 | map\" value=\"map\"\u003e\u003c/el-option\u003e\n                    \u003cel-option label=\"列表 | list\" value=\"list\"\u003e\u003c/el-option\u003e\n                  \u003c/el-select\u003e\n                  \u003cel-select v-model=\"form.resultDataStyle\" class=\"wd-200\" placeholder=\"查询字段风格\"\u003e\n                    \u003cel-option label=\"驼峰式 | camel\" value=\"camel\"\u003e\u003c/el-option\u003e\n                    \u003cel-option label=\"下划线 | snake\" value=\"snake\"\u003e\u003c/el-option\u003e\n                  \u003c/el-select\u003e\n                \u003c/el-form-item\u003e\n\n                \u003cel-form-item\u003e\n                  \u003cel-button type=\"primary\" @click=\"saveEvent\"\u003e立即保存\u003c/el-button\u003e\n                  \u003cspan class=\"hints\"\u003e{{ hints }}\u003c/span\u003e\n                \u003c/el-form-item\u003e\n              \u003c/el-form\u003e\n            \u003c/el-tab-pane\u003e\n            \u003cel-tab-pane label=\"模板配置\" name=\"second\"\u003e\n              \u003cel-form ref=\"form\" :model=\"form\" label-width=\"80px\"\u003e\n                \u003cel-form-item label=\"模板定义\"\u003e\n                  \u003cel-input type=\"textarea\" v-model=\"form.procTpl\" :rows=\"28\" @blur=\"checkJson\"\u003e\u003c/el-input\u003e\n                \u003c/el-form-item\u003e\n                \u003cel-form-item\u003e\n                  \u003cel-button type=\"primary\" @click=\"formatJson\"\u003e格式化\u003c/el-button\u003e\n                  \u003cspan class=\"hints\"\u003e{{ jsonHints }}\u003c/span\u003e\n                \u003c/el-form-item\u003e\n              \u003c/el-form\u003e\n            \u003c/el-tab-pane\u003e\n          \u003c/el-tabs\u003e\n        \u003c/el-main\u003e\n      \u003c/el-container\u003e\n    \u003c/el-container\u003e\n  \u003c/div\u003e\n\u003c/template\u003e\n\u003cscript\u003e\nimport { enableEvent, initAllEvent, listEvent, saveEvent } from '@/api/system/event'\n\nexport default {\n  name: 'EventManage',\n  data() {\n    return {\n      hints: '',\n      jsonHints: '',\n      tableData: [],\n      search: '',\n      activeName: 'first',\n      form: {\n        eventCode: '',\n        eventStdCode: '',\n        eventName: '',\n        eventType: '',\n        procName: '',\n        selectSql: '',\n        procIn: '',\n        procOut: '',\n        procTpl: '',\n        params: '',\n        resultDataStruct: '',\n        resultDataStyle: '',\n        enable: '0'\n      },\n      // 表头\n      columns: [\n        {\n          'eventCode': '事件编码',\n          'eventName': '事件名称'\n        }\n      ]\n    }\n  },\n  created() {\n    listEvent().then(response =\u003e {\n      this.tableData = response.rows\n    })\n  },\n  methods: {\n    loadData(index, row) {\n      this.$data.form = row\n    },\n    refresh() {\n      this.$data.form = {\n        eventCode: '',\n        eventStdCode: '',\n        eventName: '',\n        eventType: '',\n        procName: '',\n        selectSql: '',\n        procIn: '',\n        procOut: '',\n        procTpl: '',\n        params: '',\n        resultDataStruct: '',\n        resultDataStyle: '',\n        enable: '0'\n      }\n      this.activeName = 'first'\n    },\n    addNew() {\n      this.refresh()\n    },\n    saveEvent() {\n      console.log(this.$data.form)\n      saveEvent(this.$data.form).then(response =\u003e {\n        if (response.code === 200) {\n          this.$message({\n            message: '操作成功',\n            type: 'success'\n          })\n        } else {\n          this.$message({\n            message: '操作失败',\n            type: 'error'\n          })\n        }\n      })\n    },\n    switchEventStatus() {\n      console.log(this.$data.form.enable)\n      enableEvent(this.$data.form).then(response =\u003e {\n        if (response.code === 200) {\n          this.$message({\n            message: '操作成功',\n            type: 'success'\n          })\n        } else {\n          this.$message({\n            message: '操作失败',\n            type: 'error'\n          })\n        }\n      })\n    },\n    initAllEvent() {\n      initAllEvent().then(response =\u003e {\n        this.refresh()\n        listEvent().then(response =\u003e {\n          this.tableData = response.rows\n        })\n        if (response.code === 200) {\n          this.$message({\n            message: '操作成功',\n            type: 'success'\n          })\n        } else {\n          this.$message({\n            message: '操作失败',\n            type: 'error'\n          })\n        }\n      })\n    },\n    fixValue(key) {\n      if (key === 'procIn') {\n        this.$data.form[key] = this.$data.form[key].toUpperCase()\n        this.$data.form[key] = this.$data.form[key].split(',').map(v =\u003e v.trim()).join(', ')\n      }\n      if (key === 'procIn' || key === 'selectSql') {\n        if (this.$data.form.selectSql \u0026\u0026 this.$data.form.procIn) {\n          // 判断 selectSql中冒号个数\n          const selectSqlCount = this.$data.form.selectSql.split(':').length - 1\n\n          // 判断procIn参数个数\n          const procInCount = this.$data.form.procIn.split(',').length\n          if (selectSqlCount !== procInCount) {\n            this.$data.hints = `【查询语句】中占位符个数 ${selectSqlCount} 与【查询入参】个数 ${procInCount} 不一致`\n          }\n        }\n      }\n    },\n    checkJson() {\n      try {\n        this.$data.jsonHints = ''\n        JSON.parse(this.$data.form.procTpl)\n      } catch (e) {\n        // 判断并指出错误的位置\n        if (e.toString().indexOf('at position') \u003e 0) {\n          this.$data.jsonHints = `【模板定义】不是有效的JSON格式：at position ${e.toString().split('at position')[1]}`\n        } else {\n          this.$data.jsonHints = `【模板定义】不是有效的JSON格式`\n        }\n      }\n    },\n    formatJson() {\n      try {\n        this.$data.jsonHints = ''\n        this.$data.form.procTpl = JSON.stringify(JSON.parse(this.$data.form.procTpl), null, 2)\n      } catch (e) {\n        // 判断并指出错误的位置\n        if (e.toString().indexOf('at position') \u003e 0) {\n          this.$data.jsonHints = `【模板定义】不是有效的JSON格式：at position${e.toString().split('at position')[1]}`\n        } else {\n          this.$data.jsonHints = `【模板定义】不是有效的JSON格式`\n        }\n      }\n    }\n  }\n}\n\u003c/script\u003e\n\n\u003cstyle scoped\u003e\n  .wd-370 {\n    width: 360px;\n    margin-right: 10px;\n  }\n  .wd-450 {\n    width: 440px;\n    margin-right: 10px;\n  }\n  .wd-200 {\n    width: 190px;\n    margin-right: 10px;\n  }\n  .hints {\n    margin-left: 30px;\n    color: red;\n  }\n  .el-table {\n    height: calc(100vh - 128px);\n    overflow-y: scroll;\n\n    .el-table__header-wrapper {\n      position: sticky;\n      top: 0;\n      z-index: 3;\n    }\n  }\n\u003c/style\u003e\n","createAt":1742456942,"id":"md85vlvf"}{"content":"1111","createAt":1742457296,"id":"vuy87yxu"}{"content":"1111","createAt":1742459260,"id":"kmggkst8"}{"content":"啊啊啊","createAt":1742459798,"id":"lc3ctrlb"}{"content":"@import \"common.css\";\n\nbody {\n  padding: 20px;\n}\n\n#main-wrapper {\n  max-width: 900px;\n  margin: 0 auto;\n  background: #fff;\n  padding: 40px;\n  border-radius: 12px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);\n  transition: 0.3s;\n  text-align: center;\n\n  #data-wrapper {\n    padding: 10px;\n\n    #data-content {\n      position: relative;\n\n      #data-input {\n        width: 100%;\n        min-height: 200px;\n        padding: 1em;\n        font-family: var(--ff-mono);\n        font-size: 12px;\n        line-height: 16px;\n        white-space: pre;\n        word-spacing: normal;\n        word-break: normal;\n        word-wrap: normal;\n        tab-size: 4;\n\n        border: 1px solid #ccc;\n        border-radius: 8px;\n        resize: vertical;\n        transition: 0.3s;\n\n        \u0026:focus {\n          border: 1px solid #444;\n          outline: none !important;\n        }\n      }\n\n      .data-code {\n        position: absolute;\n        background: #ffffff;\n        width: 100%;\n        top: 0;\n        overflow: auto;\n        font-size: 12px;\n\n        min-height: 200px;\n        border: 1px solid #ccc;\n        border-radius: 8px;\n        resize: vertical;\n        transition: 0.3s;\n\n        \u003e pre {\n          height: 100%;\n        }\n      }\n\n      .data-option {\n        position: absolute;\n        right: 16px;\n        bottom: 16px;\n        display: flex;\n\n        \u003e * {\n          font-size: 13px;\n          padding: 3px 5px;\n          background: #ccc;\n          opacity: .6;\n          cursor: pointer;\n          user-select: none;\n          border-radius: 2px;\n          box-shadow: 1px 1px 2px #666;\n\n\n          \u0026:hover {\n            opacity: 0.9;\n          }\n        }\n      }\n    }\n\n\n    #data-share {\n      height: 40px;\n      width: 100%;\n      background: #fff;\n      display: flex;\n\n      .share-left {\n        background: #608384;\n        color: #ffffff;\n        line-height: 40px;\n        text-align: center;\n        width: 100%;\n        cursor: pointer;\n\n        \u0026.success {\n          width: 100px;\n        }\n      }\n\n      .share-right {\n        display: none;\n        background: #bbbbbb;\n        text-align: center;\n\n        .share-info {\n          width: calc(100% - 80px);\n          padding: 10px;\n          display: inline-block;\n          overflow: hidden;\n\n          \u003e a {\n            text-decoration: underline;\n          }\n        }\n\n        .share-btn {\n          width: 80px;\n          padding: 10px;\n          border-left: 1px solid #fff;\n          cursor: pointer;\n        }\n\n        \u0026.success {\n          display: flex;\n          width: calc(100% - 100px);\n        }\n      }\n\n    }\n  }\n}\n\n#nav-wrapper {\n  margin: auto;\n  display: flex;\n  justify-content: center;\n\n  .nav-item {\n    padding: 6px;\n    width: 80px;\n    margin: 0 10px;\n    text-align: center;\n    border-radius: 3px;\n    cursor: pointer;\n    background: #ffffff;\n    box-shadow: 1px 1px 3px #999;\n    transition: all 0.2s;\n\n    \u0026:hover {\n      background: #608384;\n      color: #ffffff;\n    }\n  }\n\n}\n\n#aside-wrapper {\n  position: fixed;\n  right: 0;\n  top: 0;\n  box-shadow: 0 0 10px -3px #ccc;\n  height: 100vh;\n  width: 100%;\n  max-width: 500px;\n  background: #fff;\n  transition: all 0.3s;\n\n  $aside-header-height: 40px;\n\n  .aside-option {\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: $aside-header-height;\n    line-height: $aside-header-height;\n    width: $aside-header-height;\n    text-align: center;\n    font-size: 20px;\n    cursor: pointer;\n    transition: all 0.3s;\n\n    \u0026:hover {\n      transform: rotate(180deg);\n    }\n  }\n\n  .aside-header {\n    height: $aside-header-height;\n    line-height: $aside-header-height;\n    padding: 0 10px;\n    font-size: 16px;\n    border-bottom: 1px solid #ccc;\n  }\n\n  .aside-content {\n    height: calc(100vh - 40px);\n    overflow: auto;\n\n\n    .aside-item {\n      border-bottom: 3px solid #eee;\n      padding: 14px;\n\n      \u0026__data {\n        width: 100%;\n        max-height: 160px;\n        overflow: auto;\n        font-size: 12px;\n        font-family: var(--ff-mono);\n        padding: 6px;\n      }\n\n      \u0026__option {\n        font-size: 12px;\n        margin-bottom: 10px;\n\n        \u003e * {\n          display: inline-block;\n        }\n\n        .aside-item__delete, .aside-item__save, .aside-item__share {\n          padding: 1px 5px;\n          background: #eee;\n          border-radius: 3px;\n          cursor: pointer;\n          transition: all 0.2s;\n\n          \u0026:hover {\n            background: #999999;\n            color: #ffffff;\n          }\n        }\n\n      }\n    }\n  }\n\n}\n","createAt":1742460590,"id":"w6356zjx"}{"content":"border-radius: 12px;","createAt":1742461136,"id":"82y87w8p"}{"content":"说说说","createAt":1742463988,"id":"56r5zujf"}{"content":"package com.winning.project.esb.sub.service.impl;\n\nimport cn.hutool.core.collection.CollectionUtil;\nimport cn.hutool.core.date.DateUtil;\nimport cn.hutool.core.map.MapUtil;\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.extra.pinyin.PinyinUtil;\nimport com.alibaba.fastjson2.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport com.winning.common.enums.DealStatusEnum;\nimport com.winning.common.exception.ServiceException;\nimport com.winning.common.utils.DateUtils;\nimport com.winning.common.utils.ExceptionUtil;\nimport com.winning.common.utils.StringUtils;\nimport com.winning.common.utils.spring.SpringUtils;\nimport com.winning.framework.config.properties.EsbRegConfig;\nimport com.winning.project.common.EsbLengthLimitExec;\nimport com.winning.project.esb.base.constant.EsbSourceAppIdEnum;\nimport com.winning.project.esb.base.constant.HandleTypeEnum;\nimport com.winning.project.esb.base.constant.OrderIdTypeEnum;\nimport com.winning.project.esb.base.domain.*;\nimport com.winning.project.esb.base.domain.basic.*;\nimport com.winning.project.esb.base.domain.out.InpBillDetailOutput;\nimport com.winning.project.esb.base.dto.EsbRequestInputDTO;\nimport com.winning.project.esb.base.enums.PatientClassEnum;\nimport com.winning.project.esb.base.util.EsbBeanUtils;\nimport com.winning.project.esb.base.util.EsbSubBizEnum;\nimport com.winning.project.esb.reg.service.HisSlaveQueryService;\nimport com.winning.project.esb.sub.mapper.EsbSubEncounterMapper;\nimport com.winning.project.esb.sub.mapper.EsbSubInspectMapper;\nimport com.winning.project.esb.sub.mapper.EsbSubOperationMapper;\nimport com.winning.project.esb.sub.mapper.EsbSubOrdersMapper;\nimport com.winning.project.esb.sub.model.HisBaseQuery;\nimport com.winning.project.esb.sub.model.OperationMaster;\nimport com.winning.project.esb.sub.model.OperationName;\nimport com.winning.project.esb.sub.model.ris.RisBaseInput;\nimport com.winning.project.esb.sub.service.EsbSubCommonService;\nimport com.winning.project.esb.sub.service.EsbSubService;\nimport com.winning.project.esb.sub.service.ThirdPartyExamService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.TransactionStatus;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.transaction.support.DefaultTransactionDefinition;\n\nimport java.math.BigDecimal;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * @author wuxingchang\n * @description ESB订阅服务\n * @date 2023/11/16 10:40\n */\n@Slf4j\n@Service\npublic class EsbSubServiceImpl implements EsbSubService {\n\n    @Autowired\n    EsbSubCommonService esbSubCommonService;\n    @Autowired\n    EsbSubOperationMapper esbSubOperationMapper;\n    @Autowired\n    EsbSubInspectMapper esbSubInspectMapper;\n\n    @Autowired\n    EsbSubEncounterMapper esbSubEncounterMapper;\n\n    @Autowired\n    EsbSubOrdersMapper esbSubOrdersMapper;\n\n    @Autowired\n    PlatformTransactionManager transactionManager;\n\n    @Autowired\n    private ThirdPartyExamService thirdPartyExamService;\n\n    @Autowired\n    private HisSlaveQueryService hisSlaveQueryService;\n\n    @Autowired\n    EsbRegConfig esbRegConfig;\n\n    private void tranRecordLog(DealStatusEnum dealStatusEnum, String messageId, EsbRequestInputDTO esbRequestInputDTO, String tranCode, String errorMsg, String patientId, String tranErrorDesc) {\n        esbSubCommonService.tranRecordLog(DealStatusEnum.SUCCESS.equals(dealStatusEnum), messageId, esbRequestInputDTO, tranCode, errorMsg, tranErrorDesc, patientId);\n        switch (dealStatusEnum) {\n            case FAIL:\n                throw new ServiceException(errorMsg);\n            case EXCEPTION:\n                throw new RuntimeException(String.format(\"%s-tranCode：%s,messageId：%s,errorMessage：%s\", tranErrorDesc, tranCode, messageId, errorMsg));\n            default:\n                break;\n        }\n    }\n\n    @Transactional\n    @Override\n    public void operationStatusInfoUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"手术状态信息更新入库失败\";\n        try {\n            SGR0104 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), SGR0104.class);\n            PatientLocationSimpleType patientLocation = body.getPatientVisit().getPatientLocation();\n            String patientId = body.getDemography().getPatientIdentifierList().stream()\n                    .filter(iDType -\u003e \"PatientID\".equals(iDType))\n                    .map(IdentifierListType::getIDNumber)\n                    .toString();\n\n            OperationMaster operationMaster = OperationMaster.builder()\n                    .patientId(patientId)\n                    .visitId(PatientClassEnum.valueOf(body.getPatientVisit().getPatientClass()).getCode())\n                    .operId(1)\n                    .operatingRoom(patientLocation.getDepartment().getNO())\n                    .operatingRoomNo(patientLocation.getRoom()).build();\n\n            OperationName operationName = OperationName.builder()\n                    .patientId(patientId)\n                    .visitId(PatientClassEnum.valueOf(body.getPatientVisit().getPatientClass()).getCode())\n                    .operId(1)\n                    .operationNo(1).build();\n\n        } catch (Exception e) {\n            log.error(\"手术状态信息更新异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, null, \"手术状态信息更新失败\");\n    }\n\n    @Override\n//    @Transactional(rollbackFor = Exception.class)\n    public Object examInspectAddAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n        log.info(\"检查申请单操作请求入参：\" + JSON.toJSONString(esbRequestInputDTO));\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        ORD0301 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), ORD0301.class);\n        String errorMsg = \"检查申请单操作失败\";\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String patientId = null;\n        List\u003cMap\u003cString, Object\u003e\u003e resultMapList = null;\n\n        try {\n\n            ORD0301.Demography demography = body.getDemography();\n            patientId = body.fetchPatientId();\n            String patientName = demography.getPatientName();\n            boolean isAdd = \"ORD0301\".contains(tranCode);\n\n            String chargeType = body.getPatientVisit().getChargeType();\n\n            List\u003cORD0301.OrderGroup\u003e orderGroupList = body.getOrderGroupList();\n\n\n            if (\"O,E\".contains(body.getPatientVisit().getPatientClass())) {  //门诊、急诊\n                // 手动开启事务\n                DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();\n                def1.setName(\"Transaction1\");\n                def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n                TransactionStatus status1 = transactionManager.getTransaction(def1);\n\n                Map\u003cObject, Map\u003cString, Object\u003e\u003e forAutoBillMap = new HashMap\u003c\u003e();\n\n                try {\n                    if (isAdd) {  //新增\n                        String visitNum = body.getPatientVisit().getVisitNumber();\n                        String visitDate = visitNum.substring(0, 8);\n                        String visitNo = visitNum.substring(8);\n                        resultMapList = new ArrayList\u003c\u003e();\n\n                        String diagnosisDesc = null;\n                        String diagnosisDetail = null;\n                        if (CollectionUtil.isNotEmpty(body.getDiagnosisList())) {\n                            diagnosisDetail = body.getDiagnosisList().stream()\n                                    .map(ORD0301.Diagnosis::getDiagnosisCode)\n                                    .map(CodedElementType::getText)\n                                    .collect(Collectors.joining(\"；\"));\n                            diagnosisDesc = body.getDiagnosisList().stream()\n                                    .findFirst()\n                                    .map(ORD0301.Diagnosis::getDiagnosisCode)\n                                    .map(CodedElementType::getText)\n                                    .orElse(null);\n                        }\n\n\n                        //医嘱\n                        for (int i = 0; i \u003c orderGroupList.size(); i++) {\n                            ORD0301.OrderGroup orderGroup = orderGroupList.get(i);\n                            ORD0301.Apply apply = orderGroup.getApply();\n                            List\u003cORD0301.ApplyDetail\u003e applyDetailList = apply.getApplyDetailList();\n                            if (applyDetailList.size() \u003e 1) {\n                                throw new ServiceException(\"门诊申请单，目前只支持单次申请\");\n                            }\n\n                            ORD0301.ApplyDetail applyDetail = applyDetailList.get(0);\n                            String applyItemqty = Optional.ofNullable(applyDetail.getServiceInfo().getItemqty())\n                                    .map(a -\u003e (a == null || a.isEmpty()) ? \"1\" : a)\n                                    .orElse(\"1\");\n\n                            Map\u003cString, Integer\u003e applyCounter = new HashMap\u003c\u003e();\n                            Integer examItemNo = 1;\n\n                            HandleType handleType = orderGroup.getCommonOrder().fetchHandleBy(HandleTypeEnum.Apply, false);\n                            PersonTypeWithDept personTypeWithDept = handleType.getHandleBy();\n                            String doctorName = personTypeWithDept.getName();\n                            String reqDept = personTypeWithDept.getDepartment().getIdentifier();\n                            String reqDeptName = personTypeWithDept.getDepartment().getText();\n                            String doctorNO = personTypeWithDept.getNo();\n                            String applyNo = orderGroup.getApply().getApplyNo();\n                            if (applyNo != null \u0026\u0026 !applyNo.isEmpty()) {\n                                applyCounter.merge(applyNo, 1, Integer::sum);\n                            }\n\n                            // 开单时间\n                            Date handleDate = handleType.getHandleTimeOfNotNull(\"开立处方缺少开单时间\");\n\n                            //需注意：同一事务中，每次查询获得的serialNo为同一值\n                            Map\u003cString, Object\u003e resultMap = new HashMap\u003c\u003e();\n\n                            // 1. 申请单\n                            Map\u003cString, Object\u003e orderMap = new HashMap\u003c\u003e();\n                            orderMap.put(\"patientId\", patientId);\n                            orderMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                            orderMap.put(\"visitNo\", Long.valueOf(visitNo));\n                            orderMap.put(\"orderedBy\", personTypeWithDept.getDepartment().getIdentifier());\n                            orderMap.put(\"doctor\", doctorName);\n                            orderMap.put(\"doctorNo\", doctorNO);\n                            orderMap.put(\"diagnosisDesc\", diagnosisDesc);\n                            orderMap.put(\"orderClass\", \"\");\n                            orderMap.put(\"orderDate\", handleDate);\n                            esbSubInspectMapper.insertOutpOrders(orderMap);\n\n                            // 处方主键\n                            String serialNoOut = String.valueOf(orderMap.get(\"SERIAL_NO_OUT\"));\n                            // 处方号\n                            Object prescNoOut = orderMap.get(\"PRESC_NO_OUT\");\n                            resultMap.put(\"serialNo\", serialNoOut);\n                            // CISOrderNo 医生站ID，用于对照结果\n                            String cisOrderNo = orderGroup.fetchOrderId(OrderIdTypeEnum.CISOrderNo);\n                            resultMap.put(\"cisOrderNo\", cisOrderNo);\n                            resultMap.put(\"details\", new ArrayList\u003c\u003e());\n\n                            log.info(\"门诊申请单--------serialNo:{}\", prescNoOut);\n\n                            String performedBy = orderGroup.getOrderDetailGroupList().get(0).getOrderDetail().getFillerDepartment().getIdentifier();\n\n                            Map\u003cString, Object\u003e examAppointsMap = new HashMap\u003c\u003e();\n                            BigDecimal totalCosts = orderGroup.getOrderDetailGroupList().stream()\n                                    .map(a -\u003e a.getOrderDetail().getServiceInfo())\n                                    .filter(a -\u003e \"1\".equals(a.getClazz().getIdentifier())) // 收费小项目\n                                    .map(a -\u003e\n                                            new BigDecimal(a.getPrice())\n                                                    .multiply(new BigDecimal(a.getItemqty()))\n                                                    .multiply(new BigDecimal(applyItemqty)))\n                                    .reduce(BigDecimal.ZERO, BigDecimal::add);\n\n                            // 2. 检查预约\n\n                            // 0-普通、1-加急\n                            String priority = apply.getPriority();\n                            examAppointsMap.put(\"patientId\", patientId);\n                            examAppointsMap.put(\"visitId\", null);\n                            examAppointsMap.put(\"localIdClass\", null);\n                            examAppointsMap.put(\"patientLocalId\", null);\n                            examAppointsMap.put(\"name\", patientName);\n                            examAppointsMap.put(\"examClass\", apply.getType().getText());\n                            examAppointsMap.put(\"examSubClass\", apply.getSubType().getText());\n                            examAppointsMap.put(\"clinSymp\", apply.getApplyDescription());  //临床症状\n                            examAppointsMap.put(\"physSign\", apply.getPhysSign());  //体征\n                            examAppointsMap.put(\"clinDiag\", StringUtils.isEmpty(diagnosisDetail) ? null : ((diagnosisDetail.length() \u003e 40) ? diagnosisDetail.substring(0, 40) : diagnosisDetail));\n                            examAppointsMap.put(\"examMode\", null);\n                            examAppointsMap.put(\"examGroup\", null);\n                            examAppointsMap.put(\"performedBy\", performedBy);\n                            examAppointsMap.put(\"patientSource\", 1);\n                            examAppointsMap.put(\"facility\", null);\n                            examAppointsMap.put(\"reqDateTime\", DateUtils.parseDate(apply.getApplyTime()));\n                            examAppointsMap.put(\"reqDept\", reqDept);\n                            examAppointsMap.put(\"reqPhysician\", doctorName);\n                            examAppointsMap.put(\"reqMemo\", null);\n                            examAppointsMap.put(\"scheduledDate\", null);\n                            examAppointsMap.put(\"notice\", null);\n                            examAppointsMap.put(\"costs\", totalCosts);\n                            examAppointsMap.put(\"charges\", totalCosts);\n                            examAppointsMap.put(\"priorityIndicator\", priority == null ? \"0\" : priority);\n                            examAppointsMap.put(\"examReason\", apply.getApplyReason());\n                            examAppointsMap.put(\"reqPhysicianId\", doctorNO);\n                            examAppointsMap.put(\"chargeType\", chargeType);\n                            examAppointsMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                            examAppointsMap.put(\"visitNo\", Long.valueOf(visitNo));\n                            esbSubInspectMapper.insertExamAppoints(examAppointsMap);\n                            Object examNoOut = examAppointsMap.get(\"EXAM_NO_OUT\");\n                            resultMap.put(\"appointNo\", examNoOut);\n\n                            // 3. 检查明细\n                            Map\u003cString, Object\u003e examItemsMap = new HashMap\u003c\u003e();\n\n                            examItemsMap.put(\"examNo\", examNoOut);\n                            examItemsMap.put(\"examItemNo\", examItemNo++);\n                            examItemsMap.put(\"examItem\", applyDetail.getServiceInfo().getItemInfo().getText());\n                            examItemsMap.put(\"examItemCode\", applyDetail.getServiceInfo().getItemInfo().getIdentifier());\n                            examItemsMap.put(\"costs\", totalCosts);\n                            examItemsMap.put(\"examSubClass\", examAppointsMap.get(\"examSubClass\"));\n                            esbSubInspectMapper.insertExamItems(examItemsMap);\n\n\n                            //医嘱详情\n                            int subNo = 1;\n                            for (ORD0301.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                                ORD0301.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n\n                                //项目信息\n                                ORD0301.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n\n                                BigDecimal costs = new BigDecimal(serviceInfo.getPrice())\n                                        .multiply(new BigDecimal(serviceInfo.getItemqty()))\n                                        .multiply(new BigDecimal(applyItemqty));\n\n                                // 4. 项目明细\n                                Map\u003cString, Object\u003e treatMap = new HashMap\u003c\u003e();\n\n                                // 判断符合以下格式：D|310300007g|/|项\"\n                                String chargeItemNo = serviceInfo.getItemInfo().getNO();\n                                if (chargeItemNo != null) {\n                                    String[] chargeItemNoArr = chargeItemNo.split(\"\\\\|\");\n                                    if (chargeItemNoArr.length != 4) {\n                                        throw new RuntimeException(\"ItemInfo.NO 格式错误:[\" + chargeItemNo + \"]\");\n                                    }\n                                    treatMap.put(\"itemClass\", chargeItemNoArr[0]);\n                                    treatMap.put(\"itemSpec\", chargeItemNoArr[2]);\n                                    treatMap.put(\"units\", chargeItemNoArr[3]);\n                                } else {\n                                    throw new RuntimeException(\"ItemInfo.NO 格式错误:[\" + chargeItemNo + \"]\");\n                                }\n\n                                treatMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                treatMap.put(\"serialNo\", serialNoOut);\n                                treatMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                treatMap.put(\"appointNo\", examNoOut);\n                                //项目代码\n                                treatMap.put(\"itemCode\", serviceInfo.getItemInfo().getIdentifier());\n                                treatMap.put(\"itemName\", serviceInfo.getItemInfo().getText());\n                                treatMap.put(\"itemNo\", subNo);\n                                treatMap.put(\"appointItemNo\", (applyNo != null \u0026\u0026 !applyNo.isEmpty()) ? applyCounter.get(applyNo) : 1);\n                                treatMap.put(\"amount\", new BigDecimal(serviceInfo.getItemqty()).multiply(new BigDecimal(applyItemqty)));\n                                treatMap.put(\"costs\", costs);\n                                treatMap.put(\"chargeIndicator\", Integer.valueOf(serviceInfo.getChargeCode()));\n                                treatMap.put(\"performedBy\", orderDetail.getFillerDepartment().getIdentifier());\n                                treatMap.put(\"charges\", costs);\n                                //先赋默认值0（普通病人）\n                                treatMap.put(\"feeGrade\", 0);\n\n                                treatMap.put(\"orderDate\", handleDate);\n                                treatMap.put(\"orderDoctor\", doctorNO);\n                                esbSubInspectMapper.insertOutpTreatRec(treatMap);\n\n\n                                // 5. 收费明细\n                                Map\u003cString, Object\u003e costsMap = new HashMap\u003c\u003e();\n                                costsMap.put(\"patientId\", patientId);\n                                costsMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                costsMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                costsMap.put(\"serialNo\", serialNoOut);\n                                costsMap.put(\"orderNo\", prescNoOut);\n                                costsMap.put(\"orderClass\", \"D\");\n                                costsMap.put(\"orderSubNo\", subNo);\n                                costsMap.put(\"itemNo\", treatMap.get(\"itemNo\"));\n                                costsMap.put(\"itemClass\", treatMap.get(\"itemClass\"));\n                                costsMap.put(\"itemName\", treatMap.get(\"itemName\"));\n                                costsMap.put(\"itemCode\", treatMap.get(\"itemCode\"));\n                                costsMap.put(\"itemSpec\", treatMap.get(\"itemSpec\"));\n                                costsMap.put(\"units\", treatMap.get(\"units\"));\n                                costsMap.put(\"amount\", treatMap.get(\"amount\"));\n                                costsMap.put(\"costs\", treatMap.get(\"costs\"));\n                                costsMap.put(\"orderedByDept\", orderMap.get(\"orderedBy\"));\n                                costsMap.put(\"orderedByDoctor\", orderMap.get(\"doctor\"));\n                                costsMap.put(\"performedBy\", examAppointsMap.get(\"performedBy\"));\n                                costsMap.put(\"charges\", costsMap.get(\"costs\"));\n                                costsMap.put(\"chargeIndicator\", 0);\n                                costsMap.put(\"repetition\", 1);\n                                costsMap.put(\"appointNo\", examNoOut);\n\n                                esbSubInspectMapper.insertOutpOrdersCosts(costsMap);\n                                subNo++;\n                            }\n\n                            // TODO 通过WebService推送PACS\n                            Map\u003cString, Object\u003e pacsAddMap = new HashMap\u003c\u003e();\n                            pacsAddMap.putAll(examItemsMap);\n                            pacsAddMap.putAll(examAppointsMap);\n                            pacsAddMap.put(\"reqDeptName\", reqDeptName);\n\n                            Map\u003cString, Object\u003e patMasterIndex = hisSlaveQueryService.hisSimpleQuery(\"PAT_MASTER_INDEX\", null, patientId).getSingle();\n//                            Map\u003cString, Object\u003e de = hisSlaveQueryService.hisSimpleQuery(\"DEPT_DICT\", \"BY_DEPT_CODE\", ).getSingle();\n\n                            try {\n                                RisBaseInput risBaseInput =  thirdPartyExamService.buildExamAddData(patMasterIndex, pacsAddMap, \"1\");\n                                log.info(\"pacs推送数据：{}\", risBaseInput);\n\n                                if (SpringUtils.isProdEnvironment()) {\n                                    String examPushResult = thirdPartyExamService.doHisOrder(risBaseInput, \"HISORDER\");\n                                    log.info(\"pacs推送结果：{}\", examPushResult);\n                                }\n                            } catch (Exception e) {\n                                log.error(\"pacs推送失败：{}\", e.getMessage(), e);\n                                throw e;\n                            };\n\n                            if (\"军队医改\".equals(chargeType)) {\n                                //军免计价\n                                Map\u003cString, Object\u003e armyMap = new HashMap\u003c\u003e();\n                                armyMap.put(\"patientId\", patientId);\n                                armyMap.put(\"serialNo\", serialNoOut);\n                                armyMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                armyMap.put(\"visitNo\", visitNo);\n\n                                forAutoBillMap.put(serialNoOut, armyMap);\n\n                            }\n                            resultMapList.add(resultMap);\n                        }\n                        dealStatusEnum = DealStatusEnum.SUCCESS;\n                    } else {  //撤销\n                        for (ORD0301.OrderGroup orderGroup : body.getOrderGroupList()) {\n                            String visitNum = body.getPatientVisit().getVisitNumber();\n                            String visitDate = visitNum.substring(0, 8);\n                            String visitNo = visitNum.substring(8);\n\n                            String serialNo = orderGroup.fetchOrderId(OrderIdTypeEnum.HISOrderNo);\n                            String[] serialNoArr = serialNo.split(\"\\\\|\");\n                            Map\u003cString, Object\u003e orderMap = new HashMap\u003c\u003e();\n                            orderMap.put(\"serialNo\", serialNoArr[0]);\n                            orderMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                            orderMap.put(\"visitNo\", Long.valueOf(visitNo));\n                            orderMap.put(\"patientId\", patientId);\n                            orderMap.put(\"orderType\", \"EXAM\");\n\n                            esbSubInspectMapper.deleteOutpOrders(orderMap);\n                            // webservice\n                            String examNoOut = orderMap.get(\"EXAM_NO_OUT\").toString();\n                            String examItemNoOut = orderMap.get(\"EXAM_ITEM_NO_OUT\").toString();\n                            Arrays.stream(examItemNoOut.split(\",\"))\n                                    .forEach(examItemNo -\u003e {\n                                        RisBaseInput risBaseInput\n                                                = thirdPartyExamService.buildExamCancelData(examNoOut + examItemNo.trim());\n                                        log.info(\"pacs推送数据：{}\", risBaseInput);\n\n                                        if (SpringUtils.isProdEnvironment()) {\n                                            String examPushResult = thirdPartyExamService.doHisOrder(risBaseInput, \"HISORDERCANCEL\");\n                                            log.info(\"pacs推送结果：{}\", examPushResult);\n                                        }\n                                    });\n                        }\n                        dealStatusEnum = DealStatusEnum.SUCCESS;\n                    }\n\n                    transactionManager.commit(status1); // 提交第一个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status1); // 回滚第一个事务\n                    throw e;\n                }\n\n                // 划价\n                DefaultTransactionDefinition def2 = new DefaultTransactionDefinition();\n                def2.setName(\"Transaction2\");\n                def2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n                TransactionStatus status2 = transactionManager.getTransaction(def2);\n\n                try {\n                    if (!forAutoBillMap.isEmpty()) {\n                        Map\u003cObject, List\u003cMap\u003cString, Object\u003e\u003e\u003e serialNoToResult\n                                = resultMapList.stream().collect(Collectors.groupingBy(a -\u003e a.get(\"serialNo\")));\n\n                        forAutoBillMap.forEach((serialNoOut, armyMap) -\u003e {\n                            esbSubInspectMapper.armyAutoBill(armyMap);\n                            log.info(\"申请单-ArmyAutoBill:\" + armyMap.toString());\n                            List\u003cMap\u003cString, Object\u003e\u003e resultList = serialNoToResult.get(serialNoOut);\n                            if (resultList != null \u0026\u0026 !resultList.isEmpty()) {\n                                resultList.forEach(r -\u003e {\n                                    r.put(\"armyAutoBillMsg\", armyMap.get(\"errMsg\"));\n                                    r.put(\"armyAutoBillCode\", armyMap.get(\"retCode\"));\n                                });\n                            }\n                        });\n                    }\n                    transactionManager.commit(status2); // 提交第二个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status2); // 回滚第二个事务\n                    throw e;\n                }\n\n            } else if (\"I\".equals(body.getPatientVisit().getPatientClass())) {  //住院\n                // TODO\n            } else {\n                throw new RuntimeException(String.format(\"检查申请单未知的患者类别PatientClass-tranCode：%s,messageId：%s\", tranCode, messageId));\n            }\n        } catch (ServiceException serviceException) {\n            log.error(\"检查申请单操作失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"检查申请单操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"（检查）申请单操作失败\");\n        return resultMapList;\n    }\n\n    @Override\n//    @Transactional(rollbackFor = Exception.class)\n    public Object labTestInspectAddAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n        log.info(\"检验申请单操作请求入参：\" + JSON.toJSONString(esbRequestInputDTO));\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        ORD0304 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), ORD0304.class);\n        String errorMsg = \"检验 申请单操作失败\";\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String patientId = null;\n        List\u003cMap\u003cString, Object\u003e\u003e resultMapList = null;\n\n        try {\n\n            ORD0304.Demography demography = body.getDemography();\n            patientId = body.fetchPatientId();\n            boolean isAdd = \"ORD0304\".contains(tranCode);\n\n            List\u003cORD0304.OrderGroup\u003e orderGroupList = body.getOrderGroupList();\n\n            PatientLocationSimpleType patientLocation = body.getPatientVisit().getPatientLocation();\n            String chargeType = body.getPatientVisit().getChargeType();\n\n            if (\"O,E\".contains(body.getPatientVisit().getPatientClass())) {  //门诊、急诊\n                // 手动开启事务\n                DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();\n                def1.setName(\"Transaction1\");\n                def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n                TransactionStatus status1 = transactionManager.getTransaction(def1);\n\n                Map\u003cObject, Map\u003cString, Object\u003e\u003e forAutoBillMap = new HashMap\u003c\u003e();\n\n                try {\n                    if (isAdd) {  //新增\n\n                        String visitNum = body.getPatientVisit().getVisitNumber();\n                        String visitDate = visitNum.substring(0, 8);\n                        String visitNo = visitNum.substring(8);\n                        resultMapList = new ArrayList\u003c\u003e();\n\n                        Set\u003cString\u003e serialNoSet = new HashSet\u003c\u003e();\n                        //医嘱\n                        for (int i = 0; i \u003c orderGroupList.size(); i++) {\n                            ORD0304.OrderGroup orderGroup = orderGroupList.get(i);\n                            HandleType handleType = orderGroup.getCommonOrder().fetchHandleBy(HandleTypeEnum.Apply, false);\n                            PersonTypeWithDept personTypeWithDept = handleType.getHandleBy();\n                            String doctorName = personTypeWithDept.getName();\n                            String reqDept = personTypeWithDept.getDepartment().getIdentifier();\n                            String doctorNO = personTypeWithDept.getIDNumber();\n\n                            String performedBy = orderGroup.getOrderDetailGroupList().get(0).getOrderDetail().getFillerDepartment().getIdentifier();\n                            ORD0304.Apply apply = orderGroup.getApply();\n                            String cisOrderNo = orderGroup.fetchOrderId(OrderIdTypeEnum.CISOrderNo);\n\n                            // 开单时间\n                            Date handleDate = handleType.getHandleTimeOfNotNull(\"开立处方缺少开单时间\");\n\n\n                            ORD0304.Specimen specimen = apply.getApplyDetailList().get(0).getSpecimenList().get(0);\n\n                            for (ORD0304.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n\n                                ORD0304.ServiceInfo serviceInfo = orderDetailGroup.getOrderDetail().getServiceInfo();\n\n                                Map\u003cString, Object\u003e hisRequisitionMap = new HashMap\u003c\u003e();\n                                String inpatientId = visitNo + \"/\" + DateUtil.format(DateUtils.parseDate(visitDate, \"yyyyMMdd\"), \"yyyy-MM-dd\");\n                                hisRequisitionMap.put(\"patientType\", \"2\");\n                                hisRequisitionMap.put(\"outpatientId\", patientId);\n                                hisRequisitionMap.put(\"inpatientId\", inpatientId);\n                                hisRequisitionMap.put(\"chargeType\", chargeType);\n                                hisRequisitionMap.put(\"patientDept\", patientLocation.getDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"clinicalDiagnoses\", body.getDiagnosisList().stream().map(a -\u003e a.getDiagnosisCode().getText()).collect(Collectors.joining(\"；\")));\n                                hisRequisitionMap.put(\"medicalRecord\", \"0\");\n                                hisRequisitionMap.put(\"requisitionDept\", orderDetailGroup.getOrderDetail().getPlacerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"requisitionTime\", handleDate);\n                                hisRequisitionMap.put(\"requisitionPerson\", doctorName + \".\" + doctorNO);\n                                hisRequisitionMap.put(\"executeDept\", orderDetailGroup.getOrderDetail().getFillerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"sampleClass\", specimen.getSpecimenType().getText());\n\n                                // TODO HIS编码-执行科室\n                                hisRequisitionMap.put(\"chargeItemId\", serviceInfo.getItemInfo().getIdentifier() + \"-\"\n                                        + orderDetailGroup.getOrderDetail().getFillerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"chargeName\", serviceInfo.getItemInfo().getText());\n                                hisRequisitionMap.put(\"charge\", new BigDecimal(serviceInfo.getPrice()).multiply(new BigDecimal(serviceInfo.getItemqty())));\n                                hisRequisitionMap.put(\"chargeState\", \"0\");\n                                hisRequisitionMap.put(\"chargeTime\", null);\n                                hisRequisitionMap.put(\"chargeItemState\", \"0\");\n                                hisRequisitionMap.put(\"requisitionState\", \"0\");\n                                // 958 标本代码\n                                hisRequisitionMap.put(\"remark\", specimen.getSpecimenType().getIdentifier());\n                                // TODO LIS编码\n                                hisRequisitionMap.put(\"chargeItemIdLis\", serviceInfo.getItemInfo().getNO());\n                                hisRequisitionMap.put(\"prePlanFlag\", \"\");\n\n                                esbSubInspectMapper.insertLisHisRequisition(hisRequisitionMap);\n\n                                Object hisIdOut = hisRequisitionMap.get(\"HIS_ID_OUT\");\n                                String serialNoOut = String.valueOf(hisRequisitionMap.get(\"SERIAL_NO_OUT\"));\n                                serialNoSet.add(serialNoOut);\n                                Map\u003cString, Object\u003e resultMap = new HashMap\u003c\u003e();\n                                resultMapList.add(resultMap);\n                                resultMap.put(\"appointNo\", hisIdOut);\n                                resultMap.put(\"serialNo\", serialNoOut);\n\n                                String cisOrderDetailNo = EsbBeanUtils.getId(orderDetailGroup.getOrderDetail().getOrderDetailIdList(), \"CISOrderDetailNo\");\n                                resultMap.put(\"cisOrderDetailNo\", cisOrderDetailNo);\n                                resultMap.put(\"cisOrderNo\", cisOrderNo);\n\n                            }\n                        }\n                        if (\"军队医改\".equals(chargeType)) {\n                            //军免计价\n                            for (String serialNo : serialNoSet) {\n                                Map\u003cString, Object\u003e armyMap = new HashMap\u003c\u003e();\n                                armyMap.put(\"patientId\", patientId);\n                                armyMap.put(\"serialNo\", serialNo);\n                                armyMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                armyMap.put(\"visitNo\", visitNo);\n\n                                forAutoBillMap.put(serialNo, armyMap);\n                            }\n                        }\n\n                        dealStatusEnum = DealStatusEnum.SUCCESS;\n                    } else {  //撤销\n                        for (ORD0304.OrderGroup orderGroup : body.getOrderGroupList()) {\n                            String serialNo = orderGroup.fetchOrderId(OrderIdTypeEnum.HISOrderNo);\n                            String visitNum = body.getPatientVisit().getVisitNumber();\n                            String visitDate = visitNum.substring(0, 8);\n                            String visitNo = visitNum.substring(8);\n\n                            for (ORD0304.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                                Map\u003cString, Object\u003e orderMap = new HashMap\u003c\u003e();\n                                String hISOrderDetailNo = EsbBeanUtils.getId(orderDetailGroup.getOrderDetail().getOrderDetailIdList(), \"HISOrderDetailNo\", \"HISOrderDetailNo 不能为空\");\n\n                                orderMap.put(\"serialNo\", serialNo);\n                                orderMap.put(\"appointNo\", hISOrderDetailNo);\n                                orderMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                orderMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                orderMap.put(\"patientId\", patientId);\n                                orderMap.put(\"orderType\", \"LAB_TEST\");\n                                esbSubInspectMapper.deleteOutpOrders(orderMap);\n                            }\n\n                        }\n                        dealStatusEnum = DealStatusEnum.SUCCESS;\n                    }\n                    transactionManager.commit(status1); // 提交第一个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status1); // 回滚第一个事务\n                    throw e;\n                }\n\n                // 划价\n                DefaultTransactionDefinition def2 = new DefaultTransactionDefinition();\n                def2.setName(\"Transaction2\");\n                def2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n                TransactionStatus status2 = transactionManager.getTransaction(def2);\n\n                try {\n                    if (!forAutoBillMap.isEmpty()) {\n                        Map\u003cObject, List\u003cMap\u003cString, Object\u003e\u003e\u003e serialNoToResult\n                                = resultMapList.stream().collect(Collectors.groupingBy(a -\u003e a.get(\"serialNo\")));\n\n                        forAutoBillMap.forEach((serialNoOut, armyMap) -\u003e {\n                            esbSubInspectMapper.armyAutoBill(armyMap);\n                            log.info(\"申请单-ArmyAutoBill:\" + armyMap.toString());\n                            List\u003cMap\u003cString, Object\u003e\u003e resultList = serialNoToResult.get(serialNoOut);\n                            if (resultList != null \u0026\u0026 !resultList.isEmpty()) {\n                                resultList.forEach(r -\u003e {\n                                    r.put(\"armyAutoBillMsg\", armyMap.get(\"errMsg\"));\n                                    r.put(\"armyAutoBillCode\", armyMap.get(\"retCode\"));\n                                });\n                            }\n                        });\n                    }\n                    transactionManager.commit(status2); // 提交第二个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status2); // 回滚第二个事务\n                    throw e;\n                }\n\n            } else if (\"I\".equals(body.getPatientVisit().getPatientClass())) {  //住院\n                // TODO\n            }\n        } catch (ServiceException serviceException) {\n            log.error(\"检验申请单操作失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"检验申请单操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"（检验）申请单操作失败\");\n        return resultMapList;\n    }\n\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void RisReportAddAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        RAD0106 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), RAD0106.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查报告操作失败\";\n        RAD0106.Demography demography = body.getDemography();\n        String patientId = demography.getPatientIdentifierList()\n                .stream()\n                .filter(identifierListType -\u003e \"PatientID\".equals(identifierListType.getIDType()))\n                .findFirst()\n                .map(IdentifierListType::getIDNumber)\n                .get();\n        RAD0106.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n        String reportNo = orderGroup.getApply().getApplyNo();\n        try {\n            if (\"RAD0106\".equals(tranCode)) {  //新增\n\n                //解析患者信息\n                String patientClass = body.getPatientVisit().getPatientClass();\n                boolean isOutp = \"O\".equals(patientClass);\n                String patientName = demography.getPatientName();\n                String sex = demography.getSex().getText();\n                String birthDay = demography.getBirthday();\n\n                String patientLocalId = body.getReport().getReportNo();\n                String birthPlace = \"\";\n                String identity = \"\";\n                String chargeType = \"\";\n                String mailingAddress = \"\";\n                String zipCode = \"\";\n                String phoneNumber = \"\";\n                String namePhonetic = \"\";\n\n                Map\u003cString, Object\u003e patMasterIndex = esbSubCommonService.hisSimpleQuery(\"PAT_MASTER_INDEX\", null, patientId).getSingle();\n                if (CollectionUtil.isNotEmpty(patMasterIndex)) {\n                    birthPlace = Objects.isNull(patMasterIndex.get(\"BIRTH_PLACE\")) ? \"\" : patMasterIndex.get(\"BIRTH_PLACE\").toString();\n                    identity = Objects.isNull(patMasterIndex.get(\"IDENTITY\")) ? \"\" : patMasterIndex.get(\"IDENTITY\").toString();\n                    chargeType = Objects.isNull(patMasterIndex.get(\"CHARGE_TYPE\")) ? \"\" : patMasterIndex.get(\"CHARGE_TYPE\").toString();\n                    mailingAddress = Objects.isNull(patMasterIndex.get(\"MAILING_ADDRESS\")) ? \"\" : patMasterIndex.get(\"MAILING_ADDRESS\").toString();\n                    zipCode = Objects.isNull(patMasterIndex.get(\"ZIP_CODE\")) ? \"\" : patMasterIndex.get(\"ZIP_CODE\").toString();\n                    namePhonetic = Objects.isNull(patMasterIndex.get(\"NAME_PHONETIC\")) ? \"\" : patMasterIndex.get(\"NAME_PHONETIC\").toString();\n                    phoneNumber = Objects.isNull(patMasterIndex.get(\"PHONE_NUMBER_HOME\")) ? \"\" : patMasterIndex.get(\"PHONE_NUMBER_HOME\").toString();\n                }\n\n                String reportClass = body.getReport().getReportClass().getIdentifier();\n                String reportUrl = body.getReport().getReportURL();\n                String description = \"\";\n                String impression = \"\";\n                String recommendation = \"\";\n                String isAbnormal = body.getReport().getAbnormalFlag();\n                String examPara = \"\";\n                String frozenNo = \"\";\n                String submittedCheckMaterials = \"\";\n                String immunohistochemical = \"\";\n                StringBuilder device = new StringBuilder();\n                for (RAD0106.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                    String instrumentName = \"\";\n                    String instrumentModel = \"\";\n                    RAD0106.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n                    examPara = orderDetail.getExamPara();\n                    frozenNo = orderDetail.getFrozenNo();\n                    submittedCheckMaterials = orderDetail.getSubmittedCheckMaterials();\n                    for (RAD0106.ObservationResult observationResult : orderDetail.getObservationResultList()) {\n                        RAD0106.Instrument instrument = observationResult.getInstrument();\n                        if (ObjectUtil.isNotEmpty(instrument)) {\n                            if (StrUtil.isEmpty(instrumentName)) {\n                                instrumentName = instrument.getName();\n                            }\n                            if (StrUtil.isEmpty(instrumentModel)) {\n                                instrumentModel = instrument.getModel();\n                            }\n                        }\n                        String identifier = observationResult.getObservationIdentifier().getIdentifier();\n                        String observationValue = observationResult.getObservationValue();\n                        if (StrUtil.isEmpty(observationValue)) {\n                            continue;\n                        }\n                        if (StrUtil.equals(identifier,\"JCSJ\")) {\n                            description = observationValue;\n                        }else if (StrUtil.equals(identifier,\"JCJL\")) {\n                            impression = observationValue;\n                        }else if (StrUtil.equals(identifier,\"JCJY\")) {\n                            recommendation = observationValue;\n                        }else if (StrUtil.equals(identifier,\"MYZH\")) {\n                            immunohistochemical = observationValue;\n                        }\n                    }\n                    device.append(String.format(\"%s%s \", instrumentName, instrumentModel));\n\n                    //体检心电报告多写exam_paras表\n                    if (\"P\".equals(patientClass) \u0026\u0026 \"D\".equals(reportClass)) {\n\n                        for (RAD0106.ExamParasInfo examParasInfo : orderDetail.getExamParas()) {\n                            Map\u003cString, Object\u003e examParasInfoMap = new HashMap\u003c\u003e();\n                            examParasInfoMap.put(\"examNo\", reportNo);\n                            examParasInfoMap.put(\"paraCode\", examParasInfo.getParaCode());\n                            examParasInfoMap.put(\"paraName\", examParasInfo.getParaName());\n                            examParasInfoMap.put(\"sortNo\", examParasInfo.getSortNo());\n                            examParasInfoMap.put(\"examResult\", examParasInfo.getExamResult());\n                            examParasInfoMap.put(\"unit\", examParasInfo.getUnit());\n                            examParasInfoMap.put(\"contentText\", examParasInfo.getContentText());\n                            examParasInfoMap.put(\"isAbnormal\", examParasInfo.getIsAbnormal());\n                            examParasInfoMap.put(\"resultDateTime\", examParasInfo.getResultDateTime());\n                            esbSubInspectMapper.insertExamParas(examParasInfoMap);\n                        }\n\n                    }\n                }\n\n                HandleType handleType = body.getReport().getHandleList().stream()\n                        .filter(HandleType -\u003e \"Publish\".equals(HandleType.getType().getIdentifier()))\n                        .findFirst()\n                        .orElse(new HandleType());\n\n                String performedBy = orderGroup.getOrderDetailGroupList().stream()\n                        .findFirst()\n                        .map(RAD0106.OrderDetailGroup::getOrderDetail)\n                        .map(RAD0106.OrderDetail::getFillerDepartment)\n                        .map(CodedElementNOType::getIdentifier)\n                        .orElse(\"\");\n\n                Map\u003cString, Object\u003e examPatMiMap = new HashMap\u003c\u003e();\n                examPatMiMap.put(\"localIdClass\", reportClass);\n                examPatMiMap.put(\"patientLocalId\", patientLocalId);\n                examPatMiMap.put(\"patientId\", patientId);\n                examPatMiMap.put(\"name\", patientName);\n                examPatMiMap.put(\"namePhonetic\", namePhonetic);\n                examPatMiMap.put(\"sex\", \"男,女\".contains(sex) ? sex : \"未知\");\n                examPatMiMap.put(\"dateOfBirth\", DateUtils.parseDate(birthDay));\n                examPatMiMap.put(\"birthPlace\", birthPlace);\n                examPatMiMap.put(\"identity\", identity);\n                examPatMiMap.put(\"chargeType\", chargeType);\n                examPatMiMap.put(\"mailingAddress\", mailingAddress);\n                examPatMiMap.put(\"zipCode\", zipCode);\n                examPatMiMap.put(\"phoneNumber\", phoneNumber);\n\n                Map\u003cString, Object\u003e reportMap = new HashMap\u003c\u003e();\n                reportMap.put(\"examNo\", reportNo);\n                reportMap.put(\"examPara\", examPara);\n                reportMap.put(\"frozenNo\", frozenNo);\n                reportMap.put(\"submittedCheckMaterials\", submittedCheckMaterials);\n                reportMap.put(\"description\", description);\n                reportMap.put(\"impression\", impression);\n                reportMap.put(\"recommendation\", recommendation);\n                reportMap.put(\"isAbnormal\", isAbnormal);\n                reportMap.put(\"useImage\", reportUrl);\n                reportMap.put(\"immunohistochemical\", immunohistochemical);\n                reportMap.put(\"reportName\", handleType.getHandleBy().getName());\n                //查询一下master\n                Map\u003cString, Object\u003e examMaster = esbSubCommonService.hisSimpleQuery(\"EXAM_MASTER\", null, reportNo).getSingle();\n                Map\u003cString, Object\u003e examMasterMap = new HashMap\u003c\u003e();\n                examMasterMap.put(\"examNo\", reportNo);\n                examMasterMap.put(\"localIdClass\", examMaster.get(\"LOCAL_ID_CLASS\"));\n                //examMasterMap.put(\"patientLocalId\", patientLocalId);\n                String labTestResult = body.getReport().getLabTestResult();\n                examMasterMap.put(\"relevantLabTest\", StrUtil.isEmpty(labTestResult) ? \"\" : labTestResult);\n                examMasterMap.put(\"device\", device.toString().trim());\n                examMasterMap.put(\"reportDateTime\", handleType.getHandleTime());\n                examMasterMap.put(\"reporter\", handleType.getHandleBy().getName());\n                examMasterMap.put(\"performedBy\", performedBy);\n                examMasterMap.put(\"identity\", identity);\n                examMasterMap.put(\"chargeType\", chargeType);\n                examMasterMap.put(\"visitNo\", body.getPatientVisit().getVisitNumber());\n                examMasterMap.put(\"visitDate\", DateUtils.parseDate(body.getPatientVisit().getAdmitDateTime()));\n                examMasterMap.put(\"bedNo\", body.getPatientVisit().getPatientLocation().getBed());\n                examMasterMap.put(\"resultStatus\",\"4\");\n                examMasterMap.put(\"chargeIndicator\", \"P\".equals(body.getPatientVisit().getPatientClass()) ? examMaster.get(\"CHARGE_INDICATOR\").toString() : \"\");//体检保留之前的数据\n                if (isOutp) {\n                    examMasterMap.put(\"chargeIndicator\", 1);\n                }\n                examMasterMap.put(\"costs\", examMaster.get(\"COSTS\"));\n                examMasterMap.put(\"charges\", examMaster.get(\"CHARGES\"));\n\n                esbSubInspectMapper.updateExamMaster(examMasterMap);\n                Map\u003cString, Object\u003e examPatMi = esbSubCommonService.hisSimpleQuery(\"EXAM_PAT_MI\", null, reportClass,patientLocalId).getSingle();\n                if (MapUtil.isEmpty(examPatMi)) {\n                    esbSubInspectMapper.insertExamPatMi(examPatMiMap);\n                }\n                Map\u003cString, Object\u003e examReport = esbSubCommonService.hisSimpleQuery(\"EXAM_REPORT\", null, reportNo).getSingle();\n                if (MapUtil.isEmpty(examReport)) {\n                    //插入报告\n                    esbSubInspectMapper.insertExamReport(reportMap);\n                } else {\n                    //更新报告\n                    esbSubInspectMapper.updateExamReport(reportMap);\n                }\n                //如果是门诊则更新检查计价项目\n                if (isOutp) {\n                    Map\u003cString, Object\u003e examBillItemsMap = new HashMap\u003c\u003e();\n                    examBillItemsMap.put(\"examNo\", reportNo);\n                    examBillItemsMap.put(\"verifiedIndicator\", 1);\n                    esbSubInspectMapper.updateExamBillItemsVerifiedIndicator(examBillItemsMap);\n                }\n                dealStatusEnum = DealStatusEnum.SUCCESS;\n            } else {\n                Map\u003cString, Object\u003e examMasterMap = new HashMap\u003c\u003e();\n                examMasterMap.put(\"examNo\", reportNo);\n                examMasterMap.put(\"resultStatus\",\"2\");\n                examMasterMap.put(\"reporter\",\"\");\n                examMasterMap.put(\"costs\",\"\");\n                esbSubInspectMapper.updateExamMasterResultStatus(examMasterMap);\n                esbSubInspectMapper.deleteExamReport(examMasterMap);\n\n                if (\"P\".equals(body.getPatientVisit().getPatientClass()) \u0026\u0026 \"D\".equals(body.getReport().getReportClass().getIdentifier())) {\n                    esbSubCommonService.hisSimpleDelete(\"EXAM_PARA\", reportNo);\n                }\n                dealStatusEnum = DealStatusEnum.SUCCESS;\n            }\n        } catch (Exception e) {\n            log.error(\"检查报告操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"检查报告操作失败\");\n\n    }\n\n    @Transactional\n    @Override\n    public RAD0104_OUTPUT RisMedicalTechProjectConfirmAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        String appId = esbRequestInputDTO.getHead().getAppId();\n        //纳龙心电\n        boolean naLong = StrUtil.equals(appId,\"HIS0117\");\n        boolean langJia = StrUtil.equals(appId,\"HIS0119\");\n        RAD0104 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), RAD0104.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查医技项目操作失败\";\n        //患者信息\n        RAD0104.Demography demography = body.getDemography();\n        String patientId = demography.getPatientIdentifierList()\n                .stream()\n                .filter(identifierListType -\u003e \"PatientID\".equals(identifierListType.getIDType()))\n                .findFirst()\n                .map(IdentifierListType::getIDNumber)\n                .get();\n        RAD0104.Apply apply = body.getOrderGroupList().get(0).getApply();\n        //纳龙心电的费用判断下是否有计费标志：为1则写费用 否则不写\n        boolean naLongCharge = naLong \u0026\u0026 StrUtil.equals(apply.getNlChargeFlag(),\"1\");\n        String patientLocalId = apply.getExamId();\n        String examNo = apply.getApplyNo();\n        String patientClass = body.getPatientVisit().getPatientClass();\n        boolean isInp = \"I\".equals(patientClass);\n        //申请单\n        String visitId = body.getPatientVisit().getVisitNumber();\n        String visitDate = \"\";\n        if (isInp) {\n            visitId = visitId.substring(visitId.indexOf(\"-\") + 1);\n        } else if (\"O\".equals(patientClass)) {\n            visitDate = visitId.substring(0,4) + visitId.substring(4,6) + visitId.substring(6,8);\n            visitId = \"\";\n        }\n\n        RAD0104_OUTPUT output = null;\n        try {\n            if (\"RAD0104\".equals(tranCode)) {  //确认\n                String examClass = \"\";\n                String examSubClass = \"\";\n                String clinSymp = \"\";\n                String physSign = \"\";\n                String relevantLabTest = \"\";\n                String relevantDiag = \"\";\n                String clinDiag = \"\";\n                String examMode = \"\";\n                String examGroup = \"\";\n                String patientSource = \"\";\n                String facility = \"\";\n                String reqDept = \"\";\n                String reqPhysician = \"\";\n                String reqMemo = \"\";\n                Date scheduledDateTime = null;\n                Date reqDateTime = null;\n                String notice = \"\";\n                Integer priorityIndicator = null;\n                String examReason = \"\";\n                BigDecimal costs = new BigDecimal(\"0.0\");\n                String placerDepartmentIdentifier = \"\";\n                String fillerDepartmentIdentifier = \"\";\n                int chargeIndicator = 0;\n                String localIdClass = apply.getType().getIdentifier();\n                String name = demography.getPatientName();\n                String sex = demography.getSex().getText();\n                String dateOfBirth = demography.getBirthday();\n\n                Map\u003cString, Object\u003e examMasterMap = new HashMap\u003c\u003e();\n                List\u003cMap\u003cString, Object\u003e\u003e examBillItemsMapList = new ArrayList\u003c\u003e();\n                List\u003cMap\u003cString, Object\u003e\u003e inpBillDetailMapList = new ArrayList\u003c\u003e();\n                Integer itemNo = 0;\n                //写费用明细\n                if (isInp \u0026\u0026 (naLong || langJia)) {\n                    itemNo = esbSubCommonService.queryCommonMaxNoByParam(patientId, visitId, \"INP_BILL_DETAIL\");\n                    output =  new RAD0104_OUTPUT();\n                }\n                //查询费用类别\n                String chargeType = \"\";\n                if (isInp) {\n                    Map\u003cString, Object\u003e patVisit = esbSubCommonService.hisSimpleQuery(\"PAT_VISIT\", null, visitId,patientId).getSingle();\n                    chargeType = Objects.isNull(patVisit.get(\"CHARGE_TYPE\")) ? \"\" : patVisit.get(\"CHARGE_TYPE\").toString();\n                } else if (\"O\".equals(patientClass)){\n                    Map\u003cString, Object\u003e clinicMaster = esbSubCommonService.hisSimpleQuery(\"CLINIC_MASTER\", null, visitDate,visitId).getSingle();\n                    chargeType = Objects.isNull(clinicMaster.get(\"CHARGE_TYPE\")) ? \"\" : clinicMaster.get(\"CHARGE_TYPE\").toString();\n                }\n                String chargeCode = body.getOrderGroupList().get(0).getOrderDetailGroupList().get(0).getOrderDetail().getServiceInfo().getChargeCode();\n                if (StrUtil.isNotEmpty(chargeCode)) {\n                    chargeIndicator = Integer.parseInt(chargeCode);\n                }\n                //查询检查预约信息\n                Map\u003cString, Object\u003e examAppoints = esbSubCommonService.hisSimpleQuery(\"EXAM_APPOINTS\", null, examNo).getSingle();\n                if (!examAppoints.isEmpty()) {\n                    examClass = Objects.isNull(examAppoints.get(\"EXAM_CLASS\")) ? \"\" : examAppoints.get(\"EXAM_CLASS\").toString();\n                    examSubClass = Objects.isNull(examAppoints.get(\"EXAM_SUB_CLASS\")) ? \"\" : examAppoints.get(\"EXAM_SUB_CLASS\").toString();\n                    relevantDiag = Objects.isNull(examAppoints.get(\"RELEVANT_DIAG\")) ? \"\" : examAppoints.get(\"RELEVANT_DIAG\").toString();\n                    clinDiag = Objects.isNull(examAppoints.get(\"CLIN_DIAG\")) ? \"\" : examAppoints.get(\"CLIN_DIAG\").toString();\n                    examMode = Objects.isNull(examAppoints.get(\"EXAM_MODE\")) ? \"\" : examAppoints.get(\"EXAM_MODE\").toString();\n                    examGroup = Objects.isNull(examAppoints.get(\"EXAM_GROUP\")) ? \"\" : examAppoints.get(\"EXAM_GROUP\").toString();\n                    patientSource = Objects.isNull(examAppoints.get(\"PATIENT_SOURCE\")) ? \"\" : examAppoints.get(\"PATIENT_SOURCE\").toString();\n                    facility = Objects.isNull(examAppoints.get(\"FACILITY\")) ? \"\" : examAppoints.get(\"FACILITY\").toString();\n                    reqDateTime = Objects.isNull(examAppoints.get(\"REQ_DATE_TIME\")) ? new Date() : DateUtils.parseDate(examAppoints.get(\"REQ_DATE_TIME\").toString());\n                    reqDept = Objects.isNull(examAppoints.get(\"REQ_DEPT\")) ? \"\" : examAppoints.get(\"REQ_DEPT\").toString();\n                    reqPhysician = Objects.isNull(examAppoints.get(\"REQ_PHYSICIAN\")) ? \"\" : examAppoints.get(\"REQ_PHYSICIAN\").toString();\n                    reqMemo = Objects.isNull(examAppoints.get(\"REQ_MEMO\")) ? \"\" : examAppoints.get(\"REQ_MEMO\").toString();\n                    scheduledDateTime = Objects.isNull(examAppoints.get(\"SCHEDULED_DATE\")) ? new Date() : DateUtils.parseDate(examAppoints.get(\"SCHEDULED_DATE\"));\n                    notice = Objects.isNull(examAppoints.get(\"NOTICE\")) ? \"\" : examAppoints.get(\"NOTICE\").toString();\n                    priorityIndicator = Objects.isNull(examAppoints.get(\"PRIORITY_INDICATOR\")) ? null : Integer.valueOf(examAppoints.get(\"PRIORITY_INDICATOR\").toString());\n                    examReason = Objects.isNull(examAppoints.get(\"EXAM_REASON\")) ? \"\" : examAppoints.get(\"EXAM_REASON\").toString();\n                    fillerDepartmentIdentifier = Objects.isNull(examAppoints.get(\"PERFORMED_BY\")) ? \"\" : examAppoints.get(\"PERFORMED_BY\").toString();\n                    placerDepartmentIdentifier = Objects.isNull(examAppoints.get(\"REQ_DEPT\")) ? \"\" : examAppoints.get(\"REQ_DEPT\").toString();\n                    clinSymp = Objects.isNull(examAppoints.get(\"CLIN_SYMP\")) ? \"\" : examAppoints.get(\"CLIN_SYMP\").toString();\n                    physSign = Objects.isNull(examAppoints.get(\"PHYS_SIGN\")) ? \"\" : examAppoints.get(\"PHYS_SIGN\").toString();\n                }\n\n                //操作信息\n                HandleType handleType = body.getOrderGroupList().get(0).getCommonOrder().getHandleList().get(0);\n                Date examDateTime = handleType.getHandleTime();\n                String technician = handleType.getHandleBy().getName();\n                String operatorNo = body.getEvent().getOperator().getIDNumber();\n\n                List\u003cRAD0104.ApplyDetail\u003e applyDetailList = body.getOrderGroupList().get(0).getApply().getApplyDetailList();\n                Date billingDateTime = new Date();\n                String inpbillItemNo = \"\";\n                for (RAD0104.ApplyDetail applyDetail : applyDetailList) {\n                    ItemTypeWithQty serviceInfo = applyDetail.getServiceInfo();\n                    String orderCode = serviceInfo.getItemInfo().getIdentifier();\n                    String orderClass = String.valueOf(serviceInfo.getItemInfo().getNO().charAt(0));\n                    CodedElementType fillerDepartment = applyDetail.getFillerDepartment();\n                    if (ObjectUtil.isNotEmpty(fillerDepartment) \u0026\u0026 StrUtil.isNotEmpty(fillerDepartment.getIdentifier())) {\n                        fillerDepartmentIdentifier = fillerDepartment.getIdentifier();\n                    }\n                    //查询出收费项目明细\n                    List\u003cMap\u003cString, Object\u003e\u003e currentPriceList = esbSubCommonService.hisSimpleQuery(\"CURRENT_PRICE_LIST\", null, orderCode, orderClass).getList();\n                    Map\u003cString, Object\u003e examItems = esbSubCommonService.hisSimpleQuery(\"EXAM_ITEMS\", null, examNo, orderCode).getSingle();\n                    for (Map\u003cString, Object\u003e currentPrice : currentPriceList) {\n                        String amount = currentPrice.get(\"AMOUNT\").toString();\n                        BigDecimal currentPriceCosts = new BigDecimal(currentPrice.get(\"PRICE\").toString()).multiply(new BigDecimal(amount));\n                        Map\u003cString, Object\u003e examBillItemsMap = new HashMap\u003c\u003e();\n                        costs = costs.add(currentPriceCosts);\n                        examBillItemsMap.put(\"examNo\", examNo);\n                        examBillItemsMap.put(\"examItemNo\", examItems.get(\"EXAM_ITEM_NO\"));\n                        examBillItemsMap.put(\"chargeItemNo\", currentPrice.get(\"CHARGE_ITEM_NO\"));\n                        examBillItemsMap.put(\"patientId\", patientId);\n                        examBillItemsMap.put(\"visitId\", visitId);\n                        examBillItemsMap.put(\"itemClass\", currentPrice.get(\"CHARGE_ITEM_CLASS\"));\n                        examBillItemsMap.put(\"itemName\", currentPrice.get(\"ITEM_NAME\"));\n                        examBillItemsMap.put(\"itemCode\", currentPrice.get(\"CHARGE_ITEM_CODE\"));\n                        examBillItemsMap.put(\"itemSpec\", currentPrice.get(\"ITEM_SPEC\"));\n                        examBillItemsMap.put(\"amount\", currentPrice.get(\"AMOUNT\"));\n                        examBillItemsMap.put(\"units\", currentPrice.get(\"UNITS\"));\n                        examBillItemsMap.put(\"orderedBy\", placerDepartmentIdentifier);\n                        examBillItemsMap.put(\"performedBy\", fillerDepartmentIdentifier);\n                        examBillItemsMap.put(\"costs\", currentPriceCosts);\n                        examBillItemsMap.put(\"charges\", currentPriceCosts);\n                        examBillItemsMap.put(\"billingDateTime\", billingDateTime);\n                        examBillItemsMap.put(\"operatorNo\", operatorNo);\n                        examBillItemsMap.put(\"verifiedIndicator\", 0);\n                        examBillItemsMapList.add(examBillItemsMap);\n\n                        //只有纳龙心电才写费用明细\n                        if ((naLong) \u0026\u0026 isInp \u0026\u0026 naLongCharge) {\n                            Map\u003cString, Object\u003e inpBillDetailMap = new HashMap\u003c\u003e();\n                            inpBillDetailMap.put(\"patientId\", patientId);\n                            inpBillDetailMap.put(\"visitId\", visitId);\n                            inpBillDetailMap.put(\"itemNo\", itemNo);\n                            inpBillDetailMap.put(\"itemClass\", currentPrice.get(\"CHARGE_ITEM_CLASS\"));\n                            inpBillDetailMap.put(\"itemName\", currentPrice.get(\"ITEM_NAME\"));\n                            inpBillDetailMap.put(\"itemCode\", currentPrice.get(\"CHARGE_ITEM_CODE\"));\n                            inpBillDetailMap.put(\"itemSpec\", currentPrice.get(\"ITEM_SPEC\"));\n                            inpBillDetailMap.put(\"amount\", currentPrice.get(\"AMOUNT\"));\n                            inpBillDetailMap.put(\"units\", currentPrice.get(\"UNITS\"));\n                            inpBillDetailMap.put(\"orderedBy\", placerDepartmentIdentifier);\n                            inpBillDetailMap.put(\"performedBy\", fillerDepartmentIdentifier);\n                            inpBillDetailMap.put(\"costs\", currentPriceCosts);\n                            inpBillDetailMap.put(\"charges\", currentPriceCosts);\n                            inpBillDetailMap.put(\"billingDateTime\", billingDateTime);\n                            inpBillDetailMap.put(\"operatorNo\", operatorNo);\n                            inpBillDetailMap.put(\"rcptNo\", \"\");\n                            inpBillDetailMap.put(\"price\", currentPriceCosts);\n                            inpBillDetailMap.put(\"specialCharges\", \"\");\n                            inpBillDetailMap.put(\"insurTradeSerial\", \"\");\n                            inpBillDetailMap.put(\"transFlag\", \"\");\n                            inpBillDetailMap.put(\"insurFlag\", \"\");\n                            inpBillDetailMapList.add(inpBillDetailMap);\n                            inpbillItemNo = inpbillItemNo + \"|\" + itemNo;\n                            itemNo++;\n                        }\n                    }\n                }\n                //汇总下金额\n                Map\u003cString, Object\u003e examBillItems = esbSubCommonService.hisSimpleQuery(\"EXAM_BILL_ITEMS\", null, examNo).getSingle();\n                if (MapUtil.isNotEmpty(examBillItems)) {\n                    costs = costs.add(new BigDecimal(examBillItems.get(\"COSTS\").toString()));\n                }\n                examMasterMap.put(\"examNo\", examNo);\n                examMasterMap.put(\"localIdClass\", localIdClass);\n                examMasterMap.put(\"patientLocalId\", patientLocalId);\n                examMasterMap.put(\"spmRecvedDate\", examDateTime);\n                examMasterMap.put(\"patientId\", patientId);\n                examMasterMap.put(\"visitId\", visitId);\n                examMasterMap.put(\"name\", name);\n                examMasterMap.put(\"sex\", sex);\n                examMasterMap.put(\"dateOfBirth\", DateUtils.parseDate(dateOfBirth));\n                examMasterMap.put(\"examClass\", examClass);\n                examMasterMap.put(\"examSubClass\", examSubClass);\n                examMasterMap.put(\"clinSymp\", clinSymp);\n                examMasterMap.put(\"physSign\", physSign);\n                examMasterMap.put(\"relevantLabTest\", relevantLabTest);\n                examMasterMap.put(\"relevantDiag\", relevantDiag);\n                examMasterMap.put(\"clinDiag\", StrUtil.sub(clinDiag,0,80));\n                examMasterMap.put(\"examMode\", examMode);\n                examMasterMap.put(\"examGroup\", examGroup);\n                examMasterMap.put(\"device\", \"\");\n                examMasterMap.put(\"performedBy\", fillerDepartmentIdentifier);\n                examMasterMap.put(\"patientSource\", patientSource);\n                examMasterMap.put(\"facility\", facility);\n                examMasterMap.put(\"reqDateTime\", reqDateTime);\n                examMasterMap.put(\"reqDept\", reqDept);\n                examMasterMap.put(\"reqPhysician\", reqPhysician);\n                examMasterMap.put(\"reqMemo\", reqMemo);\n                examMasterMap.put(\"scheduledDateTime\", scheduledDateTime);\n                examMasterMap.put(\"notice\", notice);\n                examMasterMap.put(\"examDateTime\", examDateTime);\n                examMasterMap.put(\"technician\", technician);\n                examMasterMap.put(\"resultStatus\", \"2\");\n                examMasterMap.put(\"costs\", costs);\n                examMasterMap.put(\"charges\", costs);\n                examMasterMap.put(\"chargeIndicator\", chargeIndicator);\n                if (isInp) {\n                    examMasterMap.put(\"chargeIndicator\", \"\");\n                }\n                examMasterMap.put(\"identity\", \"\");\n                examMasterMap.put(\"chargeType\", chargeType);\n                examMasterMap.put(\"priorityIndicator\", priorityIndicator);\n                examMasterMap.put(\"examReason\", examReason);\n                examMasterMap.put(\"reportDateTime\", \"\");\n                examMasterMap.put(\"reporter\", \"\");\n                examMasterMap.put(\"confirmDoct\", \"\");\n                examMasterMap.put(\"studyUid\", \"\");\n                examMasterMap.put(\"rptstatus\", \"\");\n                examMasterMap.put(\"printStatus\", \"\");\n                examMasterMap.put(\"examSubdept\", \"\");\n                examMasterMap.put(\"priorityDesc\", \"\");\n\n                if (CollectionUtil.isNotEmpty(examBillItemsMapList)) {\n                    Map\u003cString, Object\u003e examMaster = esbSubCommonService.hisSimpleQuery(\"EXAM_MASTER\", null, examNo).getSingle();\n                    if (MapUtil.isEmpty(examMaster)) {\n                        esbSubInspectMapper.insertExamMaster(examMasterMap);\n                    } else {\n                        // 体检更新spmRecvedDate，resultStatus，examDateTime，technician\n                        if (\"P\".equals(patientClass)) {\n                            esbSubInspectMapper.updateExamMasterByP(examMasterMap);\n                        } else {\n                            esbSubInspectMapper.updateExamMaster(examMasterMap);\n                        }\n                    }\n                    examBillItemsMapList.forEach(item -\u003e {\n                        if (CollectionUtil.isNotEmpty(inpBillDetailMapList)) {\n                            item.put(\"verifiedIndicator\", 1);\n                        }\n                        esbSubInspectMapper.insertExamBillItems(item);\n                    });\n                    if (isInp \u0026\u0026 (naLong) \u0026\u0026 naLongCharge \u0026\u0026 CollectionUtil.isNotEmpty(inpBillDetailMapList)) {\n                        for (Map\u003cString, Object\u003e item : inpBillDetailMapList) {\n                            esbSubInspectMapper.insertInpBillDetail(item);\n                        }\n                        //返回一个结构化数据\n                        output.setPatientId(patientId);\n                        output.setInpbillItemNo(inpbillItemNo.substring(1));\n                    }\n                    dealStatusEnum = DealStatusEnum.SUCCESS;\n                } else {\n                    errorMsg = \"检查医技项目确认未解析到项目信息\";\n                }\n            } else {\n                Map\u003cString,Object\u003e cancelMap = new HashMap\u003c\u003e();\n                cancelMap.put(\"examNo\",examNo);\n                cancelMap.put(\"chargeItemNo\",\"\");\n                cancelMap.put(\"reporter\",\"\");\n                List\u003cRAD0104.ApplyDetail\u003e applyDetailList = apply.getApplyDetailList();\n                List\u003cString\u003e examItemNos = Lists.newArrayListWithExpectedSize(8);\n                if (CollectionUtil.isNotEmpty(applyDetailList)) {\n                    for (RAD0104.ApplyDetail applyDetail : applyDetailList) {\n                        String examItemNo = applyDetail.getApplyDetailNo();\n                        if (StrUtil.isEmpty(examItemNo)) {\n                            continue;\n                        }\n                        examItemNos.add(examItemNo);\n                        cancelMap.put(\"examItemNo\",examItemNo);\n                        esbSubInspectMapper.deleteExamBillItem(cancelMap);\n                    }\n                } else {\n                    esbSubInspectMapper.deleteExamBillItem(cancelMap);\n                }\n\n                //汇总下取消金额\n                BigDecimal surplusCosts = new BigDecimal(0);\n                if (CollectionUtil.isNotEmpty(examItemNos)) {\n                    List\u003cMap\u003cString, Object\u003e\u003e examBillItemsList = esbSubCommonService.hisSimpleQuery(\"EXAM_BILL_ITEMS_S\", null, examNo).getList();\n                    for (Map\u003cString, Object\u003e item : examBillItemsList) {\n                        if (examItemNos.contains(item.get(\"EXAM_ITEM_NO\").toString())) {\n                            continue;\n                        }\n                        surplusCosts = surplusCosts.add(new BigDecimal(item.get(\"COSTS\").toString()));\n                    }\n                }\n                cancelMap.put(\"resultStatus\",\"\");\n                //剩余金额为0 即全部取消，医技取消更新 ExamMaster 状态 为 退回：5\n                if (surplusCosts.compareTo(new BigDecimal(0)) == 0) {\n                    cancelMap.put(\"resultStatus\",\"5\");\n                }\n                cancelMap.put(\"costs\",surplusCosts);\n                esbSubInspectMapper.updateExamMasterResultStatus(cancelMap);\n                //获取 inp_Bill_Detail -\u003e  Item_No\n                if (naLongCharge) {\n                    List\u003cRAD0104.OrderGroup\u003e orderGroupList = body.getOrderGroupList();\n                    for (RAD0104.OrderGroup orderGroup : orderGroupList) {\n                        RAD0104.CommonOrder commonOrder = orderGroup.getCommonOrder();\n                        List\u003cIdentifierListType\u003e orderIdList = commonOrder.getOrderIdList();\n                        String inpBillDetailItemNos = orderIdList.stream()\n                                .filter(identifierListType -\u003e \"HISInpBillDetailNo\".equals(identifierListType.getIDType()))\n                                .findFirst()\n                                .map(IdentifierListType::getIDNumber)\n                                .orElse(\"\");\n                        //取消确认\n                        if (StrUtil.isNotEmpty(inpBillDetailItemNos)) {\n                            String[] inpBillDetailItemNoList = inpBillDetailItemNos.split(\"\\\\|\");\n                            for (String inpBillDetailItemNo : inpBillDetailItemNoList) {\n                                Map\u003cString,Object\u003e updateInpBillDetailMap = new HashMap\u003c\u003e();\n                                updateInpBillDetailMap.put(\"itemNo\",inpBillDetailItemNo);\n                                updateInpBillDetailMap.put(\"patientId\",patientId);\n                                updateInpBillDetailMap.put(\"visitId\",visitId);\n                                esbSubInspectMapper.updateTransFlagAndInsertInpBillDetail(updateInpBillDetailMap);\n                            }\n                        }\n                    }\n                }\n                dealStatusEnum = DealStatusEnum.SUCCESS;\n            }\n        } catch (Exception e) {\n            log.error(\"检查医技项目操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"检查医技项目操作失败\");\n        return output;\n    }\n\n    @Transactional\n    @Override\n    public RAD0111_OUTPUT risBillAdd(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        //String appId = esbRequestInputDTO.getHead().getAppId();\n        //boolean langJia = StrUtil.equals(appId,\"HIS0119\");\n        RAD0111 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), RAD0111.class);\n        boolean isInp = \"I\".equals(body.getPatientVisit().getPatientClass());\n        if (!isInp) {\n            throw new ServiceException(\"参数校验错误：患者(PatientClass)不是住院患者！\");\n        }\n        String visitId = body.getPatientVisit().getVisitNumber();\n        visitId = visitId.substring(visitId.indexOf(\"-\") + 1);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查医技项目操作失败\";\n        //患者信息\n        RAD0111.Demography demography = body.getDemography();\n        String patientId = demography.getPatientIdentifierList()\n                .stream()\n                .filter(identifierListType -\u003e \"PatientID\".equals(identifierListType.getIDType()))\n                .findFirst()\n                .map(IdentifierListType::getIDNumber)\n                .get();\n        RAD0111.Apply apply = body.getOrderGroupList().get(0).getApply();\n        String operatorNo = body.getEvent().getOperator().getIDNumber();\n        String examNo = apply.getApplyNo();\n        //退费标志：true(退费)\n        boolean refundFlag = false;\n        String anyPrice = body.getOrderGroupList().get(0).getOrderDetailGroupList()\n                .get(0).getOrderDetail().getServiceInfo().getPrice();\n        if (StrUtil.isEmpty(anyPrice)) {\n            throw new ServiceException(\"参数校验错误：价格(Price)不能为空！\");\n        }\n        //计费退费标志\n        if (new BigDecimal(anyPrice).compareTo(BigDecimal.ZERO) \u003c 0) {\n            refundFlag = true;\n        }\n        //*********************查询检查计价项目*******************/\n        List\u003cMap\u003cString, Object\u003e\u003e examBillItems = esbSubCommonService.hisSimpleQuery(\"EXAM_BILL_ITEMS_S\", null, examNo).getList();\n        //多个打包项目一起发，按打包项目编码码分组\n        Map\u003cString, List\u003cMap\u003cString, Object\u003e\u003e\u003e examItemNoToMap = Maps.newHashMap();\n        if (CollectionUtil.isNotEmpty(examBillItems)) {\n            examItemNoToMap = examBillItems\n                    .stream()\n                    .collect(Collectors.groupingBy(item -\u003e item.get(\"EXAM_ITEM_NO\").toString()));\n        }\n        //*********************查询打包项目*******************/\n        List\u003cMap\u003cString, Object\u003e\u003e examItems = esbSubCommonService.hisSimpleQuery(\"EXAM_ITEMS_S\", null, examNo).getList();\n        Map\u003cString, Map\u003cString, Object\u003e\u003e examItemNoToExamItemMap = Maps.newHashMap();\n        if (CollectionUtil.isNotEmpty(examItems)) {\n            examItemNoToExamItemMap = examItems\n                    .stream()\n                    .collect(Collectors.toMap(item -\u003e item.get(\"EXAM_ITEM_NO\").toString(), o -\u003e o));\n        }\n        //查询费用明细序号\n        Integer itemNo = esbSubCommonService.queryCommonMaxNoByParam(patientId, visitId, \"INP_BILL_DETAIL\");\n        //查询检查预约信息\n        String placerDepartmentIdentifier = \"\";\n        String fillerDepartmentIdentifier = \"\";\n        Map\u003cString, Object\u003e examAppoints = esbSubCommonService.hisSimpleQuery(\"EXAM_APPOINTS\", null, examNo).getSingle();\n        if (!examAppoints.isEmpty()) {\n            fillerDepartmentIdentifier = Objects.isNull(examAppoints.get(\"PERFORMED_BY\")) ? \"\" : examAppoints.get(\"PERFORMED_BY\").toString();\n            placerDepartmentIdentifier = Objects.isNull(examAppoints.get(\"REQ_DEPT\")) ? \"\" : examAppoints.get(\"REQ_DEPT\").toString();\n        }\n        Date billingDateTime = new Date();\n        List\u003cMap\u003cString, Object\u003e\u003e inpBillDetailMapList = new ArrayList\u003c\u003e();\n        List\u003cMap\u003cString, Object\u003e\u003e examBillItemsMapList = new ArrayList\u003c\u003e();\n        //获取最大的CHARGE_ITEM_NO\n        int maxChargeItemNo = 1;\n        if (CollectionUtil.isNotEmpty(examBillItems)) {\n            Map\u003cString, Object\u003e maxExamBillItem = examBillItems.get(0);\n            maxChargeItemNo = Integer.parseInt(maxExamBillItem.get(\"CHARGE_ITEM_NO\").toString()) + 1;\n        }\n        //汇总下金额\n        BigDecimal costs = new BigDecimal(\"0.0\");\n        Map\u003cString, Object\u003e examBillItemsCosts = esbSubCommonService.hisSimpleQuery(\"EXAM_BILL_ITEMS\", null, examNo).getSingle();\n        if (MapUtil.isNotEmpty(examBillItemsCosts)) {\n            costs = costs.add(new BigDecimal(examBillItemsCosts.get(\"COSTS\").toString()));\n        }\n        //删除或者修改的 examBillItemList\n        List\u003cMap\u003cString, Object\u003e\u003e updateExamBillItemMapList = Lists.newArrayList();\n        List\u003cMap\u003cString, Object\u003e\u003e deleteExamBillItemMapList = Lists.newArrayList();\n        //获取计费返回的计费项目编码\n        for (RAD0111.OrderGroup orderGroup : body.getOrderGroupList()) {\n            //获取打包项目编码 -\u003e examItemNo\n            String examItemNo = orderGroup.getCommonOrder().getOrderIdList().stream()\n                    .filter(identifierListType -\u003e \"HISPreOrderNo\".equals(identifierListType.getIDType()))\n                    .findFirst()\n                    .map(IdentifierListType::getIDNumber)\n                    .orElseThrow(() -\u003e new ServiceException(\"业务处理异常：未获取到打包项目编码！\"));\n            List\u003cMap\u003cString, Object\u003e\u003e examBillItemList = examItemNoToMap.get(examItemNo);\n            //退费计算项目数量差值：退费数量 = 收费数量则删除 否则修改收费数量\n            Map\u003cString, Map\u003cString, Object\u003e\u003e chargeItemNoToMap = Maps.newHashMap();\n            if (refundFlag) {\n                if (CollectionUtil.isNotEmpty(examBillItemList)) {\n                    //按收费项目编码分组\n                    chargeItemNoToMap = examBillItemList\n                            .stream()\n                            .collect(Collectors.toMap(item -\u003e item.get(\"CHARGE_ITEM_NO\").toString(), o -\u003e o));\n                }\n            }\n            for (RAD0111.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                RAD0111.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n                RAD0111.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n                CodedElementNOType itemInfo = serviceInfo.getItemInfo();\n                String itemSpec = itemInfo.getNO();\n                String itemCode = itemInfo.getIdentifier();\n                String itemClass = serviceInfo.getClazz().getIdentifier();\n                //查询检查计价项目\n                Map\u003cString, Object\u003e currentPriceListMap = esbSubCommonService\n                        .hisSimpleQuery(\"CURRENT_PRICE_LIST_S\", null, itemClass,itemCode,itemSpec).getSingle();\n                if (MapUtil.isEmpty(currentPriceListMap)) {\n                    throw new ServiceException(\"未查询到价表信息！\");\n                }\n                BigDecimal multCosts = new BigDecimal(currentPriceListMap.get(\"PRICE\").toString())\n                        .multiply(new BigDecimal(serviceInfo.getItemqty()));\n                //住院费用明细\n                Map\u003cString, Object\u003e inpBillDetailMap = new HashMap\u003c\u003e();\n                inpBillDetailMap.put(\"patientId\", patientId);\n                inpBillDetailMap.put(\"visitId\", visitId);\n                inpBillDetailMap.put(\"itemNo\", itemNo++);\n                inpBillDetailMap.put(\"itemClass\", currentPriceListMap.get(\"ITEM_CLASS\"));\n                inpBillDetailMap.put(\"itemName\", currentPriceListMap.get(\"ITEM_NAME\"));\n                inpBillDetailMap.put(\"itemCode\", currentPriceListMap.get(\"ITEM_CODE\"));\n                inpBillDetailMap.put(\"itemSpec\", currentPriceListMap.get(\"ITEM_SPEC\"));\n                inpBillDetailMap.put(\"amount\", serviceInfo.getItemqty());\n                inpBillDetailMap.put(\"units\", currentPriceListMap.get(\"UNITS\"));\n                inpBillDetailMap.put(\"orderedBy\", placerDepartmentIdentifier);\n                inpBillDetailMap.put(\"performedBy\", fillerDepartmentIdentifier);\n                inpBillDetailMap.put(\"costs\", multCosts);\n                inpBillDetailMap.put(\"charges\", multCosts);\n                inpBillDetailMap.put(\"billingDateTime\", billingDateTime);\n                inpBillDetailMap.put(\"operatorNo\", operatorNo);\n                inpBillDetailMap.put(\"rcptNo\", \"\");\n                inpBillDetailMap.put(\"specialCharges\", \"\");\n                inpBillDetailMap.put(\"insurTradeSerial\", \"\");\n                inpBillDetailMap.put(\"transFlag\", \"\");\n                inpBillDetailMap.put(\"insurFlag\", \"\");\n                inpBillDetailMap.put(\"price\", multCosts);\n                if (refundFlag) {\n                    BigDecimal negateAmount = new BigDecimal(serviceInfo.getItemqty()).negate();\n                    inpBillDetailMap.put(\"amount\", negateAmount);\n                    inpBillDetailMap.put(\"price\", multCosts.negate());\n                    inpBillDetailMap.put(\"costs\", multCosts.negate());\n                    inpBillDetailMap.put(\"charges\", multCosts.negate());\n                }\n                inpBillDetailMapList.add(inpBillDetailMap);\n                //退费计算项目数量差值：退费数量 = 收费数量则删除 小于修改收费数量\n                if (refundFlag) {\n                    String chargeItemNo = orderDetail.getOrderDetailIdList().stream()\n                            .filter(identifierListType -\u003e \"HISPreOrderDetailNo\".equals(identifierListType.getIDType()))\n                            .findFirst()\n                            .map(IdentifierListType::getIDNumber)\n                            .orElseThrow(() -\u003e new ServiceException(\"业务处理异常：未获取到计费项目编码！\"));\n                    Map\u003cString, Object\u003e examBillItemMap = chargeItemNoToMap.get(chargeItemNo);\n                    if (MapUtil.isNotEmpty(examBillItemMap)) {\n                        int amount = Integer.parseInt(examBillItemMap.get(\"AMOUNT\").toString());\n                        int itemqty = Integer.parseInt(serviceInfo.getItemqty());\n                        Map\u003cString,Object\u003e updateMap = new HashMap\u003c\u003e();\n                        updateMap.put(\"examNo\",examNo);\n                        updateMap.put(\"chargeItemNo\",examBillItemMap.get(\"CHARGE_ITEM_NO\"));\n                        updateMap.put(\"examItemNo\",examBillItemMap.get(\"EXAM_ITEM_NO\"));\n                        if (amount == itemqty) {\n                            deleteExamBillItemMapList.add(updateMap);\n                        } else if (itemqty \u003c amount) {\n                            String price = serviceInfo.getPrice();\n                            BigDecimal examBillItemCosts = new BigDecimal(examBillItemMap.get(\"COSTS\").toString());\n                            BigDecimal subtractCosts = examBillItemCosts.subtract(new BigDecimal(price));\n                            examBillItemMap.put(\"AMOUNT\",amount - itemqty);\n                            examBillItemMap.put(\"COSTS\",subtractCosts);\n                            examBillItemMap.put(\"CHARGES\",subtractCosts);\n                            updateMap.put(\"amount\",amount - itemqty);\n                            updateMap.put(\"costs\",subtractCosts);\n                            updateMap.put(\"charges\",subtractCosts);\n                            updateExamBillItemMapList.add(updateMap);\n                        } else {\n                            throw new ServiceException(\"参数校验错误：退费数量不能大于收费数量！\");\n                        }\n                    }\n                    continue;\n                }\n                costs = costs.add(multCosts);\n                Map\u003cString, Object\u003e examBillItemsMap = new HashMap\u003c\u003e();\n                examBillItemsMap.put(\"examNo\", examNo);\n                examBillItemsMap.put(\"examItemNo\", examItemNo);\n                examBillItemsMap.put(\"chargeItemNo\", maxChargeItemNo++);\n                examBillItemsMap.put(\"patientId\", patientId);\n                examBillItemsMap.put(\"visitId\", visitId);\n                examBillItemsMap.put(\"itemClass\", currentPriceListMap.get(\"ITEM_CLASS\"));\n                examBillItemsMap.put(\"itemName\", currentPriceListMap.get(\"ITEM_NAME\"));\n                examBillItemsMap.put(\"itemCode\", itemCode);\n                examBillItemsMap.put(\"itemSpec\", itemSpec);\n                examBillItemsMap.put(\"amount\", serviceInfo.getItemqty());\n                examBillItemsMap.put(\"units\", currentPriceListMap.get(\"UNITS\"));\n                examBillItemsMap.put(\"orderedBy\", placerDepartmentIdentifier);\n                examBillItemsMap.put(\"performedBy\", fillerDepartmentIdentifier);\n                examBillItemsMap.put(\"costs\", multCosts);\n                examBillItemsMap.put(\"charges\", multCosts);\n                examBillItemsMap.put(\"billingDateTime\", billingDateTime);\n                examBillItemsMap.put(\"operatorNo\", operatorNo);\n                examBillItemsMap.put(\"verifiedIndicator\", 1);\n                examBillItemsMapList.add(examBillItemsMap);\n            }\n        }\n        //退费获取需要修改EXAM_ITEMS的金额\n        List\u003cMap\u003cString, Object\u003e\u003e updateExamItemMapList = Lists.newArrayList();\n        for (RAD0111.OrderGroup orderGroup : body.getOrderGroupList()) {\n            if (!refundFlag) {\n                break;\n            }\n            //获取打包项目编码 -\u003e examItemNo\n            String examItemNo = orderGroup.getCommonOrder().getOrderIdList().stream()\n                    .filter(identifierListType -\u003e \"HISPreOrderNo\".equals(identifierListType.getIDType()))\n                    .findFirst()\n                    .map(IdentifierListType::getIDNumber)\n                    .get();\n            Map\u003cString, Object\u003e examItemMap = examItemNoToExamItemMap.get(examItemNo);\n            //如果没有保存金额不需要修改\n            Object examItemCosts = examItemMap.get(\"COSTS\");\n            if (ObjectUtil.isEmpty(examItemCosts)) {\n                continue;\n            }\n            BigDecimal subtractCosts = new BigDecimal(examItemCosts.toString()).subtract(costs);\n            Map\u003cString, Object\u003e updateExamItemMap = Maps.newHashMap();\n            updateExamItemMap.put(\"EXAM_NO\",examNo);\n            updateExamItemMap.put(\"EXAM_ITEM_NO\",examItemNo);\n            updateExamItemMap.put(\"COSTS\",subtractCosts);\n            updateExamItemMapList.add(updateExamItemMap);\n        }\n        RAD0111_OUTPUT output = new RAD0111_OUTPUT();\n        try {\n            //修改项目总金额\n            Map\u003cString, Object\u003e examMasterMap = new HashMap\u003c\u003e();\n            examMasterMap.put(\"examNo\", examNo);\n            examMasterMap.put(\"costs\", costs);\n            examMasterMap.put(\"charges\", costs);\n            esbSubInspectMapper.updateExamMasterCosts(examMasterMap);\n            //收费\n            if (!refundFlag) {\n                output.setApplyNo(examNo);\n                List\u003cRAD0111_OUTPUT.ExamItems\u003e examItemsList = Lists.newArrayList();\n                Map\u003cString, List\u003cMap\u003cString, Object\u003e\u003e\u003e examItemNo2Map = examBillItemsMapList\n                        .stream()\n                        .collect(Collectors.groupingBy(item -\u003e item.get(\"examItemNo\").toString()));\n                //保存检查计价项目\n                examItemNo2Map.forEach((examItemNo,examItemsMap) -\u003e {\n                    RAD0111_OUTPUT.ExamItems outPutExamItems = new RAD0111_OUTPUT.ExamItems();\n                    outPutExamItems.setHisPreOrderNo(examItemNo);\n                    List\u003cRAD0111_OUTPUT.ExamBillItems\u003e billItemsList = Lists.newArrayListWithExpectedSize(examItemsMap.size());\n                    for (Map\u003cString, Object\u003e item : examItemsMap) {\n                        RAD0111_OUTPUT.ExamBillItems  billItems = new RAD0111_OUTPUT.ExamBillItems();\n                        billItems.setHisPreOrderDetailNo(item.get(\"chargeItemNo\").toString());\n                        billItemsList.add(billItems);\n                        esbSubInspectMapper.insertExamBillItems(item);\n                    }\n                    outPutExamItems.setOrderDetailIdList(billItemsList);\n                    examItemsList.add(outPutExamItems);\n                });\n                output.setOrderIdList(examItemsList);\n            } else {\n                //修改 exam_Bill_Items\n                if (CollectionUtil.isNotEmpty(updateExamBillItemMapList)) {\n                    for (Map\u003cString, Object\u003e item : updateExamBillItemMapList) {\n                        esbSubInspectMapper.updateExamBillItemsCosts(item);\n                    }\n                }\n                //删除 exam_Bill_Items\n                if (CollectionUtil.isNotEmpty(deleteExamBillItemMapList)) {\n                    for (Map\u003cString, Object\u003e item : deleteExamBillItemMapList) {\n                        esbSubInspectMapper.deleteExamBillItem(item);\n                    }\n                }\n                //修改exam_Items金额\n                if (CollectionUtil.isNotEmpty(updateExamItemMapList)) {\n                    for (Map\u003cString, Object\u003e item : updateExamItemMapList) {\n                        esbSubInspectMapper.updateExamItemsCosts(item);\n                    }\n                }\n            }\n            //保存住院费用明细\n            for (Map\u003cString, Object\u003e item : inpBillDetailMapList) {\n                esbSubInspectMapper.insertInpBillDetail(item);\n            }\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"住院检查收费项目操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"检查医技项目操作失败\");\n        return output;\n    }\n\n\n    @Override\n//    @Transactional(rollbackFor = Exception.class)\n    public Object outpOrdersAddAndUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n\n        log.info(\"门诊处方操作请求入参：\" + JSON.toJSONString(esbRequestInputDTO));\n\n        String appId = esbRequestInputDTO.getHead().getAppId();\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        ORD0101 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), ORD0101.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"门诊处方操作失败\";\n        String patientId = body.fetchPatientId();\n\n        List\u003cMap\u003cString, Object\u003e\u003e resultMapList = new ArrayList\u003c\u003e();\n\n        try {\n\n            String orderControl = body.getOrderGroupList().get(0).getCommonOrder().getOrderControl();\n\n            // 手动开启事务\n            DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();\n            def1.setName(\"Transaction1\");\n            def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n            TransactionStatus status1 = transactionManager.getTransaction(def1);\n\n            Map\u003cObject, Map\u003cString, Object\u003e\u003e forAutoBillMap = new HashMap\u003c\u003e();\n\n            try {\n                if (\"NW\".equals(orderControl)) {\n                    //新增\n\n                    String visitNum = body.getPatientVisit().getVisitNumber();\n                    String visitDate = visitNum.substring(0, 8);\n                    String visitNo = visitNum.substring(8);\n\n                    List\u003cORD0101.OrderGroup\u003e orderGroupList = body.getOrderGroupList();\n\n                    String chargeType = body.getPatientVisit().getChargeType();\n\n                    //医嘱\n                    for (ORD0101.OrderGroup orderGroup : orderGroupList) {\n                        HandleType handleType = orderGroup.getCommonOrder().fetchHandleBy(HandleTypeEnum.Entry, false);\n                        PersonTypeWithDept personTypeWithDept = handleType.getHandleBy();\n                        String doctorName = personTypeWithDept.getName();\n                        String doctorNO = personTypeWithDept.getNo();\n\n                        //需注意：同一事务中，每次查询获得的serialNo为同一值\n                        Map\u003cString, Object\u003e resultMap = new HashMap\u003c\u003e();\n\n                        // CISOrderNo 医生站ID，用于对照结果\n                        String cisOrderNo = orderGroup.fetchOrderId(OrderIdTypeEnum.CISOrderNo);\n                        resultMap.put(\"cisOrderNo\", cisOrderNo);\n\n                        Map\u003cString, Object\u003e orderMap = new HashMap\u003c\u003e();\n                        String orderClass = orderGroup.getOrderDetailGroupList().get(0).getOrderDetail().getOrderClass().getIdentifier();\n                        //中药、西药写OUTP_PRESC 其余写OUTP_TREAT_REC\n                        boolean isWritePresc = \"A,B\".contains(orderClass) \u0026\u0026 orderGroup.getOrderDetailGroupList().get(0).getPharmacyDetail() != null;\n\n                        // 开单时间\n                        Date handleDate = handleType.getHandleTimeOfNotNull(\"开立处方缺少开单时间\");\n\n                        // 处方主表\n                        orderMap.put(\"patientId\", patientId);\n                        orderMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                        orderMap.put(\"visitNo\", Long.valueOf(visitNo));\n                        orderMap.put(\"orderedBy\", personTypeWithDept.getDepartment().getIdentifier());\n                        orderMap.put(\"doctor\", doctorName);\n                        orderMap.put(\"doctorNo\", doctorNO);\n                        orderMap.put(\"diagnosisDesc\", null);\n                        orderMap.put(\"orderClass\", orderClass);\n                        orderMap.put(\"orderDate\", handleDate);\n\n                        esbSubInspectMapper.insertOutpOrders(orderMap);\n\n                        // 处方主键\n                        String serialNoOut = String.valueOf(orderMap.get(\"SERIAL_NO_OUT\"));\n                        // 处方号\n                        Object prescNoOut = orderMap.get(\"PRESC_NO_OUT\");\n                        // TreatTemplateOrder 写入标记\n                        boolean treatTemplateOrderFlag = false;\n\n\n                        resultMap.put(\"serialNo\", serialNoOut);\n                        resultMap.put(\"details\", new ArrayList\u003c\u003e());\n                        log.info(\"门诊处方新增--------serialNo:{}\", serialNoOut);\n\n                        // 成组序号处理\n                        Map\u003cString, Integer\u003e groupIdxMap = new HashMap\u003c\u003e();\n                        Map\u003cString, Integer\u003e groupBeginItemNoMap = new HashMap\u003c\u003e();\n\n                        // 医嘱模板信息\n                        CodedElementType template = orderGroup.getCommonOrder().getTemplate();\n                        String templateCode = template == null ? null : template.getIdentifier();\n                        String templateName = template == null ? null : template.getText();\n\n                        // 外购\n                        boolean hasWg = false;\n\n                        int treatItemNo = 0;\n\n\n                        // 慢特病标志\n                        String chronicOrSpecialFlag = orderGroup.getCommonOrder().getChronicOrSpecialFlag();\n\n                        //医嘱详情\n                        for (ORD0101.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n\n                            // TODO 外购、院前\n                            // 2024-06-04 958医院无院前\n\n                            ORD0101.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n                            ORD0101.PharmacyDetail pharmacyDetail = orderDetailGroup.getPharmacyDetail();\n                            ORD0101.TreatmentRoute treatmentRoute = orderDetailGroup.getTreatmentRoute();\n\n                            // 外购\n                            String outPurchaseFlag = pharmacyDetail == null ? null : pharmacyDetail.getPharmacyOrder().getExtentionList()\n                                    .stream()\n                                    .filter(extention -\u003e \"OutPurchaseFlag\".equals(extention.getCodingSystem()))\n                                    .findFirst()\n                                    .map(x -\u003e {\n                                        return (x.getText() == null || x.getText().isEmpty()) ? x.getIdentifier() : x.getText();\n                                    })\n                                    .orElse(null);\n                            boolean isWg = \"1\".equals(outPurchaseFlag);\n                            hasWg = isWg;\n\n                            //项目信息\n                            ORD0101.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n                            ORD0101.ChargeInfo chargeInfo =\n                                    (orderDetailGroup.getChargeList() != null \u0026\u0026 !orderDetailGroup.getChargeList().isEmpty()) ?\n                                            orderDetailGroup.getChargeList().get(0).getChargeInfo() : null;\n\n                            Integer chargeIndicator = chargeInfo == null ? 0 : Integer.valueOf(chargeInfo.getChargeCode());\n\n                            Integer cISOrderDetailNo = Integer.valueOf(orderDetail.getOrderDetailIdList()\n                                    .stream()\n                                    .filter(identifierListType -\u003e \"CISOrderDetailNo\".equals(identifierListType.getIDType()))\n                                    .findFirst()\n                                    .map(IdentifierListType::getIDNumber)\n                                    .orElseThrow(() -\u003e new ServiceException(\"CISOrderDetailNo 不能为空\")));\n\n                            if (isWritePresc) {\n                                // 1. 药品处方明细\n                                Map\u003cString, Object\u003e prescMap = new HashMap\u003c\u003e();\n                                prescMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                prescMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                prescMap.put(\"serialNo\", serialNoOut);\n                                prescMap.put(\"prescNo\", prescNoOut);\n\n                                //项目代码\n                                prescMap.put(\"itemClass\", orderDetail.getOrderClass().getIdentifier());\n\n                                //药品信息\n                                ORD0101.Pharmacy pharmacy = pharmacyDetail.getPharmacyOrder().getPharmacy();\n                                prescMap.put(\"drugCode\", pharmacy.getIDM());\n                                prescMap.put(\"drugName\", pharmacy.getName());\n\n                                // 规格\n                                String firmId = pharmacyDetail.getPharmacyOrder().getExtentionList()\n                                        .stream()\n                                        .filter(extention -\u003e \"Firm\".equals(extention.getCodingSystem()))\n                                        .findFirst()\n                                        .map(x -\u003e {\n                                            return (x.getText() == null || x.getText().isEmpty()) ? x.getIdentifier() : x.getText();\n                                        })\n                                        .orElseThrow(() -\u003e new ServiceException(\"开立处方缺少开单时间\"));\n\n                                prescMap.put(\"firmId\", firmId);\n                                prescMap.put(\"drugSpec\", pharmacy.getSpecification().getText());\n\n                                prescMap.put(\"units\", serviceInfo.getUnit().getText());\n                                prescMap.put(\"amount\", StrUtil.isNotEmpty(serviceInfo.getItemqty()) ? new BigDecimal(serviceInfo.getItemqty()) : 0);\n                                prescMap.put(\"dosage\", new BigDecimal(orderDetail.getQuantityTiming().getQuantity()));\n                                prescMap.put(\"usage\", new BigDecimal(orderDetail.getQuantityTiming().getQuantity()));\n                                prescMap.put(\"dosageUnits\", orderDetail.getQuantityTiming().getUnits().getText());\n                                prescMap.put(\"administration\", StringUtils.isEmpty(treatmentRoute.getRoute().getText()) ? treatmentRoute.getAdministrationMethod().getText() : treatmentRoute.getRoute().getText());\n                                prescMap.put(\"frequency\", orderDetail.getQuantityTiming().getInterval().getRepeatPattern().getText());\n                                prescMap.put(\"providedIndicator\", \"0\");\n                                prescMap.put(\"costs\", new BigDecimal(pharmacyDetail.getPharmacyOrder().getPharmacy().getChargeInfo().getPrice()).multiply(new BigDecimal(serviceInfo.getItemqty())));\n                                prescMap.put(\"charges\", new BigDecimal(pharmacyDetail.getPharmacyOrder().getPharmacy().getChargeInfo().getPrice()).multiply(new BigDecimal(serviceInfo.getItemqty())));\n                                prescMap.put(\"chargeIndicator\", chargeIndicator);\n                                prescMap.put(\"dispensary\", orderDetail.getFillerDepartment().getIdentifier());\n\n                                // 剂数 REPETITION 缺省为1，中药处方时可大于1\n                                prescMap.put(\"repetition\", 1);\n                                // 自费标识\n                                prescMap.put(\"selfpaid\", orderDetail.getSelfPaid());\n                                // 用药天数\n                                prescMap.put(\"drugDays\", orderDetail.getQuantityTiming().getDuration());\n\n                                // 成组医嘱\n                                String groupNumber = orderDetail.getGroupNumber();\n                                if (groupNumber != null) {\n                                    // 存在分组，item_father_no 使用 第一个的item_no，item_sub_no组内递增\n                                    Integer groupExistIdx = groupIdxMap.get(groupNumber);\n                                    if (groupExistIdx == null) {\n                                        groupIdxMap.put(groupNumber, 1);\n                                        groupBeginItemNoMap.put(groupNumber, (Integer) prescMap.get(\"itemNo\"));\n                                    } else {\n                                        groupIdxMap.put(groupNumber, groupExistIdx + 1);\n                                    }\n                                    prescMap.put(\"itemFatherNo\", groupBeginItemNoMap.get(groupNumber));\n                                    prescMap.put(\"itemSubNo\", groupIdxMap.get(groupNumber));\n                                } else {\n                                    prescMap.put(\"itemFatherNo\", prescMap.get(\"itemNo\"));\n                                    prescMap.put(\"itemSubNo\", 1);\n                                }\n\n                                // 精麻毒标志 npDrugSerial\n                                String specialDrugFlag = pharmacyDetail.getPharmacyOrder().getExtentionList()\n                                        .stream()\n                                        .filter(extention -\u003e \"SpecialDrugFlag\".equals(extention.getCodingSystem()))\n                                        .findFirst()\n                                        .map(ORD0101.Extention::getIdentifier)\n                                        .orElse(null);\n                                prescMap.put(\"npDrugSerial\", specialDrugFlag);\n\n                                if (isWg) {\n                                    prescMap.put(\"chronicOrSpecialFlag\", chronicOrSpecialFlag);\n                                    esbSubInspectMapper.insertOutpPrescWg(prescMap);\n                                } else {\n                                    esbSubInspectMapper.insertOutpPresc(prescMap);\n                                    Object itemNoOut = prescMap.get(\"ITEM_NO_OUT\");\n                                    ArrayList resultDetails = (ArrayList)resultMap.get(\"details\");\n                                    HashMap\u003cString, Object\u003e detailMap = new HashMap\u003c\u003e();\n                                    detailMap.put(\"cISOrderDetailNo\", cISOrderDetailNo);\n                                    detailMap.put(\"hISOrderDetailNo\", itemNoOut);\n                                    resultDetails.add(detailMap);\n\n                                    Object npDrugSerialOut = prescMap.get(\"NP_DRUG_SERIAL_OUT\");\n                                    if (npDrugSerialOut != null) {\n                                        resultMap.put(\"npDrugSerial\", npDrugSerialOut);\n                                    }\n\n                                    // 2. 门诊处方收费明细\n                                    Map\u003cString, Object\u003e costsMap = new HashMap\u003c\u003e();\n                                    costsMap.put(\"patientId\", patientId);\n                                    costsMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                    costsMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                    costsMap.put(\"serialNo\", serialNoOut);\n                                    costsMap.put(\"orderNo\", prescNoOut);\n                                    costsMap.put(\"orderClass\", orderDetail.getOrderClass().getIdentifier());\n                                    costsMap.put(\"orderSubNo\", 1);\n                                    costsMap.put(\"itemNo\", itemNoOut);\n                                    costsMap.put(\"itemClass\", orderDetail.getOrderClass().getIdentifier());\n                                    costsMap.put(\"itemName\", serviceInfo.getItemInfo().getText());\n                                    costsMap.put(\"itemCode\", prescMap.get(\"drugCode\"));\n                                    costsMap.put(\"itemSpec\", prescMap.get(\"drugSpec\") + firmId);\n                                    costsMap.put(\"units\", prescMap.get(\"units\"));\n                                    costsMap.put(\"amount\", prescMap.get(\"amount\"));\n                                    costsMap.put(\"costs\", prescMap.get(\"costs\"));\n                                    costsMap.put(\"orderedByDept\", orderMap.get(\"orderedBy\"));\n                                    costsMap.put(\"orderedByDoctor\", orderMap.get(\"doctor\"));\n                                    costsMap.put(\"performedBy\", prescMap.get(\"dispensary\"));\n                                    costsMap.put(\"charges\", costsMap.get(\"costs\"));\n                                    costsMap.put(\"chargeIndicator\", 0);\n                                    costsMap.put(\"repetition\", prescMap.get(\"repetition\"));\n\n                                    esbSubInspectMapper.insertOutpOrdersCosts(costsMap);\n                                }\n                            } else {\n                                // 非药品医嘱\n\n                                BigDecimal costs = new BigDecimal(serviceInfo.getPrice()).multiply(new BigDecimal(serviceInfo.getItemqty()));\n                                Map\u003cString, Object\u003e treatMap = new HashMap\u003c\u003e();\n                                treatMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                treatMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                treatMap.put(\"serialNo\", serialNoOut);\n                                treatMap.put(\"itemClass\", orderDetail.getOrderClass().getIdentifier());\n//                            treatMap.put(\"appointNo\", StringUtils.format(\"{}-1\", serialNoOut));\n                                //项目代码\n                                treatMap.put(\"itemCode\", serviceInfo.getItemInfo().getIdentifier());\n                                treatMap.put(\"itemName\", serviceInfo.getItemInfo().getText());\n\n                                // 判断符合以下格式：D|310300007g|/|项\"\n                                String chargeItemNo = serviceInfo.getItemInfo().getNO();\n                                if (chargeItemNo != null) {\n                                    String[] chargeItemNoArr = chargeItemNo.split(\"\\\\|\");\n                                    if (chargeItemNoArr.length != 4) {\n                                        throw new RuntimeException(\"ItemInfo.NO 格式错误:[\" + chargeItemNo + \"]\");\n                                    }\n                                    treatMap.put(\"itemSpec\", chargeItemNoArr[2]);\n                                    treatMap.put(\"units\", chargeItemNoArr[3]);\n                                } else {\n                                    throw new RuntimeException(\"ItemInfo.NO 格式错误:[\" + chargeItemNo + \"]\");\n                                }\n\n                                treatMap.put(\"itemNo\", ++treatItemNo);\n//                            treatMap.put(\"appointItemNo\", itemNo);\n                                treatMap.put(\"amount\", serviceInfo.getItemqty());\n                                treatMap.put(\"costs\", costs);\n                                treatMap.put(\"chargeIndicator\", chargeIndicator);\n                                treatMap.put(\"performedBy\", orderDetail.getFillerDepartment().getIdentifier());\n                                treatMap.put(\"charges\", costs);\n\n                                if (treatMap.get(\"itemClass\").equals(\"C\")) {\n                                    treatMap.put(\"lisModel\", 1);\n                                }\n                                treatMap.put(\"selfpaid\", orderDetail.getSelfPaid());\n\n                                // 医嘱模板\n                                treatMap.put(\"tempCode\", templateCode);\n                                treatMap.put(\"tempName\", templateName);\n                                treatMap.put(\"orderDate\", handleDate);\n                                treatMap.put(\"orderDoctor\", doctorNO);\n                                if (!treatTemplateOrderFlag \u0026\u0026 !EsbSourceAppIdEnum.BAZZDY.name().equals(appId)) {\n                                    // 只写一次\n                                    esbSubInspectMapper.insertTreatTemplateOrder(treatMap);\n                                    treatTemplateOrderFlag = true;\n                                }\n\n                                ArrayList resultDetails = (ArrayList)resultMap.get(\"details\");\n                                HashMap\u003cString, Object\u003e detailMap = new HashMap\u003c\u003e();\n                                detailMap.put(\"cISOrderDetailNo\", cISOrderDetailNo);\n                                detailMap.put(\"hISOrderDetailNo\", treatItemNo);\n                                resultDetails.add(detailMap);\n\n                                esbSubInspectMapper.insertOutpTreatRec(treatMap);\n                            }\n                        }\n\n                        // TODO 外购不划价，后续其他系统划价需要显示传入参数\n                        if (\"军队医改\".equals(chargeType) \u0026\u0026 !hasWg \u0026\u0026 !EsbSourceAppIdEnum.BAZZDY.name().equals(appId)) {\n                            //军免计价\n                            Map\u003cString, Object\u003e armyMap = new HashMap\u003c\u003e();\n                            armyMap.put(\"patientId\", patientId);\n                            armyMap.put(\"serialNo\", serialNoOut);\n                            armyMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                            armyMap.put(\"visitNo\", visitNo);\n\n                            forAutoBillMap.put(serialNoOut, armyMap);\n\n                        }\n                        resultMapList.add(resultMap);\n                    }\n                } else if (\"CA\".equals(orderControl)) {\n                    //撤销\n                    for (ORD0101.OrderGroup orderGroup : body.getOrderGroupList()) {\n                        String serialNo = orderGroup.fetchOrderId(OrderIdTypeEnum.HISOrderNo);\n                        String visitNum = body.getPatientVisit().getVisitNumber();\n                        String visitDate = visitNum.substring(0, 8);\n                        String visitNo = visitNum.substring(8);\n\n                        String[] serialNoArr = serialNo.split(\"\\\\|\");\n                        Map\u003cString, Object\u003e orderMap = new HashMap\u003c\u003e();\n                        orderMap.put(\"serialNo\", serialNoArr[0]);\n                        orderMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                        orderMap.put(\"visitNo\", Long.valueOf(visitNo));\n                        orderMap.put(\"patientId\", patientId);\n\n                        esbSubInspectMapper.deleteOutpOrders(orderMap);\n                    }\n                } else {\n                    throw new ServiceException(\"未知的操作类型-OrderControl：\" + orderControl);\n                }\n                transactionManager.commit(status1); // 提交第一个事务\n            } catch (Exception e) {\n                transactionManager.rollback(status1); // 回滚第一个事务\n                throw e;\n            }\n\n            // 划价\n            DefaultTransactionDefinition def2 = new DefaultTransactionDefinition();\n            def2.setName(\"Transaction2\");\n            def2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n            TransactionStatus status2 = transactionManager.getTransaction(def2);\n\n            try {\n                if (!forAutoBillMap.isEmpty()) {\n                    Map\u003cObject, List\u003cMap\u003cString, Object\u003e\u003e\u003e serialNoToResult\n                            = resultMapList.stream().collect(Collectors.groupingBy(a -\u003e a.get(\"serialNo\")));\n\n                    forAutoBillMap.forEach((serialNoOut, armyMap) -\u003e {\n                        esbSubInspectMapper.armyAutoBill(armyMap);\n                        log.info(\"申请单-ArmyAutoBill:\" + armyMap.toString());\n                        List\u003cMap\u003cString, Object\u003e\u003e resultList = serialNoToResult.get(serialNoOut);\n                        if (resultList != null \u0026\u0026 !resultList.isEmpty()) {\n                            resultList.forEach(r -\u003e {\n                                r.put(\"armyAutoBillMsg\", armyMap.get(\"errMsg\"));\n                                r.put(\"armyAutoBillCode\", armyMap.get(\"retCode\"));\n                            });\n                        }\n                    });\n                }\n                transactionManager.commit(status2); // 提交第二个事务\n            } catch (Exception e) {\n                transactionManager.rollback(status2); // 回滚第二个事务\n                throw e;\n            }\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (ServiceException serviceException) {\n            log.error(\"门诊处方操作失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"门诊处方操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"门诊处方操作失败\");\n        return resultMapList;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void diagnosisOperation(EsbRequestInputDTO esbRequestInputDTO) {\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        MRD0104 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), MRD0104.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"诊断信息操作失败\";\n        String patientId = \"\";\n\n        try {\n\n            String visitNum = body.getPatientVisit().getVisitNumber();\n            String visitDate = visitNum.substring(0, 8);\n            String visitNo = visitNum.substring(8);\n\n            // 清空历史数据\n            Map\u003cString, Object\u003e clearMap = new HashMap\u003c\u003e();\n            clearMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n            clearMap.put(\"visitNo\", visitNo);\n            clearMap.put(\"deleteFlag\", 1);\n            esbSubEncounterMapper.saveOutpDiagnosis(clearMap);\n\n            // 门诊诊断新增\n            if (\"O\".equals(body.getPatientVisit().getPatientClass())) {\n\n                for (MRD0104.Diagnosis diagnosis : body.getDiagnosisList()) {\n                    Map\u003cString, Object\u003e diagnosisMap = new HashMap\u003c\u003e();\n                    diagnosisMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                    diagnosisMap.put(\"visitNo\", visitNo);\n\n                    diagnosisMap.put(\"diagnosisType\", Optional.ofNullable(diagnosis.getDiagnosisType()).map(CodedElementOIDType::getIdentifier).orElse(\"1\"));\n                    diagnosisMap.put(\"diagnosisNo\", diagnosis.getDiagnosisNo());\n                    diagnosisMap.put(\"diagnosisDesc\", diagnosis.getDiagnosisDesc());\n                    diagnosisMap.put(\"diagnosisDate\", DateUtils.parseDate(diagnosis.getDiagnosisTime()));\n                    diagnosisMap.put(\"diagStartDate\", diagnosis.getOutbreakDatetime());\n                    // 如：确诊、疑诊、待查\n                    diagnosisMap.put(\"resultType\", diagnosis.getResultType());\n                    // 初诊、复诊\n                    String reAdmissionIndicator = body.getPatientVisit().getReAdmissionIndicator();\n                    diagnosisMap.put(\"firstVisitIndicator\", \"1\".equals(reAdmissionIndicator) ? 0 : 1);\n                    diagnosisMap.put(\"diagnosisCode\", diagnosis.getDiagnosisCode().getIdentifier());\n\n                    diagnosisMap.put(\"diagnosisNote\", diagnosis.getComment());\n\n                    esbSubEncounterMapper.saveOutpDiagnosis(diagnosisMap);\n                    patientId = String.valueOf(diagnosisMap.get(\"patientId\"));\n                }\n            } else {\n                // TODO 住院诊断新增\n                throw new ServiceException(\"住院诊断功能未实现\");\n            }\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"诊断操作异常-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"诊断信息操作失败\");\n\n    }\n\n    @Override\n    public Map\u003cString, Object\u003e patMasterInsertOrUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        PID0101 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), PID0101.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"个人信息更新操作失败\";\n        String patientId = null;\n        Map\u003cString, Object\u003e resultMap = new HashMap\u003c\u003e();\n        try {\n            Map\u003cString, Object\u003e patMasterMap = new HashMap\u003c\u003e();\n            PID0101.Demography demography = body.getDemography();\n            PID0101.PatientVisit patientVisit = body.getPatientVisit();\n            PID0101.NextOfKin nextOfKin = body.getNextOfKinList().stream().findFirst().orElse(null);\n            Event event = body.getEvent();\n\n            patientId = body.fetchPatientId(true);\n            if (EsbSubBizEnum.PID0102.name().equals(tranCode) \u0026\u0026 patientId == null) {\n                dealStatusEnum = DealStatusEnum.FAIL;\n                throw new ServiceException(\"没有找到PatientId\");\n            }\n\n            // 基本信息\n            patMasterMap.put(\"patientId\", patientId);\n            patMasterMap.put(\"name\", demography.getPatientName());\n            patMasterMap.put(\"namePhonetic\", PinyinUtil.getPinyin(demography.getPatientName()).toUpperCase());\n            patMasterMap.put(\"sex\", demography.getSex().getText());\n            patMasterMap.put(\"dateOfBirth\", DateUtils.parseDate(demography.getBirthday()));\n            String countyId = demography.getAddressList()\n                    .stream()\n                    .filter(address -\u003e \"BR\".equals(address.getType()))\n                    .findFirst()\n                    .map(AddressType::getCounty)\n                    .map(CodedElementOIDType::getIdentifier)\n                    .orElse(null);\n            patMasterMap.put(\"birthPlace\", countyId);\n            patMasterMap.put(\"citizenship\", demography.getNationality().getIdentifier());\n            patMasterMap.put(\"nation\", demography.getEthnicGroup().getText());\n            patMasterMap.put(\"idNo\", demography.getSSN());\n            patMasterMap.put(\"identity\", demography.getIdentifyCategory().getText());\n            patMasterMap.put(\"chargeType\", patientVisit.getInsuranceClass().getText());\n            patMasterMap.put(\"secretLevel\", demography.getSecretLevel());\n\n            // 健康卡\n            List\u003cCardType\u003e cardList = demography.getCardList();\n            if (cardList != null) {\n                String healthCard = cardList.stream().filter(a -\u003e\n                        \"JKKH\".equals(a.getCardType().getIdentifier()) || \"健康卡\".equals(a.getCardType().getText())\n                ).findFirst().map(CardType::getCardNo).orElse(null);\n                patMasterMap.put(\"healthCard\", healthCard);\n            }\n\n\n            // 地址、电话\n            AddressType addressH = demography.getAddressList()\n                    .stream()\n                    .filter(address -\u003e \"H\".equals(address.getType()))\n                    .findFirst()\n                    .orElse(null);\n            if (addressH != null) {\n                patMasterMap.put(\"mailingAddress\",\n                        Optional.ofNullable(addressH.getProvince()).map(CodedElementOIDType::getText).orElse(\"\")\n                                + Optional.ofNullable(addressH.getCity()).map(CodedElementOIDType::getText).orElse(\"\")\n                                + Optional.ofNullable(addressH.getCounty()).map(CodedElementOIDType::getText).orElse(\"\")\n                                + addressH.getStreetAddress()\n                                + addressH.getHouseNumber()\n                );\n                patMasterMap.put(\"zipCode\", addressH.getZip());\n            }\n            demography.getAddressList()\n                    .stream()\n                    .filter(address -\u003e \"P\".equals(address.getType()))\n                    .findFirst()\n                    .map(AddressType::getProvince)\n                    .map(CodedElementOIDType::getIdentifier)\n                    .ifPresent(provinceCode -\u003e patMasterMap.put(\"nativePlace\", provinceCode));\n\n            patMasterMap.put(\"phoneNumberHome\",\n                    demography.getPhoneList()\n                            .stream()\n                            .filter(phone -\u003e \"H\".equals(phone.getPhoneType()))\n                            .findFirst()\n                            .map(PhoneNumberType::getPhoneNumberST)\n                            .orElse(null)\n            );\n\n            patMasterMap.put(\"phoneNumberBusiness\",\n                    demography.getPhoneList()\n                            .stream()\n                            .filter(phone -\u003e \"B\".equals(phone.getPhoneType()))\n                            .findFirst()\n                            .map(PhoneNumberType::getPhoneNumberST)\n                            .orElse(null)\n            );\n\n            // 联系人\n            if (nextOfKin != null) {\n                patMasterMap.put(\"nextOfKin\", nextOfKin.getName());\n                patMasterMap.put(\"relationship\", Optional.ofNullable(nextOfKin.getRelationship()).map(CodedElementOIDType::getIdentifier).orElse(null));\n                AddressType nextOfKinAddressH = demography.getAddressList()\n                        .stream()\n                        .filter(address -\u003e \"H\".equals(address.getType()))\n                        .findFirst()\n                        .orElse(null);\n                if (nextOfKinAddressH != null) {\n                    patMasterMap.put(\"nextOfKinAddr\",\n                            Optional.ofNullable(nextOfKinAddressH.getProvince()).map(CodedElementOIDType::getText).orElse(\"\")\n                                    + Optional.ofNullable(nextOfKinAddressH.getCity()).map(CodedElementOIDType::getText).orElse(\"\")\n                                    + Optional.ofNullable(nextOfKinAddressH.getCounty()).map(CodedElementOIDType::getText).orElse(\"\")\n                                    + nextOfKinAddressH.getStreetAddress()\n                                    + nextOfKinAddressH.getHouseNumber()\n\n                    );\n                    patMasterMap.put(\"nextOfKinZipCode\", nextOfKinAddressH.getZip());\n                }\n                patMasterMap.put(\"nextOfKinPhone\",\n                        nextOfKin.getPhoneList()\n                                .stream()\n                                .filter(phone -\u003e \"H\".equals(phone.getPhoneType()))\n                                .findFirst()\n                                .map(PhoneNumberType::getPhoneNumberST)\n                                .orElse(null)\n                );\n                patMasterMap.put(\"nextOfKinIdNo\", nextOfKin.getSSN());\n            }\n\n            // 操作者信息\n            Date recordDatetime = event.getRecordDatetime();\n            patMasterMap.put(\"createDate\", recordDatetime);\n\n            String operator = Optional.ofNullable(event.getOperator())\n                    .map(PersonType::getName)\n                    .orElse(null);\n            patMasterMap.put(\"operator\", operator);\n\n            esbSubInspectMapper.updatePatMaster(patMasterMap);\n            Object patientIdOut = patMasterMap.get(\"PATIENT_ID_OUT\");\n\n            resultMap.put(\"patientId\", patientIdOut);\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"个人信息更新操作异常-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n            if (e instanceof ServiceException) {\n                dealStatusEnum = DealStatusEnum.FAIL;\n            }\n        }\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"个人信息更新操作失败\");\n        return resultMap;\n    }\n\n    @Override\n    public void outPatientEncounterStatusUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n        // TODO 只接收来源医生站的，HIS发出的不接收；同一个事件统一主键，不同系统发出的消息需要屏蔽HIS源头数据，例如医生站推送就诊状态更新，HIS消息可以阻断推送（redis：esb:type:event:id = source, tll:60s）\n        String appId = esbRequestInputDTO.getHead().getAppId();\n        if (appId.equals(esbRegConfig.getAppId())) {\n            throw new RuntimeException(\"不能订阅自己发出的消息\");\n        }\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"门诊就诊状态更新失败\";\n        try {\n            REG0204 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), REG0204.class);\n            REG0204.PatientVisit patientVisit = body.getPatientVisit();\n            // 参数校验\n            if (!\"O\".equals(patientVisit.getPatientClass())) {\n                throw new RuntimeException(\"未知的就诊类型：\" + patientVisit.getPatientClass());\n            }\n\n            // 就诊标识\n            String visitNumber = patientVisit.getVisitNumber();\n            String visitDate = visitNumber.substring(0, 8);\n            String visitNo = visitNumber.substring(8);\n\n            // 就诊医生\n            REG0204.HandleBy lockedupBy = patientVisit.getLockedupBy();\n\n            // 就诊状态\n            String visitStatusId = patientVisit.getVisitStatus().getIdentifier();\n            String visitStatusText = patientVisit.getVisitStatus().getText();\n            if (\"1\".equals(visitStatusId) || \"就诊中（接诊）\".equals(visitStatusText)\n                    || \"2\".equals(visitStatusId) || \"取消就诊\".equals(visitStatusText)\n                    || \"3\".equals(visitStatusId) || \"结束就诊\".equals(visitStatusText)) {\n                Map\u003cString, Object\u003e params = new HashMap\u003c\u003e();\n                params.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                params.put(\"visitNo\", visitNo);\n                params.put(\"doctor\", lockedupBy != null ? lockedupBy.getName() : null);\n                params.put(\"visitStatus\", visitStatusId);\n\n                esbSubEncounterMapper.outEncounterStatusUpdate(params);\n            }\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"门诊就诊状态更新失败-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n            esbSubCommonService.tranRecordLog(false, messageId, esbRequestInputDTO, tranCode, errorMsg, \"就诊状态操作失败\", null);\n            throw new ServiceException(e.getMessage());\n        }\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, null, \"就诊状态操作失败\");\n    }\n\n    @Transactional\n    @Override\n    public Map\u003cString, Object\u003e operationSchedulingAddAndUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        String appId = esbRequestInputDTO.getHead().getAppId();\n        boolean ykmzFlag = EsbSourceAppIdEnum.YKMZ.name().equals(appId);\n        int sourceInd = ykmzFlag ? 2 : 1;\n\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"手术排班信息操作失败\";\n        SGR0101 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), SGR0101.class);\n        String patientId = body.fetchPatientId();\n\n        Map\u003cString, Object\u003e resultMap = new HashMap\u003c\u003e();\n\n        log.info(\"手术排班信息入参:{}\", JSON.toJSONString(esbRequestInputDTO));\n        try {\n            String visitId = body.getPatientVisit().getVisitNumber();\n            if ((visitId == null || visitId.isEmpty()) \u0026\u0026 ykmzFlag) {\n                // 门诊默认写0\n                visitId = \"0\";\n            }\n            String scheduleId = body.getScheduleInfo().getOccurrenceNumber();\n\n            SGR0101.SurgicalDetail surgicalDetail = body.getSurgery().getSurgicalDetailList().stream()\n                    .filter(surgicalDetail1 -\u003e \"Booked,Complete\".contains(surgicalDetail1.getSurgicalStatus().getIdentifier()))\n                    .findFirst()\n                    .orElse(null);\n\n            SGR0101.SurgicalDetail surgicalDetailDeleted = body.getSurgery().getSurgicalDetailList().stream()\n                    .filter(surgicalDetail1 -\u003e \"Deleted\".contains(surgicalDetail1.getSurgicalStatus().getIdentifier()))\n                    .findFirst()\n                    .orElse(null);\n\n            boolean isCancel = surgicalDetailDeleted != null;\n\n            if (isCancel) {\n                // 取消\n                Map\u003cString, Object\u003e operationScheduleMap = new HashMap\u003c\u003e();\n                operationScheduleMap.put(\"patientId\", patientId);\n                operationScheduleMap.put(\"visitId\", visitId);\n                operationScheduleMap.put(\"scheduleId\", Integer.valueOf(scheduleId));\n\n                esbSubOperationMapper.cancelOperationSchedule(operationScheduleMap);\n                dealStatusEnum = DealStatusEnum.SUCCESS;\n            } else {\n                // 非取消\n                String operationRoomNo = surgicalDetail.getOperationRoomNo().getText();\n                String sequence = surgicalDetail.getOperationTable();\n                String operatingDept = \"\";\n                String firstAssistant = \"\";\n                String secondAssistant = \"\";\n                String thirdAssistant = \"\";\n                String fourthAssistant = \"\";\n                String anesthesiaDoctor = \"\";\n                String secondAnesthesiaDoctor = \"\";\n                String thirdAnesthesiaDoctor = \"\";\n                String anesthesiaAssistant = \"\";\n                String secondAnesthesiaAssistant = \"\";\n                String thirdAnesthesiaAssistant = \"\";\n                String fourthAnesthesiaAssistant = \"\";\n                String firstOperationNurse = \"\";\n                String secondOperationNurse = \"\";\n                String firstSupplyNurse = \"\";\n                String secondSupplyNurse = \"\";\n                String thirdSupplyNurse = \"\";\n                String surgeon = \"\";\n                String surgeonId = \"\";\n                String firstAssistantId = \"\";\n                String secondAssistantId = \"\";\n                String thirdAssistantId = \"\";\n                String fourthAssistantId = \"\";\n                String bloodTranDoctor = \"\";\n                String reqDoctor = \"\";\n                String reqDoctorId = \"\";\n                String priority = \"\";\n                String serialNumber = \"\";\n                String reqBy = \"\";\n\n                Integer emergencyIndicator = StringUtils.isEmpty(surgicalDetail.getOperationType().getIdentifier()) ? null : Integer.valueOf(surgicalDetail.getOperationType().getIdentifier());\n\n                Integer isolationIndicator = Integer.valueOf(surgicalDetail.getIsolationIndicator().getIdentifier());\n\n                CodedElementType surgeonDoctor = surgicalDetail.getSurgeon();\n                if (surgeonDoctor != null) {\n                    surgeonId = surgeonDoctor.getIdentifier();\n                    surgeon = surgeonDoctor.getText();\n                }\n\n                for (SGR0101.PersonInfo personInfo : surgicalDetail.getResourceGroup().getPersonList()) {\n                    SGR0101.SurgeryPersonType person = personInfo.getPerson();\n                    //主治医生\n                    if (\"Surgeon\".equals(person.getRole().getIdentifier())) {\n                        //operatingDept = person.getDepartment().getIdentifier();\n                        surgeonId = person.getIDNumber();\n                        surgeon = person.getName();\n                    }\n                    //第一手术助手\n                    if (\"FirstAssistant\".equals(person.getRole().getIdentifier())) {\n                        firstAssistant = person.getName();\n                        firstAssistantId = person.getIDNumber();\n                    }\n                    //第二手术助手\n                    if (\"SecondAssistant\".equals(person.getRole().getIdentifier())) {\n                        secondAssistant = person.getName();\n                        secondAssistantId = person.getIDNumber();\n                    }\n                    //第三手术助手\n                    if (\"ThirdAssistant\".equals(person.getRole().getIdentifier())) {\n                        thirdAssistant = person.getName();\n                        thirdAssistantId = person.getIDNumber();\n                    }\n                    //第四手术助手\n                    if (\"FourthAssistant\".equals(person.getRole().getIdentifier())) {\n                        fourthAssistant = person.getName();\n                        fourthAssistantId = person.getIDNumber();\n                    }\n                    //麻醉医生1\n                    if (\"Anesthetist\".equals(person.getRole().getIdentifier())) {\n                        anesthesiaDoctor = person.getName();\n                    }\n                    //麻醉医生2\n                    if (\"SecondAnesthetist\".equals(person.getRole().getIdentifier())) {\n                        secondAnesthesiaDoctor = person.getName();\n                    }\n                    //麻醉医生3\n                    if (\"ThirdAnesthetist\".equals(person.getRole().getIdentifier())) {\n                        thirdAnesthesiaDoctor = person.getName();\n                    }\n                    //麻醉助手1\n                    if (\"AnesthetistAssistants\".equals(person.getRole().getIdentifier())) {\n                        anesthesiaAssistant = person.getName();\n                    }\n                    //麻醉助手2\n                    if (\"SecondAnesthetistAssistants\".equals(person.getRole().getIdentifier())) {\n                        secondAnesthesiaAssistant = person.getName();\n                    }\n                    //麻醉助手3\n                    if (\"ThirdAnesthetistAssistants\".equals(person.getRole().getIdentifier())) {\n                        thirdAnesthesiaAssistant = person.getName();\n                    }\n                    //麻醉助手4\n                    if (\"FourthAnesthetistAssistants\".equals(person.getRole().getIdentifier())) {\n                        fourthAnesthesiaAssistant = person.getName();\n                    }\n                    //第一台上护士\n                    if (\"ItinerateNurse\".equals(person.getRole().getIdentifier())) {\n                        firstOperationNurse = person.getName();\n                    }\n                    //第二台上护士\n                    if (\"SecondItinerateNurse\".equals(person.getRole().getIdentifier())) {\n                        secondOperationNurse = person.getName();\n                    }\n                    //第一供应护士\n                    if (\"InstrumentNurse\".equals(person.getRole().getIdentifier())) {\n                        firstSupplyNurse = person.getName();\n                    }\n                    //第二供应护士\n                    if (\"SecondInstrumentNurse\".equals(person.getRole().getIdentifier())) {\n                        secondSupplyNurse = person.getName();\n                    }\n                    //第三供应护士\n                    if (\"ThirdInstrumentNurse\".equals(person.getRole().getIdentifier())) {\n                        thirdSupplyNurse = person.getName();\n                    }\n                    //输血医生\n                    if (\"BloodTransfusionNurse\".equals(person.getRole().getIdentifier())) {\n                        bloodTranDoctor = person.getName();\n                    }\n                    //申请人\n                    if (\"Application\".equals(person.getRole().getIdentifier())) {\n                        reqBy = person.getName();\n                    }\n\n                }\n\n                PersonTypeWithDept personTypeWithDept = body.getScheduleInfo().getHandleList().stream()\n                        .filter(HandleType -\u003e \"Entry\".equals(HandleType.getType().getIdentifier()))\n                        .findFirst()\n                        .map(HandleType::getHandleBy)\n                        .orElse(null);\n\n                if (\"SGR0101\".equals(tranCode) \u0026\u0026 !isCancel) {\n                    // 更新排班\n\n                    //手术间、手术台次都没值不更新\n                    if (StringUtils.isEmpty(operationRoomNo) \u0026\u0026 StringUtils.isEmpty(sequence)) {\n                        throw new ServiceException(\"手术间号、台次都为空!\");\n                    }\n\n                    //获取相应人员的账号\n                    surgeonId = esbSubCommonService.hisSimpleQuery(\"STAFF_DICT\", null, surgeonId)\n                            .getSingleValue(\"USER_NAME\");\n                    firstAssistantId = esbSubCommonService.hisSimpleQuery(\"STAFF_DICT\", null, firstAssistantId)\n                            .getSingleValue(\"USER_NAME\");\n                    secondAssistantId = esbSubCommonService.hisSimpleQuery(\"STAFF_DICT\", null, secondAssistantId)\n                            .getSingleValue(\"USER_NAME\");\n                    thirdAssistantId = esbSubCommonService.hisSimpleQuery(\"STAFF_DICT\", null, thirdAssistantId)\n                            .getSingleValue(\"USER_NAME\");\n                    fourthAssistantId = esbSubCommonService.hisSimpleQuery(\"STAFF_DICT\", null, fourthAssistantId)\n                            .getSingleValue(\"USER_NAME\");\n\n                    Map\u003cString, Object\u003e operationScheduleMap = new HashMap\u003c\u003e();\n                    operationScheduleMap.put(\"patientId\", patientId);\n                    operationScheduleMap.put(\"visitId\", visitId);\n                    operationScheduleMap.put(\"scheduleId\", Integer.valueOf(scheduleId));\n                    operationScheduleMap.put(\"scheduledDateTime\", null);\n                    operationScheduleMap.put(\"operatingRoom\", null);\n                    operationScheduleMap.put(\"operatingRoomNo\", operationRoomNo);\n                    operationScheduleMap.put(\"sequence\", sequence);\n                    operationScheduleMap.put(\"operatingDept\", operatingDept);\n                    operationScheduleMap.put(\"surgeon\", surgeon);\n                    operationScheduleMap.put(\"surgeonId\", surgeonId);\n                    operationScheduleMap.put(\"firstAssistant\", firstAssistant);\n                    operationScheduleMap.put(\"secondAssistant\", secondAssistant);\n                    operationScheduleMap.put(\"thirdAssistant\", thirdAssistant);\n                    operationScheduleMap.put(\"fourthAssistant\", fourthAssistant);\n                    operationScheduleMap.put(\"firstAssistantId\", firstAssistantId);\n                    operationScheduleMap.put(\"secondAssistantId\", secondAssistantId);\n                    operationScheduleMap.put(\"thirdAssistantId\", thirdAssistantId);\n                    operationScheduleMap.put(\"fourthAssistantId\", fourthAssistantId);\n                    operationScheduleMap.put(\"anesthesiaDoctor\", anesthesiaDoctor);\n                    operationScheduleMap.put(\"secondAnesthesiaDoctor\", secondAnesthesiaDoctor);\n                    operationScheduleMap.put(\"thirdAnesthesiaDoctor\", thirdAnesthesiaDoctor);\n                    operationScheduleMap.put(\"anesthesiaAssistant\", anesthesiaAssistant);\n                    operationScheduleMap.put(\"secondAnesthesiaAssistant\", secondAnesthesiaAssistant);\n                    operationScheduleMap.put(\"thirdAnesthesiaAssistant\", thirdAnesthesiaAssistant);\n                    operationScheduleMap.put(\"fourthAnesthesiaAssistant\", fourthAnesthesiaAssistant);\n                    operationScheduleMap.put(\"firstOperationNurse\", firstOperationNurse);\n                    operationScheduleMap.put(\"secondOperationNurse\", secondOperationNurse);\n                    operationScheduleMap.put(\"firstSupplyNurse\", firstSupplyNurse);\n                    operationScheduleMap.put(\"secondSupplyNurse\", secondSupplyNurse);\n                    operationScheduleMap.put(\"thirdSupplyNurse\", thirdSupplyNurse);\n                    operationScheduleMap.put(\"ackIndicator\", 1);\n                    operationScheduleMap.put(\"emergencyIndicator\", emergencyIndicator);\n                    operationScheduleMap.put(\"anesthesiaMethod\", surgicalDetail.getAnesthesiaMethod().getText());\n                    operationScheduleMap.put(\"enteredBy\", personTypeWithDept.getName());\n                    operationScheduleMap.put(\"isolationIndicator\", isolationIndicator);\n\n                    esbSubOperationMapper.updateOperationSchedule(operationScheduleMap);\n                    dealStatusEnum = DealStatusEnum.SUCCESS;\n                } else if (\"SGR0102\".equals(tranCode)) { //更新\n                    String diagBeforeOperation = \"\";\n                    String diagAfterOperation = null;\n                    String schFirstOperationNurse = \"\";\n                    String schSecondOperationNurse = \"\";\n                    Integer inpType = null;\n                    Integer outpOperation = null;\n                    String szblqp = \"\";\n                    Integer orderNo = null;\n                    Integer orderSubNo = null;\n                    String errorComment = \"\";\n                    Integer serialNo = null;\n                    String operVisitor = \"\";\n                    String applicationStatus = \"\";\n                    String auditor = \"\";\n                    Date visitDate = null;\n                    Integer visitNo = null;\n                    Integer surgeonLevel = null;\n                    String dutyDoctor = \"\";\n                    Date intendStartTime = null;\n                    Date intendEndTime = null;\n                    Integer identifiedNo = null;\n                    Date reqDateTime = null;\n                    String patientCondition = \"\";\n                    String notesOnOperation = null;\n\n                    String deptStayed = \"\";\n\n                    HisBaseQuery operationScheduleResult = esbSubCommonService.hisSimpleQuery(\"OPERATION_SCHEDULE\", null, patientId, visitId, scheduleId);\n                    Map\u003cString, Object\u003e operationSchedule = operationScheduleResult.getSingle();\n                    String operationRoom = surgicalDetail.getSurgicalDepartment().getIdentifier();\n\n                    if (CollectionUtil.isNotEmpty(operationSchedule)) {\n                        diagBeforeOperation = Objects.isNull(operationSchedule.get(\"DIAG_BEFORE_OPERATION\")) ? \"\" : operationSchedule.get(\"DIAG_BEFORE_OPERATION\").toString();\n                        //isolationIndicator = Objects.isNull(operationSchedule.get(\"ISOLATION_INDICATOR\")) ? null : Integer.valueOf(operationSchedule.get(\"ISOLATION_INDICATOR\").toString());\n                        schFirstOperationNurse = Objects.isNull(operationSchedule.get(\"FIRST_OPERATION_NURSE\")) ? \"\" : operationSchedule.get(\"FIRST_OPERATION_NURSE\").toString();\n                        schSecondOperationNurse = Objects.isNull(operationSchedule.get(\"SECOND_OPERATION_NURSE\")) ? \"\" : operationSchedule.get(\"SECOND_OPERATION_NURSE\").toString();\n                        inpType = Objects.isNull(operationSchedule.get(\"INP_TYPE\")) ? null : Integer.valueOf(operationSchedule.get(\"INP_TYPE\").toString());\n                        outpOperation = Objects.isNull(operationSchedule.get(\"OUTP_OPERATION\")) ? null : Integer.valueOf(operationSchedule.get(\"OUTP_OPERATION\").toString());\n                        szblqp = Objects.isNull(operationSchedule.get(\"SZBLQP\")) ? \"\" : operationSchedule.get(\"SZBLQP\").toString();\n                        orderNo = Objects.isNull(operationSchedule.get(\"ORDER_NO\")) ? null : Integer.valueOf(operationSchedule.get(\"ORDER_NO\").toString());\n                        orderSubNo = Objects.isNull(operationSchedule.get(\"ORDER_SUB_NO\")) ? null : Integer.valueOf(operationSchedule.get(\"ORDER_SUB_NO\").toString());\n                        errorComment = Objects.isNull(operationSchedule.get(\"ERROR_COMMENT\")) ? \"\" : operationSchedule.get(\"ERROR_COMMENT\").toString();\n                        serialNo = Objects.isNull(operationSchedule.get(\"SERIAL_NO\")) ? null : Integer.valueOf(operationSchedule.get(\"SERIAL_NO\").toString());\n                        operVisitor = Objects.isNull(operationSchedule.get(\"OPER_VISITOR\")) ? \"\" : operationSchedule.get(\"OPER_VISITOR\").toString();\n                        applicationStatus = Objects.isNull(operationSchedule.get(\"APPLICATION_STATUS\")) ? \"\" : operationSchedule.get(\"APPLICATION_STATUS\").toString();\n                        auditor = Objects.isNull(operationSchedule.get(\"AUDITOR\")) ? \"\" : operationSchedule.get(\"AUDITOR\").toString();\n                        reqDoctor = Objects.isNull(operationSchedule.get(\"REQ_DOCTOR\")) ? \"\" : operationSchedule.get(\"REQ_DOCTOR\").toString();\n                        reqDoctorId = Objects.isNull(operationSchedule.get(\"REQ_DOCTOR_ID\")) ? \"\" : operationSchedule.get(\"REQ_DOCTOR_ID\").toString();\n                        priority = Objects.isNull(operationSchedule.get(\"PRIORITY\")) ? \"\" : operationSchedule.get(\"PRIORITY\").toString();\n                        serialNumber = Objects.isNull(operationSchedule.get(\"SERIAL_NUMBER\")) ? \"\" : operationSchedule.get(\"SERIAL_NUMBER\").toString();\n                        visitDate = Objects.isNull(operationSchedule.get(\"VISIT_DATE\")) ? null : DateUtils.parseDate(operationSchedule.get(\"VISIT_DATE\").toString());\n                        visitNo = Objects.isNull(operationSchedule.get(\"VISIT_NO\")) ? null : Integer.valueOf(operationSchedule.get(\"VISIT_NO\").toString());\n                        deptStayed = Objects.isNull(operationSchedule.get(\"DEPT_STAYED\")) ? null : operationSchedule.get(\"DEPT_STAYED\").toString();\n                        operatingDept = Objects.isNull(operationSchedule.get(\"OPERATING_DEPT\")) ? null : operationSchedule.get(\"OPERATING_DEPT\").toString();\n                        reqDateTime = Objects.isNull(operationSchedule.get(\"REQ_DATE_TIME\")) ? null : DateUtils.parseDate(operationSchedule.get(\"REQ_DATE_TIME\").toString());\n\n                        //958\n                        surgeonLevel = Objects.isNull(operationSchedule.get(\"SURGEON_LEVEL\")) ? null : Integer.valueOf(operationSchedule.get(\"SURGEON_LEVEL\").toString());\n                        dutyDoctor = Objects.isNull(operationSchedule.get(\"DUTY_DOCTOR\")) ? \"\" : operationSchedule.get(\"DUTY_DOCTOR\").toString();\n                        intendStartTime = Objects.isNull(operationSchedule.get(\"INTEND_START_TIME\")) ? null : DateUtils.parseDate(operationSchedule.get(\"INTEND_START_TIME\").toString());\n                        intendEndTime = Objects.isNull(operationSchedule.get(\"INTEND_END_TIME\")) ? null : DateUtils.parseDate(operationSchedule.get(\"INTEND_END_TIME\").toString());\n                        identifiedNo = Objects.isNull(operationSchedule.get(\"IDENTIFIED_NO\")) ? null : Integer.valueOf(operationSchedule.get(\"IDENTIFIED_NO\").toString());\n                        patientCondition = Objects.isNull(operationSchedule.get(\"PATIENT_CONDITION\")) ? null : operationSchedule.get(\"PATIENT_CONDITION\").toString();\n                        operationRoom = Objects.isNull(operationSchedule.get(\"OPERATING_ROOM\")) ? null : operationSchedule.get(\"OPERATING_ROOM\").toString();\n                        notesOnOperation = Objects.isNull(operationSchedule.get(\"NOTES_ON_OPERATION\")) ? null : operationSchedule.get(\"NOTES_ON_OPERATION\").toString();\n                    } else {\n                        if (ykmzFlag) {\n                            // 眼科门诊 赋值\n                            // 术前诊断 DIAG_BEFORE_OPERATION，术后诊断 DIAG_AFTER_OPERATION\n                            List\u003cSGR0101.Diagnosis\u003e diagnosisList = body.getDiagnosisList();\n                            if (CollectionUtil.isNotEmpty(diagnosisList)) {\n                                for (SGR0101.Diagnosis diag : diagnosisList) {\n                                    if (\"术前诊断\".equals(diag.getDiagnosisType().getText())) {\n                                        diagBeforeOperation = diag.getDiagnosisDesc();\n                                    } else if (\"术后诊断\".equals(diag.getDiagnosisType().getText())) {\n                                        diagAfterOperation = diag.getDiagnosisDesc();\n                                    }\n                                }\n                            }\n                            patientCondition = surgicalDetail.getSpecialIll().getText();\n                            deptStayed = operationRoom;\n                            operatingDept = operationRoom;\n                            surgeonLevel = Optional.ofNullable(surgicalDetail.getSurgeonLevel())\n                                    .map(CodedElementType::getIdentifier)\n                                    .map(Integer::valueOf)\n                                    .orElse(null);\n\n                            reqDateTime = surgicalDetail.getReqDateTime();\n                        }\n                    }\n\n                    Integer operId = null;\n                    Map\u003cString, Object\u003e operationMasterResult = esbSubCommonService.hisSimpleQuery(\"OPERATION_MASTER\", \"BY_REQ_DATE_TIME\", patientId, visitId, DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD_HH_MM_SS, reqDateTime)).getSingle();\n                    String saveType = CollectionUtil.isEmpty(operationMasterResult) ? \"INSERT\" : \"UPDATE\";\n                    if (ykmzFlag) {\n                        String applyNo = body.getSurgery().getApplyNo();\n                        if (applyNo != null \u0026\u0026 !applyNo.isEmpty()) {\n                            saveType = \"UPDATE\";\n                            operationMasterResult = new HashMap\u003c\u003e();\n                            operationMasterResult.put(\"OPER_ID\", Integer.valueOf(applyNo));\n                        } else {\n                            saveType = \"INSERT\";\n                        }\n                    }\n\n                    //Integer operId = Integer.valueOf(body.getSurgery().getApplyNo()); 958医院手麻和HIS的operId不对应\n                    String operationScale = surgicalDetail.getOperationScale().getText();\n                    String schOperationNurseS = String.format(\"%s,%s\", schFirstOperationNurse, schSecondOperationNurse);\n                    Integer nurseShiftIndicator = (schOperationNurseS.contains(firstOperationNurse) \u0026\u0026 schOperationNurseS.contains(secondOperationNurse)) ? 0 : 1;\n                    Date startDateTime = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"RealDT\".equals(DTRangeType.getType()))\n                            .findFirst()\n                            .map(DTRangeType::getRangeStartDT)\n                            .orElse(null);\n                    Date endDateTime = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"RealDT\".equals(DTRangeType.getType()))\n                            .findFirst()\n                            .map(DTRangeType::getRangeEndDT)\n                            .orElse(null);\n                    Date scheduledDateTime = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"BookDT\".equals(DTRangeType.getType()))\n                            .findFirst()\n                            .map(DTRangeType::getRangeStartDT)\n                            .orElse(null);\n\n                    //进手术室时间\n                    Date admissionOpeRommTime = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"InOperationRoomDT\".equals(DTRangeType.getType()))\n                            .findFirst()\n                            .map(DTRangeType::getRangeStartDT)\n                            .orElse(null);\n                    //出手术室时间\n                    Date dischargeOpeRommTime = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"OutOperationRoomDT\".equals(DTRangeType.getType()))\n                            .findFirst()\n                            .map(DTRangeType::getRangeStartDT)\n                            .orElse(null);\n                    //进出复苏室时间\n                    Optional\u003cDTRangeType\u003e dtRangeTypeOptional = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"InOutPacuDT\".equals(DTRangeType.getType()))\n                            .findFirst();\n\n                    //提出手术申请时间\n                    Optional\u003cDTRangeType\u003e reqRangeTypeOptional = surgicalDetail.getSurgicalDateRangeList().stream()\n                            .filter(DTRangeType -\u003e \"SchRegDT\".equals(DTRangeType.getType()))\n                            .findFirst();\n                    Date admissionPacuTime = null;\n                    Date dischargePacuTime = null;\n                    if (dtRangeTypeOptional.isPresent()) {\n                        admissionPacuTime = dtRangeTypeOptional.get().getRangeStartDT();\n                        dischargePacuTime = dtRangeTypeOptional.get().getRangeEndDT();\n                    }\n\n                    if (\"INSERT\".equals(saveType)) {\n                        operId = esbSubCommonService.queryCommonMaxNoByParam(patientId, visitId, \"OPERATION_MASTER\");\n                    } else {\n                        operId = Integer.valueOf(operationMasterResult.get(\"OPER_ID\").toString());\n                    }\n\n                    Map\u003cString, Object\u003e operationMasterMap = new HashMap\u003c\u003e();\n                    operationMasterMap.put(\"saveType\", saveType);\n                    operationMasterMap.put(\"patientId\", patientId);\n                    operationMasterMap.put(\"visitId\", visitId);\n                    operationMasterMap.put(\"operId\", operId);\n                    operationMasterMap.put(\"deptStayed\", deptStayed);\n                    operationMasterMap.put(\"operatingRoom\", operationRoom);\n                    operationMasterMap.put(\"operatingRoomNo\", operationRoomNo);\n                    operationMasterMap.put(\"diagBeforeOperation\", diagBeforeOperation);\n                    operationMasterMap.put(\"patientCondition\", patientCondition);\n                    operationMasterMap.put(\"operationScale\", operationScale);\n                    operationMasterMap.put(\"diagAfterOperation\", diagAfterOperation == null ? surgicalDetail.getSpecialMaterial().getText() : diagAfterOperation);\n\n                    operationMasterMap.put(\"emergencyIndicator\", emergencyIndicator);\n                    operationMasterMap.put(\"isolationIndicator\", isolationIndicator);\n                    operationMasterMap.put(\"operationClass\", surgicalDetail.getASALevel().getIdentifier());  //手术类型 特殊取值\n                    operationMasterMap.put(\"operatingDept\", operatingDept);\n                    operationMasterMap.put(\"surgeon\", surgeon);\n                    operationMasterMap.put(\"firstAssistant\", firstAssistant);\n                    operationMasterMap.put(\"secondAssistant\", secondAssistant);\n                    operationMasterMap.put(\"thirdAssistant\", thirdAssistant);\n                    operationMasterMap.put(\"fourthAssistant\", fourthAssistant);\n                    operationMasterMap.put(\"anesthesiaMethod\", surgicalDetail.getAnesthesiaMethod().getText());\n                    operationMasterMap.put(\"anesthesiaDoctor\", anesthesiaDoctor);\n                    operationMasterMap.put(\"anesthesiaAssistant\", anesthesiaAssistant);\n                    operationMasterMap.put(\"bloodTranDoctor\", bloodTranDoctor);\n                    operationMasterMap.put(\"firstOperationNurse\", firstOperationNurse);\n                    operationMasterMap.put(\"secondOperationNurse\", secondOperationNurse);\n                    operationMasterMap.put(\"firstSupplyNurse\", firstSupplyNurse);\n                    operationMasterMap.put(\"secondSupplyNurse\", secondSupplyNurse);\n                    operationMasterMap.put(\"nurseShiftIndicator\", ykmzFlag ? 0 : nurseShiftIndicator);\n                    operationMasterMap.put(\"startDateTime\", startDateTime);\n                    operationMasterMap.put(\"endDateTime\", endDateTime);\n                    operationMasterMap.put(\"satisfactionDegree\", Integer.valueOf(surgicalDetail.getAnesthesiaEffect().getIdentifier()));\n                    operationMasterMap.put(\"smoothIndicator\", \"\".equals(surgicalDetail.getIsSuccess()) ? null : Integer.valueOf(surgicalDetail.getIsSuccess()));\n                    operationMasterMap.put(\"inFluidsAmount\", StringUtils.isEmpty(surgicalDetail.getInFluidsAmount()) ? null : Integer.valueOf(surgicalDetail.getInFluidsAmount()));\n                    operationMasterMap.put(\"outFluidsAmount\", StringUtils.isEmpty(surgicalDetail.getOutFluidsAmount()) ? null : Integer.valueOf(surgicalDetail.getOutFluidsAmount()));\n                    operationMasterMap.put(\"bloodLossed\", StringUtils.isEmpty(surgicalDetail.getBloodLossed()) ? null : Integer.valueOf(surgicalDetail.getBloodLossed()));\n                    operationMasterMap.put(\"bloodTransfered\", StringUtils.isEmpty(surgicalDetail.getBloodTransfered()) ? null : Integer.valueOf(surgicalDetail.getBloodTransfered()));\n                    operationMasterMap.put(\"enteredBy\", personTypeWithDept.getName());\n                    operationMasterMap.put(\"inpType\", inpType);\n                    operationMasterMap.put(\"outpOperation\", outpOperation);\n                    operationMasterMap.put(\"szblqp\", szblqp);\n                    operationMasterMap.put(\"orderNo\", orderNo);\n                    operationMasterMap.put(\"orderSubNo\", orderSubNo);\n                    operationMasterMap.put(\"notesOnOperation\", notesOnOperation);\n                    operationMasterMap.put(\"secondAnesthesiaAssistant\", secondAnesthesiaAssistant);\n                    operationMasterMap.put(\"thirdAnesthesiaAssistant\", thirdAnesthesiaAssistant);\n                    operationMasterMap.put(\"fourthAnesthesiaAssistant\", fourthAnesthesiaAssistant);\n                    operationMasterMap.put(\"thirdSupplyNurse\", thirdSupplyNurse);\n                    operationMasterMap.put(\"secondAnesthesiaDoctor\", secondAnesthesiaDoctor);\n                    operationMasterMap.put(\"thirdAnesthesiaDoctor\", thirdAnesthesiaDoctor);\n                    operationMasterMap.put(\"errorComment\", errorComment);\n                    operationMasterMap.put(\"serialNo\", scheduleId);\n                    operationMasterMap.put(\"operVisitor\", operVisitor);\n                    operationMasterMap.put(\"posture\", surgicalDetail.getPosition().getText());\n                    operationMasterMap.put(\"applicationStatus\", applicationStatus);\n                    operationMasterMap.put(\"auditor\", auditor);\n                    //operationMasterMap.put(\"operationHours\", startDateTime == null ? \"\" : DateUtils.timeDistanceHours(startDateTime, endDateTime));  新桥字段\n                    operationMasterMap.put(\"surgeonId\", surgeonId);\n                    operationMasterMap.put(\"firstAssistantId\", firstAssistantId);\n                    operationMasterMap.put(\"secondAssistantId\", secondAssistantId);\n                    operationMasterMap.put(\"thirdAssistantId\", thirdAssistantId);\n                    operationMasterMap.put(\"fourthAssistantId\", fourthAssistantId);\n                    operationMasterMap.put(\"enteredById\", personTypeWithDept.getIDNumber());\n                    operationMasterMap.put(\"reqDoctor\", reqDoctor);\n                    operationMasterMap.put(\"reqDoctorId\", reqDoctorId);\n                    operationMasterMap.put(\"priority\", priority);\n                    operationMasterMap.put(\"serialNumber\", serialNumber);\n//                operationMasterMap.put(\"operationUnintendedType\", surgicalDetail.getNeedOnceOpt().getIdentifier());\n                    operationMasterMap.put(\"visitDate\", visitDate);\n                    operationMasterMap.put(\"visitNo\", visitNo);\n                    operationMasterMap.put(\"admissionOpeRommTime\", admissionOpeRommTime);  //麻醉事件数据：入手术室时间（手术室大门）\n                    operationMasterMap.put(\"monitorStartTime\", null);  //麻醉事件数据：入室监护时间\n                    operationMasterMap.put(\"admissionTripleCheckTime\", null);  //麻醉事件数据：三方核查时间（麻醉前三方核查时间）\n                    operationMasterMap.put(\"anesthesiaStartTime\", DateUtils.parseDate(surgicalDetail.getAnesthesiaStartTime()));  //麻醉事件数据：麻醉开始时间\n                    operationMasterMap.put(\"anesthesiaSatTime\", null);  //麻醉事件数据：麻醉效果满意可以开始手术时间\n                    operationMasterMap.put(\"operatingStartTime\", startDateTime);  //麻醉事件数据：手术开始时间\n                    operationMasterMap.put(\"operatingEndTime\", endDateTime);  //麻醉事件数据：手术结束时间\n                    operationMasterMap.put(\"anesthesiaEndTime\", DateUtils.parseDate(surgicalDetail.getAnesthesiaEndTime()));  //麻醉事件数据：麻醉结束时间\n                    operationMasterMap.put(\"monitorEndTime\", null);  //麻醉事件数据：监护结束时间\n                    operationMasterMap.put(\"dischargeTripleCheckTime\", null);  //麻醉事件数据：出室（手术间）三方核查时间\n                    operationMasterMap.put(\"admissionPacuTime\", admissionPacuTime);  //麻醉事件数据：入复苏室时间\n                    operationMasterMap.put(\"dischargePacuTime\", dischargePacuTime);  //麻醉事件数据：出复苏室时间\n                    operationMasterMap.put(\"dischargeOpeRommTime\", dischargeOpeRommTime);  //麻醉事件数据：出手术室时间\n\n                    //958特有字段\n                    operationMasterMap.put(\"endIndicator\", 1);\n                    operationMasterMap.put(\"orderTransfer\", null);\n                    operationMasterMap.put(\"chargeTransfer\", null);\n                    operationMasterMap.put(\"reckGroup\", \"\");\n                    operationMasterMap.put(\"operStatus\", 5);\n                    operationMasterMap.put(\"operationPosition\", surgicalDetail.getPosition().getText());\n                    operationMasterMap.put(\"operationEquipIndicator\", null);\n                    operationMasterMap.put(\"inDateTime\", admissionOpeRommTime);\n                    operationMasterMap.put(\"outDateTime\", dischargeOpeRommTime);\n                    operationMasterMap.put(\"otherInAmount\", StringUtils.isEmpty(surgicalDetail.getOtherInAmount()) ? null : Integer.valueOf(surgicalDetail.getOtherInAmount()));\n                    operationMasterMap.put(\"otherOutAmount\", StringUtils.isEmpty(surgicalDetail.getOtherOutAmount()) ? null : Integer.valueOf(surgicalDetail.getOtherOutAmount()));\n                    operationMasterMap.put(\"anesStartDateTime\", DateUtils.parseDate(surgicalDetail.getAnesthesiaStartTime()));\n                    operationMasterMap.put(\"returnDateTime\", DateUtils.parseDate(surgicalDetail.getAnesthesiaEndTime()));\n                    operationMasterMap.put(\"reqBy\", reqBy);\n                    operationMasterMap.put(\"reqDateTime\", reqDateTime);\n                    operationMasterMap.put(\"scheduledDateTime\", scheduledDateTime);\n                    operationMasterMap.put(\"sequence\", sequence);\n                    operationMasterMap.put(\"arriveDateTime\", new Date());\n                    operationMasterMap.put(\"surgeonLevel\", surgeonLevel); // TODO scale.identifer\n                    operationMasterMap.put(\"dutyDoctor\", dutyDoctor);\n                    operationMasterMap.put(\"intendStartTime\", intendStartTime);\n                    operationMasterMap.put(\"intendEndTime\", intendEndTime);\n                    operationMasterMap.put(\"identifiedNo\", identifiedNo);\n                    operationMasterMap.put(\"sourceInd\", sourceInd);\n\n                    int no = 1;\n\n                    List\u003cMap\u003cString, Object\u003e\u003e operationNameMapList = new ArrayList\u003c\u003e();\n\n                    for (SGR0101.SurgicalDetail surgicalDetail1 : body.getSurgery().getSurgicalDetailList()) {\n                        Map\u003cString, Object\u003e operationNameMap = new HashMap\u003c\u003e();\n                        operationNameMap.put(\"patientId\", patientId);\n                        operationNameMap.put(\"visitId\", visitId);\n                        operationNameMap.put(\"operId\", operId);\n                        operationNameMap.put(\"operationNo\", no);\n                        operationNameMap.put(\"operation\", surgicalDetail1.getSurgicalInfo().getText());\n                        operationNameMap.put(\"operationCode\", surgicalDetail1.getSurgicalInfo().getIdentifier());\n\n                        operationNameMap.put(\"operationScale\", surgicalDetail1.getOperationScale().getIdentifier());\n                        operationNameMap.put(\"operationLevel\", StringUtils.isEmpty(surgicalDetail1.getOperationScale().getIdentifier()) ? null : Integer.valueOf(surgicalDetail1.getOperationScale().getIdentifier()));\n                        operationNameMap.put(\"woundGrade\", surgicalDetail1.getCutsRating().getText());\n                        operationNameMap.put(\"serialNo\", serialNo);\n                        operationNameMap.put(\"sourceInd\", sourceInd);\n                        operationNameMapList.add(operationNameMap);\n                        no++;\n                    }\n\n                    esbSubOperationMapper.saveOperationMaster(operationMasterMap);\n\n                    if (\"UPDATE\".equals(saveType)) {\n                        esbSubCommonService.hisSimpleDelete(\"OPERATION_NAME\", patientId, visitId, String.valueOf(operId));\n                    }\n                    operationNameMapList.stream()\n                            .forEach(item -\u003e {\n                                esbSubOperationMapper.insertOperationName(item);\n                            });\n                    dealStatusEnum = DealStatusEnum.SUCCESS;\n\n                    resultMap.put(\"operId\", operId);\n                }\n            }\n        } catch (ServiceException serviceException) {\n            log.error(\"手术排班信息操作失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"手术排班信息操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"手术排班信息操作失败\");\n        return resultMap;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public SGR0102F_OUTPUT handSurgeryChargeAndRefund(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"958 手麻计费、退费回写失败\";\n        SGR0102F body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), SGR0102F.class);\n        String patientId = body.getPatientId();\n\n        log.info(\"958 手麻计费、退费回写入参:{}\", JSON.toJSONString(esbRequestInputDTO));\n        SGR0102F_OUTPUT output = new SGR0102F_OUTPUT();\n        try {\n            // 1. 数据整合\n            body.getDetailList().forEach(item -\u003e {\n                item.setPatientId(body.getPatientId());\n                item.setVisitId(body.getVisitId());\n                item.setOperId(body.getOperId());\n            });\n\n            // 2. 收退费同时传，按价格逆序排序\n            body.getDetailList().sort((o1, o2) -\u003e o2.getCosts().compareTo(o1.getCosts()));\n\n            Map\u003cString, String\u003e itemNoToHisItemNo = new HashMap\u003c\u003e();\n\n\n            output.setPatientId(body.getPatientId());\n            output.setVisitId(body.getVisitId());\n            output.setOperId(body.getOperId());\n\n            // 3. 遍历写入\n            body.getDetailList().forEach(item -\u003e {\n                Map\u003cString, Object\u003e operationBillMap = new HashMap\u003c\u003e();\n                operationBillMap.put(\"PATIENT_ID_IN\", item.getPatientId());\n                operationBillMap.put(\"VISIT_ID_IN\", item.getVisitId());\n                operationBillMap.put(\"OPER_ID_IN\", item.getOperId());\n\n                operationBillMap.put(\"AMOUNT_IN\", item.getAmount());\n                operationBillMap.put(\"BILL_ATTR_IN\", item.getBillAttr());\n                operationBillMap.put(\"UNITS_IN\", item.getUnits());\n                operationBillMap.put(\"CHARGES_IN\", item.getCharges());\n                operationBillMap.put(\"ORDERED_BY_IN\", item.getOrderedBy());\n                operationBillMap.put(\"ITEM_CLASS_IN\", item.getItemClass());\n                operationBillMap.put(\"ENTER_DATE_IN\", item.getEnterDate());\n                operationBillMap.put(\"ITEM_NO_IN\", item.getItemNo());\n                operationBillMap.put(\"PRICE_IN\", item.getPrice());\n                operationBillMap.put(\"PERFORMED_BY_IN\", item.getPerformedBy());\n                operationBillMap.put(\"COSTS_IN\", item.getCosts());\n                operationBillMap.put(\"ITEM_CODE_IN\", item.getItemCode());\n                operationBillMap.put(\"ENTERED_BY_IN\", item.getEnteredBy());\n                operationBillMap.put(\"FROM_SOURCE_IN\", item.getFromSource());\n                operationBillMap.put(\"ITEM_NAME_IN\", item.getItemName());\n                operationBillMap.put(\"ITEM_SPEC_IN\", item.getItemSpec());\n                operationBillMap.put(\"EXCHANGE_INDICATOR_IN\", item.getExchangeIndicator());\n                operationBillMap.put(\"SETTLE_FLAG_IN\", item.getSettleFlag());\n\n                // 退费关联\n                if (item.getCosts().compareTo(BigDecimal.ZERO) \u003c 0\n                        \u0026\u0026 (item.getInpbillItemNo() == null || item.getInpbillItemNo().isEmpty())) {\n                    String hisItemNo = itemNoToHisItemNo.get(item.getMrtlNo());\n                    if (hisItemNo == null) {\n                        throw new ServiceException(\"退费失败，未找到对应收费项目\");\n                    }\n                    operationBillMap.put(\"INPBILL_ITEM_NO_IN\", hisItemNo);\n                } else {\n                    operationBillMap.put(\"INPBILL_ITEM_NO_IN\", item.getInpbillItemNo());\n                }\n\n                esbSubOperationMapper.saveOperationBill(operationBillMap);\n\n                String inpBillItemNoOut = (String) operationBillMap.get(\"INPBILL_ITEM_NO_OUT\");\n\n                itemNoToHisItemNo.put(item.getItemNo(), inpBillItemNoOut);\n\n                SGR0102F_OUTPUT.Detail detail = new SGR0102F_OUTPUT.Detail();\n                detail.setItemNo(item.getItemNo());\n                detail.setInpbillItemNo(inpBillItemNoOut);\n                output.getDetailList().add(detail);\n            });\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (ServiceException serviceException) {\n            log.error(\"958 手麻计费、退费回写失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"958 手麻计费、退费回写异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"958 手麻计费、退费回写失败\");\n        return output;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void saveOutpMrPrivate(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"958 门诊病历回写失败\";\n        OMR0101R body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), OMR0101R.class);\n\n        List\u003cOMR0101R.OMR0101R_Detail\u003e outpMrList = body.getOutpMr();\n        String patientId = outpMrList.get(0).getPatientId();\n\n        log.info(\"958 门诊病历回写入参:{}\", JSON.toJSONString(esbRequestInputDTO));\n        try {\n            outpMrList.forEach(mr -\u003e {\n                // 1. 封装对象\n                EsbLengthLimitExec.doExec(mr);\n                Map\u003cString, Object\u003e outpMrMap = new HashMap\u003c\u003e();\n                outpMrMap.put(\"PATIENT_ID_IN\", mr.getPatientId());\n                outpMrMap.put(\"VISIT_DATE_IN\", mr.getVisitDate());\n                outpMrMap.put(\"VISIT_NO_IN\", mr.getVisitNo());\n                outpMrMap.put(\"ILLNESS_DESC_IN\", mr.getIllnessDesc());\n                outpMrMap.put(\"ANAMNESIS_IN\", mr.getAnamnesis());\n                outpMrMap.put(\"FAMILY_ILL_IN\", mr.getFamilyIll());\n                outpMrMap.put(\"INDIVIDUAL_IN\", mr.getIndividual());\n                outpMrMap.put(\"MED_HISTORY_IN\", mr.getMedHistory());\n                outpMrMap.put(\"BODY_EXAM_IN\", mr.getBodyExam());\n                outpMrMap.put(\"DIAG_DESC_IN\", mr.getDiagDesc());\n                outpMrMap.put(\"DIAG_CODE_IN\", mr.getDiagCode());\n                outpMrMap.put(\"ADVICE_IN\", mr.getAdvice());\n                outpMrMap.put(\"DOCTOR_IN\", mr.getDoctor());\n                outpMrMap.put(\"ORDINAL_IN\", mr.getOrdinal());\n                outpMrMap.put(\"FIRST_VISIT_IN\", mr.getFirstVisit());\n                outpMrMap.put(\"LAST_DOCTOR_IN\", mr.getLastDoctor());\n\n                String appId = esbRequestInputDTO.getHead().getAppId();\n                boolean ykmzFlag = EsbSourceAppIdEnum.YKMZ.name().equals(appId);\n                outpMrMap.put(\"SOURCE_IND_IN\", ykmzFlag ? \"2\" : null);\n\n                // 2. 调用存储过程\n                esbSubEncounterMapper.saveOutpMr(outpMrMap);\n            });\n\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n\n        } catch (ServiceException serviceException) {\n            log.error(\"958 门诊病历回写失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"958 门诊病历回写异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"门诊病历回写操作失败\");\n    }\n\n    @Override\n    public void savePatConditionRecPrivate(EsbRequestInputDTO esbRequestInputDTO) {\n        // 报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"958 诊断证明书回写失败\";\n        OPC0101R body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), OPC0101R.class);\n        List\u003cOPC0101R.OPC0101R_Detail\u003e patConditions = body.getPatCondition();\n\n        String patientId = patConditions.get(0).getPatientId();\n\n        log.info(\"958 诊断证明书回写入参:{}\", JSON.toJSONString(esbRequestInputDTO));\n        try {\n            patConditions.forEach(con -\u003e {\n                // 1. 封装对象\n                Map\u003cString, Object\u003e patConditionRecMap = new HashMap\u003c\u003e();\n                patConditionRecMap.put(\"VISIT_DATE_IN\", con.getVisitDate());\n                patConditionRecMap.put(\"VISIT_NO_IN\", con.getVisitNo());\n                patConditionRecMap.put(\"PATIENT_ID_IN\", con.getPatientId());\n                patConditionRecMap.put(\"NAME_IN\", con.getName());\n                patConditionRecMap.put(\"SEX_IN\", con.getSex());\n                patConditionRecMap.put(\"AGE_IN\", con.getAge());\n                patConditionRecMap.put(\"ID_NO_IN\", con.getIdNo());\n                patConditionRecMap.put(\"UNIT_IN_CONTRACT_IN\", con.getUnitInContract());\n                patConditionRecMap.put(\"VISIT_DEPT_IN\", con.getVisitDept());\n                patConditionRecMap.put(\"DOCTOR_IN\", con.getDoctor());\n                patConditionRecMap.put(\"PAT_CONDITION_IN\", con.getPatCondition());\n                patConditionRecMap.put(\"ADVICE_IN\", con.getAdvice());\n                patConditionRecMap.put(\"CHECK_IN\", con.getCheck());\n                patConditionRecMap.put(\"PHONE_NUMBER_HOME_IN\", con.getPhoneNumberHome());\n                patConditionRecMap.put(\"ENTER_DATE_TIME_IN\", con.getEnterDateTime());\n                patConditionRecMap.put(\"REC_NO_IN\", con.getRecNo());\n                patConditionRecMap.put(\"CHECK1_IN\", con.getCheck1());\n                patConditionRecMap.put(\"CONDITION_NO_IN\", con.getConditionNo());\n\n                // 2. 调用存储过程\n                esbSubEncounterMapper.saveOrUpdatePatConditionRec(patConditionRecMap);\n            });\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (ServiceException serviceException) {\n            log.error(\"958 诊断证明书回写失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"958 诊断证明书回写异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"诊断证明书回写操作失败\");\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void labReportAddAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        LAB0103 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), LAB0103.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检验报告操作失败\";\n\n        String patientId = null;\n        try {\n\n            if (\"LAB0103\".equals(tranCode)) {\n                //新增\n                HandleType publish = body.getReport().fetchHandleBy(HandleTypeEnum.Publish, false);\n                HandleType verify = body.getReport().fetchHandleBy(HandleTypeEnum.Verify, false);\n\n                LAB0103.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n                String testNo = orderGroup.getApply().getTestNo();\n                List\u003cLAB0103.OrderDetailGroup\u003e orderDetailGroupList = orderGroup.getOrderDetailGroupList();\n\n                int itemNo = 1;\n                for (LAB0103.OrderDetailGroup orderDetailGroup : orderDetailGroupList) {\n                    LAB0103.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n\n                    for (LAB0103.ObservationResult observationResult : orderDetail.getObservationResultList()) {\n\n                        Map\u003cString, Object\u003e labResultInsertMap = new HashMap\u003c\u003e();\n                        String performedBy = orderDetail.getFillerDepartment().getIdentifier();\n\n                        labResultInsertMap.put(\"testNo\", testNo);\n                        labResultInsertMap.put(\"itemNo\", observationResult.getItemNo());\n                        labResultInsertMap.put(\"reportItemCode\", observationResult.getObservationIdentifier().getIdentifier());\n                        labResultInsertMap.put(\"reportItemName\", observationResult.getObservationIdentifier().getText());\n                        labResultInsertMap.put(\"result\", observationResult.getObservationValue());\n                        labResultInsertMap.put(\"units\", observationResult.getUnits().getText());\n                        labResultInsertMap.put(\"abnormalIndicator\", observationResult.getAbnormalFlags());\n                        labResultInsertMap.put(\"instrumentId\", observationResult.getInstrumentNo());\n                        labResultInsertMap.put(\"resultDateTime\", publish.getHandleTime());\n                        labResultInsertMap.put(\"printContext\", observationResult.getReferencesRange());\n                        labResultInsertMap.put(\"printOrder\", observationResult.getDisplaySeqNo());\n                        labResultInsertMap.put(\"transcriptionist\", publish.getHandleBy().getName());\n                        labResultInsertMap.put(\"verifiedBy\", verify.getHandleBy().getName());\n                        labResultInsertMap.put(\"performedBy\", performedBy);\n                        log.info(\"【lab_result】\" + JSON.toJSONString(labResultInsertMap));\n                        esbSubInspectMapper.insertLabResult(labResultInsertMap);\n\n                        patientId = (String) labResultInsertMap.get(\"PATIENT_ID_OUT\");\n\n                    }\n                }\n            } else {\n                LAB0103.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n                String testNo = orderGroup.getApply().getTestNo();\n\n                Map\u003cString, Object\u003e labResultInsertMap = new HashMap\u003c\u003e();\n                labResultInsertMap.put(\"testNo\", testNo);\n                labResultInsertMap.put(\"cancelFlag\", 1);\n                esbSubInspectMapper.insertLabResult(labResultInsertMap);\n                patientId = (String) labResultInsertMap.get(\"PATIENT_ID_OUT\");\n            }\n\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"检验报告操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"检验报告操作失败\");\n\n    }\n\n\n    @Override\n    public void inHospitalRegAdd(EsbRequestInputDTO esbRequestInputDTO) {\n        // TODO 只适用新桥医院，其他医院按实际情况调整\n\n        // TODO 只接收来源医生站的，HIS发出的不接收；同一个事件统一主键，不同系统发出的消息需要屏蔽HIS源头数据，例如医生站推送就诊状态更新，HIS消息可以阻断推送（redis：esb:type:event:id = source, tll:60s）\n        String appId = esbRequestInputDTO.getHead().getAppId();\n        if (appId.equals(esbRegConfig.getAppId())) {\n            throw new RuntimeException(\"不能订阅自己发出的消息\");\n        }\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"住院单信息新增失败\";\n\n        PVM0109 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), PVM0109.class);\n        PVM0109.PatientVisit patientVisit = body.getPatientVisit();\n        List\u003cPVM0109.Diagnosis\u003e diagnosisList = body.getDiagnosisList();\n        PVM0109.InHospitalApply inHospitalApply = body.getInHospitalApply();\n        PVM0109.Payment payment =  body.getPaymentList() == null ? null : body.getPaymentList().get(0);\n        PVM0109.Demography demography = body.getDemography();\n\n        Map\u003cString, Object\u003e params = new HashMap\u003c\u003e();\n        String patientId = body.fetchPatientId();\n\n        try {\n            // 患者信息\n            params.put(\"patientId\", patientId);\n            String visitNum = body.getPatientVisit().getVisitNumber();\n            String visitDate = visitNum.substring(0, 8);\n            String visitNo = visitNum.substring(8);\n            params.put(\"visitDate\", DateUtils.parseDate(visitDate));\n            params.put(\"visitNo\", visitNo);\n\n            // 入院科室\n            String deptAdmissionTo = patientVisit.getPendingPatientLocation().getDepartment().getNO();\n//            String wardAdmissionTo = patientVisit.getPendingPatientLocation().getWard().getNO();\n            params.put(\"preDept\", deptAdmissionTo);\n\n            // 医生\n            String doctor = inHospitalApply.getApplyProvider().getName();\n            String doctorNo = inHospitalApply.getApplyProvider().getNo();\n            params.put(\"doctorName\", doctor);\n            params.put(\"userId\", doctorNo);\n\n            // 开单科室\n            Optional.ofNullable(patientVisit.getHandleList())\n                    .map(x -\u003e x.get(0))\n                    .map(HandleType::getHandleBy)\n                    .map(PersonTypeWithDept::getDepartment)\n                    .ifPresent(x -\u003e params.put(\"orderedBy\", x.getNO()));\n\n            // 预交金\n            String advancePayment =  inHospitalApply.getAdvancePayment() != null ? inHospitalApply.getAdvancePayment() : payment.getAccountInfo().getAdvancePayment();\n            params.put(\"prePerment\", advancePayment);\n\n            // 入院病情：危重等级PAT_ADM_CONDITION_DICT，1危，2急，3一般 (958)\n            String patAdmCondition = patientVisit.getCriticalLevel() != null ? patientVisit.getCriticalLevel().getIdentifier() : \"3\";\n            params.put(\"preCondition\", patAdmCondition);\n\n            // 状态：1未登记/2待评估/3待床中/4评估通过/5评估未通过/6待通知住院/7已通知住院/8已入院/9冻结/10作废\n            params.put(\"status\", 6);\n            params.put(\"priority\", 1);\n\n            // 地址\n            params.put(\"address\", demography.getAddressList().get(0).getStreetAddress());\n\n            // 诊断\n            String diagDesc = diagnosisList.stream().map(x -\u003e {\n                String diagnosisDesc = x.getDiagnosisDesc();\n                if (diagnosisDesc == null) {\n                    diagnosisDesc = x.getDiagnosisCode().getText();\n                }\n                return diagnosisDesc;\n            }).collect(Collectors.joining(\"；\"));\n            params.put(\"outpDiagnosis\", diagDesc);\n\n            // 入院证类型 表inp_card_dict：1急诊，2院前，3日间，4普通\n            String admissionType = patientVisit.getAdmissionType().getIdentifier();\n            params.put(\"inpCardType\", admissionType);\n\n            // 打印次数\n            params.put(\"printCount\", 0);\n\n            // 患者类型 2军人、1军属及其他优先、0一般\n            params.put(\"patTypeCode\", 1);\n\n            esbSubEncounterMapper.inHospitalRegAdd(params);\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (ServiceException serviceException) {\n            log.error(\"住院单新增失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"住院单新增异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"住院单新增操作失败\");\n    }\n\n    @Override\n    public void examAppointUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        RAD0102 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), RAD0102.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查预约信息更新失败\";\n        String testNo = null;\n\n        try {\n\n            List\u003cRAD0102.OrderDetailGroup\u003e orderDetailGroupList = body.getOrderGroupList()\n                    .stream()\n                    .findFirst()\n                    .get().getOrderDetailGroupList();\n\n            List\u003cMap\u003cString, Object\u003e\u003e examAppointsMapList = new ArrayList\u003c\u003e();\n            for (RAD0102.OrderDetailGroup orderDetailGroup : orderDetailGroupList) {\n\n                Map\u003cString, Object\u003e examAppointsMap = new HashMap\u003c\u003e();\n\n                examAppointsMap.put(\"testNo\", orderDetailGroup.getSchedule().getScheduleID());\n                examAppointsMap.put(\"scheduledDate\", DateUtils.parseDate(orderDetailGroup.getSchedule().getScheduleStartTime()));\n\n                examAppointsMapList.add(examAppointsMap);\n            }\n\n            if (CollectionUtil.isNotEmpty(examAppointsMapList)) {\n                testNo = (String) examAppointsMapList.stream().findFirst().get().get(\"testNo\");\n                examAppointsMapList.forEach(map -\u003e {\n                    esbSubInspectMapper.updateExamAppoints(map);\n                });\n                dealStatusEnum = DealStatusEnum.SUCCESS;\n            }\n\n        } catch (Exception e) {\n            log.error(\"检查预约信息更新失败-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, testNo, \"检查预约信息更新失败\");\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void labItemsAddAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        LAB0101 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), LAB0101.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查医技项目操作失败\";\n\n        try {\n\n            String patientId = body.getDemography()\n                    .getPatientIdentifierList()\n                    .stream()\n                    .filter(id -\u003e \"PatientID\".equals(id.getIDType()))\n                    .findFirst()\n                    .get().getIDNumber();\n            String visitId = body.getPatientVisit().getVisitNumber();\n            Integer itemNo = esbSubCommonService.queryCommonMaxNoByParam(patientId, visitId, \"INP_BILL_DETAIL\");\n\n            if (\"LAB0101\".equals(tranCode)) {\n                List\u003cMap\u003cString, Object\u003e\u003e labMasterList = new ArrayList\u003c\u003e();\n                List\u003cMap\u003cString, Object\u003e\u003e labItemsList = new ArrayList\u003c\u003e();\n                List\u003cMap\u003cString, Object\u003e\u003e inpBillDetailList = new ArrayList\u003c\u003e();\n\n                boolean isInp = \"I\".equals(body.getPatientVisit().getPatientClass());\n\n                for (LAB0101.OrderGroup orderGroup : body.getOrderGroupList()) {\n                    Map\u003cString, Object\u003e labMsterInsertMap = new HashMap\u003c\u003e();\n\n                    LAB0101.Apply apply = orderGroup.getApply();\n                    labMsterInsertMap.put(\"testNo\", apply.getApplyNo());\n                    labMsterInsertMap.put(\"resultStatus\", 2);\n                    HandleType handleType = orderGroup.getCommonOrder().getHandleList().get(0);\n                    labMsterInsertMap.put(\"executeDate\", handleType.getHandleTime());\n                    labMasterList.add(labMsterInsertMap);\n\n                    for (LAB0101.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                        LAB0101.ServiceInfo serviceInfo = orderDetailGroup.getOrderDetail().getServiceInfo();\n\n                        Map\u003cString, Object\u003e labItemsMap = new HashMap\u003c\u003e();\n                        labItemsMap.put(\"testNo\", apply.getApplyNo());\n                        labItemsMap.put(\"itemNo\", Integer.valueOf(orderDetailGroup.getOrderDetail()\n                                .getOrderDetailIdList()\n                                .stream()\n                                .filter(id -\u003e \"HISOrderDetailNo\".equals(id.getIDType()))\n                                .findFirst()\n                                .get()\n                                .getIDNumber()));\n                        labItemsMap.put(\"itemName\", serviceInfo.getItemInfo().getText());\n                        labItemsMap.put(\"itemCode\", serviceInfo.getItemInfo().getIdentifier());\n                        labItemsList.add(labItemsMap);\n\n                        if (isInp) {\n                            Map\u003cString, Object\u003e inpBillDetailMap = new HashMap\u003c\u003e();\n                            inpBillDetailMap.put(\"patientId\", patientId);\n                            inpBillDetailMap.put(\"visitId\", visitId);\n                            inpBillDetailMap.put(\"itemNo\", itemNo);\n                            inpBillDetailMap.put(\"itemClass\", serviceInfo.getClazz().getIdentifier());\n                            inpBillDetailMap.put(\"itemName\", serviceInfo.getItemInfo().getText());\n                            inpBillDetailMap.put(\"itemCode\", serviceInfo.getItemInfo().getIdentifier());\n                            inpBillDetailMap.put(\"itemSpec\", \"\");\n                            inpBillDetailMap.put(\"orderedBy\", \"\");\n                            inpBillDetailMap.put(\"performedBy\", \"\");\n                            inpBillDetailMap.put(\"amount\", new BigDecimal(serviceInfo.getItemqty()));\n                            inpBillDetailMap.put(\"units\", serviceInfo.getUnit().getText());\n                            inpBillDetailMap.put(\"costs\", new BigDecimal(serviceInfo.getPrice()));\n                            inpBillDetailMap.put(\"charges\", new BigDecimal(serviceInfo.getPrice()));\n                            inpBillDetailMap.put(\"billingDateTime\", new Date());\n                            inpBillDetailMap.put(\"operatorNo\", handleType.getHandleBy().getIDNumber());\n                            inpBillDetailMap.put(\"rcptNo\", \"\");\n                            inpBillDetailMap.put(\"price\", serviceInfo.getPrice());\n                            inpBillDetailMap.put(\"specialCharges\", \"\");\n                            inpBillDetailMap.put(\"insurTradeSerial\", \"\");\n                            inpBillDetailMap.put(\"transFlag\", \"\");\n                            inpBillDetailMap.put(\"insurFlag\", \"\");\n                            inpBillDetailList.add(inpBillDetailMap);\n                        }\n\n                    }\n\n                }\n\n                if (CollectionUtil.isNotEmpty(labItemsList) || CollectionUtil.isNotEmpty(inpBillDetailList)) {\n                    labMasterList.forEach(item -\u003e {\n                        esbSubInspectMapper.updateLabMasterRow(item);\n                    });\n\n                    inpBillDetailList.forEach(item -\u003e {\n                        esbSubInspectMapper.insertInpBillDetail(item);\n                    });\n\n                    labItemsList.forEach(item -\u003e {\n                        esbSubInspectMapper.insertLabTestItems(item);\n                    });\n                    dealStatusEnum = DealStatusEnum.SUCCESS;\n                }\n            } else {\n\n                // TODO 枚举未放开 lab_test_master是否更新\n                LAB0101.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n                LAB0101.Apply apply = orderGroup.getApply();\n                for (LAB0101.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n\n                    esbSubCommonService.hisSimpleDelete(\"INP_BILL_DETAIL\", patientId, visitId, String.valueOf(itemNo));\n                    esbSubCommonService.hisSimpleDelete(\"LAB_TEST_ITEMS\", apply.getApplyNo(), orderDetailGroup.getOrderDetail()\n                            .getOrderDetailIdList()\n                            .stream()\n                            .filter(id -\u003e \"HISOrderDetailNo\".equals(id.getIDType()))\n                            .findFirst()\n                            .get()\n                            .getIDNumber());\n                }\n                dealStatusEnum = DealStatusEnum.SUCCESS;\n            }\n\n        } catch (Exception e) {\n            log.error(\"检查医技项目操作失败-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, null, \"检查医技项目操作失败\");\n\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void labItemsAddAndCancelV2(EsbRequestInputDTO esbRequestInputDTO) {\n\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        LAB0101 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), LAB0101.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查医技项目操作失败\";\n        boolean isConfirm =  EsbSubBizEnum.LAB0101.getTranCode().equals(tranCode);\n        boolean isInp = \"I\".equals(body.getPatientVisit().getPatientClass());\n\n        try {\n\n            if (isConfirm) {\n                // 项目确认\n                // 绑定 UpdateState_ORDER_EXEC1.sql、UpdateState_ORDER_EXEC2.sql\n                // 尝试写入 lab_test_master、lab_test_items\n                body.getOrderGroupList().forEach(orderGroup -\u003e {\n                    LAB0101.Apply apply = orderGroup.getApply();\n                    HandleType handleType = orderGroup.getCommonOrder().fetchHandleBy(null, false);\n                    String testNo = apply.getTestNo();\n                    String applyNo = apply.getApplyNo();\n                    Map\u003cString, Object\u003e labTestMasterMap = new HashMap\u003c\u003e();\n                    labTestMasterMap.put(\"testNo\", testNo);\n                    labTestMasterMap.put(\"hisId\", applyNo);\n                    labTestMasterMap.put(\"performedBy\", Optional.ofNullable(orderGroup.getOrderDetailGroupList())\n                            .map(a -\u003e a.get(0))\n                            .map(LAB0101.OrderDetailGroup::getOrderDetail)\n                            .map(LAB0101.OrderDetail::getFillerDepartment)\n                            .map(CodedElementNOType::getIdentifier)\n                            .orElse(null)\n                    );\n\n                    String priority = apply.getPriority();\n                    labTestMasterMap.put(\"priorityIndicator\", priority == null ? \"0\" : priority);\n                    Date handleTime = handleType == null ? null : handleType.getHandleTime();\n                    labTestMasterMap.put(\"executeDate\", handleTime);\n                    labTestMasterMap.put(\"operatorNo\", body.getEvent().getOperator().getIDNumber());\n                    labTestMasterMap.put(\"inpFlag\", isInp ? 1 : 0);\n\n                    esbSubInspectMapper.lisReqConfirmOrCancel(labTestMasterMap);\n                });\n\n            } else {\n                // 项目取消\n                body.getOrderGroupList().forEach(orderGroup -\u003e {\n                    LAB0101.Apply apply = orderGroup.getApply();\n                    String testNo = apply.getTestNo();\n                    Map\u003cString, Object\u003e labTestMasterMap = new HashMap\u003c\u003e();\n                    labTestMasterMap.put(\"testNo\", testNo);\n                    labTestMasterMap.put(\"cancelFlag\", 1);\n\n                    esbSubInspectMapper.lisReqConfirmOrCancel(labTestMasterMap);\n                });\n            }\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"检查医技项目操作失败-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, null, \"检查医技项目操作失败\");\n\n    }\n\n    @Override\n    public void risStatusUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"检查状态信息更新失败\";\n        RAD0109 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), RAD0109.class);\n        String patientId = body.getDemography().getPatientIdentifierList().stream()\n                .filter(identifierListType -\u003e \"PatientID\".equals(identifierListType.getIDType()))\n                .findFirst()\n                .map(IdentifierListType::getIDNumber)\n                .orElse(\"\");\n\n        try {\n            HandleType handleType = body.getPatientVisit().getHandleList().get(0);\n            RAD0109.Apply apply = body.getOrderGroupList().get(0).getApply();\n            String technician = handleType.getHandleBy().getName();\n            Map\u003cString, Object\u003e paramMap = new HashMap\u003c\u003e();\n            paramMap.put(\"examNo\", apply.getApplyNo());\n            paramMap.put(\"technician\", technician);\n            paramMap.put(\"examDateTime\", null);\n            String examStatus = apply.getApplyDetailList().get(0).getServiceStatus().getIdentifier();\n\n            String reportStatus\n                    = Optional.ofNullable(body.getReport())\n                    .map(RAD0109.Report::getReportStatus)\n                    .map(CodedElementType::getIdentifier)\n                    .orElse(null);\n\n            switch (examStatus) {\n                case \"CheckComplete\":\n                    //收到申请\n                    paramMap.put(\"examStatus\", \"\");\n                    paramMap.put(\"examDateTime\", handleType.getHandleTime());\n                    break;\n                case \"Register\":\n                    //已执行\n                    paramMap.put(\"examStatus\", '2');\n                    if (!\"Undo\".equals(reportStatus)) {\n                        paramMap.put(\"examDateTime\", handleType.getHandleTime());\n                    }\n                    break;\n                case \"WaitAudit\":\n                    //初步报告\n                    paramMap.put(\"examStatus\", '3');\n                    break;\n                case \"ReportRelease\":\n                    paramMap.put(\"examStatus\", '4');\n                    break;\n                case \"CancelRegister\":\n                    paramMap.put(\"examStatus\", '1');\n                    break;\n                case \"Other\":\n                    paramMap.put(\"examStatus\", '9');\n                    break;\n                default:\n                    throw new ServiceException(\"该检查状态不接受处理，ServiceStatus：\" + examStatus);\n            }\n            esbSubInspectMapper.updateRisStatus(paramMap);\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"检查状态信息更新失败-tranCode：{}},messageId：{}}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"检查状态信息更新失败\");\n    }\n\n    @Override\n    @Transactional\n    public Object ordersStatusUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n\n        log.info(\"医嘱状态信息更新入参：{}\", JSON.toJSONString(esbRequestInputDTO));\n\n        Map\u003cString, Object\u003e resultMap = new HashMap\u003c\u003e();\n\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"医嘱状态信息更新失败\";\n        ORD0401 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), ORD0401.class);\n        String patientId = body.getDemography().getPatientIdentifierList().stream()\n                .filter(identifierListType -\u003e \"PatientID\".equals(identifierListType.getIDType()))\n                .findFirst()\n                .map(IdentifierListType::getIDNumber)\n                .orElse(\"\");\n        try {\n            boolean isOutp = \"O\".equals(body.getPatientVisit().getPatientClass());\n            if (isOutp) {  //门诊药品处方\n                Map\u003cString, Object\u003e map = new HashMap\u003c\u003e();\n                ORD0401.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n                ORD0401.CommonOrder commonOrder = orderGroup.getCommonOrder();\n\n                if (\"SD\".equals(commonOrder.getOrderControl())) {  //发药 SEND DRUG (退药也走发药流程)\n\n                    HandleType entryType = commonOrder.getHandleList()\n                            .stream()\n                            .filter(handleType -\u003e \"Entry\".equals(handleType.getType().getIdentifier()))\n                            .findFirst()\n                            .orElse(null);\n                    HandleType actionType = commonOrder.getHandleList()\n                            .stream()\n                            .filter(handleType -\u003e \"Action\".equals(handleType.getType().getIdentifier()))\n                            .findFirst()\n                            .orElse(null);\n                    String hisOrderNo = commonOrder.getOrderIdList().stream()\n                            .filter(identifierListType -\u003e \"HISOrderNo\".equals(identifierListType.getIDType()))\n                            .findFirst()\n                            .map(IdentifierListType::getIDNumber)\n                            .orElse(null);\n\n                    map.put(\"In_AuditOp\", actionType.getHandleBy().getName());\n                    map.put(\"In_Dispenser\", entryType.getHandleBy().getName());\n                    map.put(\"In_DispenserId\", entryType.getHandleBy().getIDNumber());\n                    map.put(\"In_StorageCode\", entryType.getHandleBy().getDepartment().getIdentifier());\n                    map.put(\"In_PrescDate\", commonOrder.getStartDateTime());\n                    map.put(\"In_PrescNo\", hisOrderNo);\n\n                    esbSubOrdersMapper.outpOrdersStatusUpdate(map);\n                    ExceptionUtil.dealReturnInfo(map);\n\n                    resultMap.put(\"MakeTime\", DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD_HH_MM_SS, DateUtils.parseDate(map.get(\"In_MakeTime\").toString())));\n\n                    dealStatusEnum = DealStatusEnum.SUCCESS;\n                }\n            } else {  //住院\n\n            }\n        } catch (ServiceException serviceException) {\n            log.error(\"医嘱状态信息更新失败-tranCode：{},messageId：{}\", tranCode, messageId, serviceException);\n            errorMsg = serviceException.getMessage();\n            dealStatusEnum = DealStatusEnum.FAIL;\n        } catch (Exception e) {\n            log.error(\"医嘱状态信息更新失败-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = ExceptionUtil.getFixedLengthStackTraceMsg(e);\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"医嘱状态信息更新失败\");\n        return resultMap;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void microbeLabReportAddAndCancel(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        MIC0201 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), MIC0201.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        String errorMsg = \"微生物检验报告操作失败\";\n\n        String patientId = null;\n        try {\n            if (\"MIC0201\".equals(tranCode)) {\n                //新增\n                MIC0201.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n                HandleType publish = body.getReport().fetchHandleBy(HandleTypeEnum.Publish, false);\n                HandleType verify = body.getReport().fetchHandleBy(HandleTypeEnum.Verify, false);\n                String testNo = orderGroup.getApply().getTestNo();\n\n                for (MIC0201.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                    MIC0201.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n                    for (MIC0201.Observation observation : orderDetail.getObservationList()) {\n                        for (MIC0201.Bacteria bacteria : observation.getBacteriaList()) {\n                            CodedElementType bacteriaInfo = bacteria.getBacteriaInfo();\n                            for (MIC0201.ObservationResult observationResult : bacteria.getObservationResultList()) {\n                                Map\u003cString, Object\u003e labResultInsertMap = new HashMap\u003c\u003e();\n                                labResultInsertMap.put(\"testNo\", testNo);\n                                labResultInsertMap.put(\"itemNo\", observationResult.getItemNo());\n                                labResultInsertMap.put(\"reportItemCode\", bacteriaInfo.getIdentifier());\n                                labResultInsertMap.put(\"reportItemName\", bacteriaInfo.getText());\n                                labResultInsertMap.put(\"result\", bacteria.getBacteriaConcentration());\n//                        labResultInsertMap.put(\"units\", observationResult.getUnits().getText());\n//                        labResultInsertMap.put(\"abnormalIndicator\", observationResult.getAbnormalFlags());\n                                labResultInsertMap.put(\"instrumentId\", observationResult.getInstrumentNo());\n                                labResultInsertMap.put(\"resultDateTime\", publish.getHandleTime());\n                                labResultInsertMap.put(\"printContext\", observationResult.getReferencesRange());\n                                labResultInsertMap.put(\"printOrder\", observationResult.getDisplaySeqNo());\n                                labResultInsertMap.put(\"transcriptionist\", publish.getHandleBy().getName());\n                                labResultInsertMap.put(\"verifiedBy\", verify.getHandleBy().getName());\n                                /**\n                                 *  TODO\n                                 *  MICRO_DATA_ID2_NAME_IN IN VARCHAR2, -- 抗生素名称\n                                 *  MICRO_DATA_ID2_RESULT1_IN IN VARCHAR2, -- 定量结果\n                                 *  MICRO_DATA_ID2_RESULT2_IN IN VARCHAR, -- 定性结果\n                                 */\n                                labResultInsertMap.put(\"MICRO_DATA_ID2_NAME\", observationResult.getObservationIdentifier().getText());\n                                labResultInsertMap.put(\"MICRO_DATA_ID2_RESULT1\", observationResult.getObservationValue());\n                                labResultInsertMap.put(\"MICRO_DATA_ID2_RESULT2\", observationResult.getAbnormalFlags());\n\n\n                                log.info(\"【lab_result】\" + JSON.toJSONString(labResultInsertMap));\n                                esbSubInspectMapper.insertLabResult(labResultInsertMap);\n\n                                patientId = (String) labResultInsertMap.get(\"PATIENT_ID_OUT\");\n                            }\n                        }\n                    }\n\n                }\n\n            } else {\n                MIC0201.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n                String testNo = orderGroup.getApply().getTestNo();\n\n                Map\u003cString, Object\u003e labResultInsertMap = new HashMap\u003c\u003e();\n                labResultInsertMap.put(\"testNo\", testNo);\n                labResultInsertMap.put(\"cancelFlag\", 1);\n                esbSubInspectMapper.insertLabResult(labResultInsertMap);\n                patientId = (String) labResultInsertMap.get(\"PATIENT_ID_OUT\");\n            }\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"微生物检验报告操作异常-tranCode：{},messageId：{}\", tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"微生物检验报告操作失败\");\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public InpBillDetailOutput inspectStatusUpdate(EsbRequestInputDTO esbRequestInputDTO) {\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        LAB0106 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), LAB0106.class);\n        String errorMsg = \"检验状态信息更新失败\";\n        String patientId = body.fetchPatientId();\n\n\n        InpBillDetailOutput output = new InpBillDetailOutput();\n\n        DealStatusEnum dealStatusEnum = DealStatusEnum.SUCCESS;\n        try {\n            Map\u003cString, Object\u003e labTestMasterMap = new HashMap\u003c\u003e();\n            LAB0106.PatientVisit patientVisit = body.getPatientVisit();\n//            HandleType handleType = patientVisit.getHandleList().get(0);\n            boolean isInp = \"I\".equals(patientVisit.getPatientClass());\n\n            LAB0106.Apply apply = body.getOrderGroupList().get(0).getApply();\n            LAB0106.ApplyDetail applyDetail = apply.getApplyDetailList().get(0);\n            LAB0106.Specimen specimen = applyDetail.getSpecimenList().get(0);\n            String status = specimen.getSpecimenStatus().getIdentifier();\n            String performedBy = applyDetail.getFillerDepartment().getIdentifier();\n\n            String testNo = apply.getTestNo();\n            String applyNo = apply.getApplyNo();\n\n            labTestMasterMap.put(\"patientId\", patientId);\n            labTestMasterMap.put(\"testNo\", testNo);\n            labTestMasterMap.put(\"hisId\", applyNo);\n            labTestMasterMap.put(\"performedBy\", performedBy);\n\n\n\n            if (StringUtils.isNotEmpty(status)) {\n                switch (status) {\n                    case \"SignFor\":\n                        // 标本签收\n                        labTestMasterMap.put(\"requisitionStatus\", \"received\");\n                        labTestMasterMap.put(\"workingId\", apply.getWorkingId());\n                        labTestMasterMap.put(\"executeDate\", body.getEvent().getRecordDatetime());\n                        labTestMasterMap.put(\"inpFlag\", isInp ? 1 : 0);\n\n                        labTestMasterMap.put(\"spcmSampleDateTime\", DateUtils.parseDate(specimen.getSpecimenCollectionDT()));\n                        labTestMasterMap.put(\"spcmReceivedDateTime\", DateUtils.parseDate(specimen.getSpecimenReceiveDT()));\n\n                        // 更新状态\n                        esbSubInspectMapper.updateLabMasterStatus(labTestMasterMap);\n                        if (isInp) {\n                            // 住院计费\n                            output = labItemsChargeOrRefund(body, null);\n                        }\n                        break;\n                    case \"Collect\":\n                        // 收集，住院收试管费用\n                        if (isInp) {\n                            // 一个条码只计费第一个项目试管费用\n                            Map\u003cString, Object\u003e labTestCollectMap = new HashMap\u003c\u003e();\n                            labTestCollectMap.put(\"testNo\", testNo);\n                            labTestCollectMap.put(\"clinicItemCode\", applyDetail.getServiceInfo().getItemInfo().getIdentifier());\n                            labTestCollectMap.put(\"operatorNo\", body.getEvent().getOperator().getIDNumber());\n                            esbSubInspectMapper.labTestCollect(labTestCollectMap);\n                        }\n                        break;\n                    case \"Canceled\":\n                        // 取消标本\n                        labTestMasterMap.put(\"requisitionStatus\", \"Canceled\");\n                        labTestMasterMap.put(\"refundFlag\", 0);\n                        labTestMasterMap.put(\"inpFlag\", isInp ? 1 : 0);\n                        esbSubInspectMapper.updateLabMasterStatus(labTestMasterMap);\n                        break;\n                    case \"CanceledAndRefund\":\n                        // 取消标本，并退费\n                        labTestMasterMap.put(\"requisitionStatus\", \"CanceledAndRefund\");\n                        labTestMasterMap.put(\"refundFlag\", 1);\n                        labTestMasterMap.put(\"inpFlag\", isInp ? 1 : 0);\n                        esbSubInspectMapper.updateLabMasterStatus(labTestMasterMap);\n                        if (isInp) {\n                            // 住院取消计费\n                            output = labItemsChargeOrRefund(body, 1);\n                        }\n\n                        break;\n                    case \"\":\n                    default:break;\n                }\n            }\n\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            errorMsg = e.getMessage();\n            dealStatusEnum = DealStatusEnum.EXCEPTION;\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"检验状态信息更新操作失败\");\n        return output;\n    }\n\n\n    public InpBillDetailOutput labItemsChargeOrRefund(LAB0106 body, Integer refundFlag) {\n\n        String patientId = body.fetchPatientId();\n        String visitId = body.getPatientVisit().getVisitCount();\n\n        // 项目确费\n        // UpdateState_INCEPT_CONFIRM1\n        LAB0106.OrderGroup orderGroup = body.getOrderGroupList().get(0);\n        InpBillDetailOutput inpBillDetailOutput = new InpBillDetailOutput();\n\n        // 2. 项目明细写入\n        for (LAB0106.ApplyDetail applyDetail : orderGroup.getApply().getApplyDetailList()) {\n            ItemType serviceInfo = applyDetail.getServiceInfo();\n\n            Map\u003cString, Object\u003e inpBillDetailMap = new HashMap\u003c\u003e();\n\n            inpBillDetailMap.put(\"patientId\", patientId);\n            inpBillDetailMap.put(\"visitId\", visitId);\n            inpBillDetailMap.put(\"itemClass\", \"C\");\n            inpBillDetailMap.put(\"itemCode\", serviceInfo.getItemInfo().getIdentifier());\n            inpBillDetailMap.put(\"orderedBy\", Optional.ofNullable(applyDetail.getPlacerDepartment()).map(CodedElementNOType::getIdentifier).orElse(null));\n            inpBillDetailMap.put(\"performedBy\", Optional.ofNullable(applyDetail.getFillerDepartment()).map(CodedElementNOType::getIdentifier).orElse(null));\n            inpBillDetailMap.put(\"billingDateTime\", new Date());\n            inpBillDetailMap.put(\"operatorNo\", body.getEvent().getOperator().getIDNumber());\n            inpBillDetailMap.put(\"refundFlag\", refundFlag);\n            inpBillDetailMap.put(\"inpBillItemNoIn\", applyDetail.getInpBillItemNo());\n            esbSubInspectMapper.insertInpBillDetailV3(inpBillDetailMap);\n\n            Object itemNoOut = inpBillDetailMap.get(\"INPBILL_ITEM_NO_OUT\");\n            InpBillDetailOutput.Detail outputDetail = new InpBillDetailOutput.Detail();\n            outputDetail.setItemCode(serviceInfo.getItemInfo().getIdentifier());\n            outputDetail.setInpbillItemNo(String.valueOf(itemNoOut));\n\n            inpBillDetailOutput.getDetailList().add(outputDetail);\n        }\n\n        return inpBillDetailOutput;\n    }\n\n\n\n\n    @Override\n//    @Transactional(rollbackFor = Exception.class)\n    public InpBillDetailOutput materialChargeAdd(EsbRequestInputDTO esbRequestInputDTO) {\n        // UpdateState_COLLECT_CONFIRM1.sql\n\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n        RAD0117 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), RAD0117.class);\n        String errorMsg = \"材料费收费退费操作失败\";\n        String patientId = body.fetchPatientId();\n\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n        // 返回值\n        InpBillDetailOutput output = new InpBillDetailOutput();\n\n        try {\n            boolean chargeFlag = \"RAD0117\".equals(tranCode);\n\n            if (\"I\".equals(body.getPatientVisit().getPatientClass())) {\n                // 手动开启事务\n                DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();\n                def1.setName(\"Transaction1\");\n                def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n                TransactionStatus status1 = transactionManager.getTransaction(def1);\n                try {\n\n                    // 住院\n                    String visitId = body.getPatientVisit().getVisitNumber();\n                    visitId = visitId.contains(\"-\") ? visitId.split(\"-\")[1] : visitId;\n                    output.setPatientId(patientId);\n                    output.setVisitId(visitId);\n\n                    List\u003cRAD0117.OrderDetailGroup\u003e orderDetailGroupList = body.getOrderGroupList().get(0).getOrderDetailGroupList();\n                    String orderDoctor = body.getOrderGroupList().get(0).getCommonOrder().getHandleList().get(0).getHandleBy().getName();\n\n                    String testNo =  body.getOrderGroupList().get(0).getApply().getTestNo();\n                    for (RAD0117.OrderDetailGroup orderDetailGroup : orderDetailGroupList) {\n                        // 大项目\n                        RAD0117.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n                        RAD0117.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n\n                        String itemNo = EsbBeanUtils.getId(orderDetail.getOrderDetailIdList(), \"CISOrderDetailNo\");\n\n                        Map\u003cString, Object\u003e inpBillDetailMap = new HashMap\u003c\u003e();\n\n                        inpBillDetailMap.put(\"patientId\", patientId);\n                        inpBillDetailMap.put(\"visitId\", visitId);\n                        inpBillDetailMap.put(\"itemCode\", serviceInfo.getItemInfo().getIdentifier());\n                        inpBillDetailMap.put(\"orderedBy\", orderDetailGroup.getOrderDetail().getPlacerDepartment().getIdentifier());\n                        inpBillDetailMap.put(\"performedBy\", orderDetailGroup.getOrderDetail().getFillerDepartment().getIdentifier());\n                        inpBillDetailMap.put(\"billingDateTime\", new Date());\n                        inpBillDetailMap.put(\"operatorNo\", body.getEvent().getOperator().getIDNumber());\n                        inpBillDetailMap.put(\"orderDoctor\", orderDoctor);\n                        inpBillDetailMap.put(\"refundFlag\", chargeFlag ? 0 : 1);\n                        inpBillDetailMap.put(\"amount\", Optional.ofNullable(serviceInfo.getItemqty()).filter(a -\u003e !a.isEmpty()).map(BigDecimal::new).orElse(BigDecimal.ONE));\n                        // 大项目进行计费\n                        esbSubInspectMapper.insertInpBillDetailV3(inpBillDetailMap);\n\n                        Object itemNoOut = inpBillDetailMap.get(\"INPBILL_ITEM_NO_OUT\");\n                        InpBillDetailOutput.Detail outputDetail = new InpBillDetailOutput.Detail();\n                        outputDetail.setItemNo(testNo == null ? itemNo : testNo);\n                        outputDetail.setItemCode(serviceInfo.getItemInfo().getIdentifier());\n                        outputDetail.setInpbillItemNo(String.valueOf(itemNoOut));\n                        output.setDetailList(Collections.singletonList(outputDetail));\n                    }\n                    transactionManager.commit(status1); // 提交第一个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status1); // 回滚第一个事务\n                    throw e;\n                }\n\n            } else if (\"O\".equals(body.getPatientVisit().getPatientClass())) {\n                // 门诊\n\n                String orderControl = body.getOrderGroupList().get(0).getCommonOrder().getOrderControl();\n                Map\u003cObject, Map\u003cString, Object\u003e\u003e forAutoBillMap = new HashMap\u003c\u003e();\n                Set\u003cString\u003e serialNoSet = new HashSet\u003c\u003e();\n                // 手动开启事务\n                DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();\n                def1.setName(\"Transaction1\");\n                def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n                TransactionStatus status1 = transactionManager.getTransaction(def1);\n                try {\n                    if (\"NW\".equals(orderControl)) {\n                        //新增\n                        String visitNum = body.getPatientVisit().getVisitNumber();\n                        String visitDate = visitNum.substring(0, 8);\n                        String visitNo = visitNum.substring(8);\n                        output.setVisitDate(visitDate);\n                        output.setVisitNo(visitNo);\n\n                        List\u003cRAD0117.OrderGroup\u003e orderGroupList = body.getOrderGroupList();\n\n                        Map\u003cString, Object\u003e clinicMaster = esbSubCommonService.hisSimpleQuery(\"CLINIC_MASTER\", null, visitDate, visitNo).getSingle();\n                        if (clinicMaster.isEmpty()) {\n                            throw new ServiceException(\"未找到就诊信息\");\n                        }\n                        String chargeType = String.valueOf(clinicMaster.get(\"CHARGE_TYPE\"));\n\n                        //医嘱\n                        for (RAD0117.OrderGroup orderGroup : orderGroupList) {\n                            HandleType handleType = orderGroup.getCommonOrder().fetchHandleBy(HandleTypeEnum.Apply, false);\n                            PersonTypeWithDept personTypeWithDept = handleType.getHandleBy();\n                            String doctorName = personTypeWithDept.getName();\n                            String doctorNO = personTypeWithDept.getIDNumber();\n\n                            // 开单时间\n                            Date handleDate = handleType.getHandleTimeOfNotNull(\"开立处方缺少开单时间\");\n\n                            String testNo = orderGroup.getApply().getTestNo();\n\n                            //医嘱详情\n                            for (RAD0117.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n\n                                RAD0117.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n\n                                //项目信息\n                                RAD0117.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n\n                                String cISOrderDetailNo = orderDetail.getOrderDetailIdList()\n                                        .stream()\n                                        .filter(identifierListType -\u003e \"CISOrderDetailNo\".equals(identifierListType.getIDType()))\n                                        .findFirst()\n                                        .map(IdentifierListType::getIDNumber)\n                                        .orElse(null);\n\n                                // 非药品医嘱\n                                // TODO 计算价格\n                                List\u003cMap\u003cString, Object\u003e\u003e currentPriceList = esbSubCommonService.hisSimpleQuery(\"CURRENT_PRICE_LIST\", null, serviceInfo.getItemInfo().getIdentifier(), \"C\").getList();\n                                if (currentPriceList.isEmpty()){\n                                    throw new ServiceException(\"未找到临床项目明细：\" + serviceInfo.getItemInfo().getIdentifier());\n                                }\n                                BigDecimal amount = Optional.ofNullable(serviceInfo.getItemqty()).filter(a -\u003e !a.isEmpty()).map(BigDecimal::new).orElse(BigDecimal.ONE);\n\n                                BigDecimal costs = currentPriceList.stream().map(c -\u003e new BigDecimal(String.valueOf(c.get(\"PRICE\")))\n                                                .multiply(new BigDecimal(String.valueOf(c.get(\"AMOUNT\"))))\n                                                .multiply(amount))\n                                        .reduce(BigDecimal.ZERO, BigDecimal::add);\n\n                                Map\u003cString, Object\u003e hisRequisitionMap = new HashMap\u003c\u003e();\n                                String inpatientId = visitNo + \"/\" + DateUtil.format(DateUtils.parseDate(visitDate, \"yyyyMMdd\"), \"yyyy-MM-dd\");\n                                hisRequisitionMap.put(\"patientType\", \"2\");\n                                hisRequisitionMap.put(\"outpatientId\", patientId);\n                                hisRequisitionMap.put(\"inpatientId\", inpatientId);\n                                hisRequisitionMap.put(\"chargeType\", chargeType);\n                                hisRequisitionMap.put(\"patientDept\", orderDetailGroup.getOrderDetail().getPlacerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"clinicalDiagnoses\", null);\n                                hisRequisitionMap.put(\"medicalRecord\", \"0\");\n                                hisRequisitionMap.put(\"requisitionDept\", orderDetailGroup.getOrderDetail().getPlacerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"requisitionTime\", handleDate);\n                                hisRequisitionMap.put(\"requisitionPerson\", doctorName + \".\" + doctorNO);\n                                hisRequisitionMap.put(\"executeDept\", orderDetailGroup.getOrderDetail().getFillerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"sampleClass\", null);\n                                hisRequisitionMap.put(\"amount\", amount);\n\n                                // TODO HIS编码-执行科室\n                                hisRequisitionMap.put(\"chargeItemId\", serviceInfo.getItemInfo().getIdentifier() + \"-\"\n                                        + orderDetailGroup.getOrderDetail().getFillerDepartment().getIdentifier());\n                                hisRequisitionMap.put(\"chargeName\", serviceInfo.getItemInfo().getText());\n                                hisRequisitionMap.put(\"charge\", costs);\n                                hisRequisitionMap.put(\"chargeState\", \"0\");\n                                hisRequisitionMap.put(\"chargeTime\", null);\n                                hisRequisitionMap.put(\"chargeItemState\", \"0\");\n                                hisRequisitionMap.put(\"requisitionState\", \"received\");\n                                // 958 标本代码\n                                hisRequisitionMap.put(\"remark\", null);\n                                // TODO LIS编码\n                                hisRequisitionMap.put(\"chargeItemIdLis\", serviceInfo.getItemInfo().getNO());\n                                hisRequisitionMap.put(\"prePlanFlag\", \"\");\n                                hisRequisitionMap.put(\"requisitionId\", testNo);\n\n                                esbSubInspectMapper.insertLisHisRequisition(hisRequisitionMap);\n\n                                Object hisIdOut = hisRequisitionMap.get(\"HIS_ID_OUT\");\n                                String serialNoOut = String.valueOf(hisRequisitionMap.get(\"SERIAL_NO_OUT\"));\n                                serialNoSet.add(serialNoOut);\n\n\n                                InpBillDetailOutput.Detail outputDetail = new InpBillDetailOutput.Detail();\n                                outputDetail.setItemNo(testNo == null ? cISOrderDetailNo : testNo);\n                                outputDetail.setItemCode(serviceInfo.getItemInfo().getIdentifier());\n                                outputDetail.setSerialNo(serialNoOut);\n                                outputDetail.setHisId(String.valueOf(hisIdOut));\n                                output.getDetailList().add(outputDetail);\n                            }\n                        }\n                        if (\"军队医改\".equals(chargeType)) {\n                            //军免计价\n                            for (String serialNo : serialNoSet) {\n                                Map\u003cString, Object\u003e armyMap = new HashMap\u003c\u003e();\n                                armyMap.put(\"patientId\", patientId);\n                                armyMap.put(\"serialNo\", serialNo);\n                                armyMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                armyMap.put(\"visitNo\", visitNo);\n\n                                forAutoBillMap.put(serialNo, armyMap);\n                            }\n                        }\n\n                    } else if (\"CA\".equals(orderControl)) {\n                        //撤销\n                        for (RAD0117.OrderGroup orderGroup : body.getOrderGroupList()) {\n                            String serialNo = orderGroup.fetchOrderId(OrderIdTypeEnum.HISOrderNo);\n                            String visitNum = body.getPatientVisit().getVisitNumber();\n                            String visitDate = visitNum.substring(0, 8);\n                            String visitNo = visitNum.substring(8);\n\n\n                            String testNo = orderGroup.getApply().getTestNo();\n                            for (RAD0117.OrderDetailGroup orderDetailGroup : orderGroup.getOrderDetailGroupList()) {\n                                RAD0117.OrderDetail orderDetail = orderDetailGroup.getOrderDetail();\n                                RAD0117.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n                                String itemCode = serviceInfo.getItemInfo().getIdentifier();\n\n                                String hISOrderDetailNo = EsbBeanUtils.getId(orderDetailGroup.getOrderDetail().getOrderDetailIdList(), \"HISOrderDetailNo\", \"HISOrderDetailNo 不能为空\");\n\n                                String[] serialNoArr = serialNo.split(\"\\\\|\");\n                                Map\u003cString, Object\u003e orderMap = new HashMap\u003c\u003e();\n                                orderMap.put(\"serialNo\", serialNoArr[0]);\n                                orderMap.put(\"visitDate\", DateUtils.parseDate(visitDate));\n                                orderMap.put(\"visitNo\", Long.valueOf(visitNo));\n                                orderMap.put(\"patientId\", patientId);\n                                orderMap.put(\"orderType\", \"LAB_TEST\");\n                                orderMap.put(\"appointNo\", hISOrderDetailNo);\n\n                                esbSubInspectMapper.deleteOutpOrders(orderMap);\n\n                                //项目信息\n                                InpBillDetailOutput.Detail outputDetail = new InpBillDetailOutput.Detail();\n                                outputDetail.setItemNo(testNo);\n                                outputDetail.setItemCode(itemCode);\n                                outputDetail.setSerialNo(serialNo);\n                                output.getDetailList().add(outputDetail);\n                            }\n\n                        }\n                    } else {\n                        throw new ServiceException(\"未知的操作类型-OrderControl：\" + orderControl);\n                    }\n                    transactionManager.commit(status1); // 提交第一个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status1); // 回滚第一个事务\n                    throw e;\n                }\n\n                // 划价\n                DefaultTransactionDefinition def2 = new DefaultTransactionDefinition();\n                def2.setName(\"Transaction2\");\n                def2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n                TransactionStatus status2 = transactionManager.getTransaction(def2);\n\n                try {\n                    if (!forAutoBillMap.isEmpty()) {\n                        forAutoBillMap.forEach((serialNoOut, armyMap) -\u003e {\n                            esbSubInspectMapper.armyAutoBill(armyMap);\n                            log.info(\"申请单-ArmyAutoBill:\" + armyMap.toString());\n                        });\n                    }\n                    transactionManager.commit(status2); // 提交第二个事务\n                } catch (Exception e) {\n                    transactionManager.rollback(status2); // 回滚第二个事务\n                    throw e;\n                }\n\n            }\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            errorMsg = e.getMessage();\n            log.error(\"\", e);\n            dealStatusEnum = DealStatusEnum.FAIL;\n        }\n\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, patientId, \"材料费收费退费操作失败\");\n        return output;\n    }\n\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public void criticalValuePubAndRecall(EsbRequestInputDTO esbRequestInputDTO) {\n        //报文解析\n        String messageId = esbRequestInputDTO.getHead().getMessageId();\n        String tranCode = esbRequestInputDTO.getHead().getTranCode();\n\n        LAB0110 body = JSONObject.parseObject(JSON.toJSONString(esbRequestInputDTO.getBody()), LAB0110.class);\n        DealStatusEnum dealStatusEnum = DealStatusEnum.EXCEPTION;\n\n        String reportType = \"\", reportTypeName = \"\";//类型（1-检查；2-检验）\n        if (EsbSubBizEnum.LAB0110.getTranCode().equals(tranCode) || EsbSubBizEnum.LAB0111.getTranCode().equals(tranCode)) {\n            reportType = \"2\";\n            reportTypeName = \"检验\";\n        } else if (EsbSubBizEnum.RAD0113.getTranCode().equals(tranCode) || EsbSubBizEnum.RAD0114.getTranCode().equals(tranCode)) {\n            reportType = \"1\";\n            reportTypeName = \"检查\";\n        }\n        String errorMsg = reportTypeName + \"危急值信息操作失败\";\n        String testNo = null;\n        try {\n            LAB0110.PatientVisit patientVisit = body.getPatientVisit();\n\n            // 1.保存危急值报告信息\n            Map\u003cString, Object\u003e paramMap = new HashMap\u003c\u003e();\n            paramMap.put(\"hospitalCode\", body.getEvent().getEventFacility().getIdentifier());\n            paramMap.put(\"hospitalName\", body.getEvent().getEventFacility().getText());\n            String patientId = body.fetchPatientId();\n            paramMap.put(\"patientId\", patientId);\n            paramMap.put(\"patientName\", body.getDemography().getPatientName());\n            paramMap.put(\"sex\", body.getDemography().getSex().getIdentifier());\n            paramMap.put(\"birthday\", body.getDemography().getBirthday());\n            paramMap.put(\"patient_class\", patientVisit.getPatientClass());\n            paramMap.put(\"visitNumber\", patientVisit.getVisitNumber());\n            paramMap.put(\"departmentCode\", patientVisit.getPatientLocation().getDepartment().getIdentifier());\n            paramMap.put(\"departmentName\", patientVisit.getPatientLocation().getDepartment().getText());\n            paramMap.put(\"wardCode\", patientVisit.getPatientLocation().getWard().getIdentifier());\n            paramMap.put(\"wardName\", patientVisit.getPatientLocation().getWard().getText());\n            paramMap.put(\"wardRoom\", patientVisit.getPatientLocation().getRoom());\n            paramMap.put(\"wardBed\", patientVisit.getPatientLocation().getBed());\n            paramMap.put(\"reportNumber\", body.getReport().getReportNumber());\n            paramMap.put(\"applyNo\", body.getReport().getApplyNo());\n            paramMap.put(\"reportClassCode\", body.getReport().getReportClass().getIdentifier());\n            paramMap.put(\"reportClassName\", body.getReport().getReportClass().getText());\n            paramMap.put(\"reportSystemResourceCode\", esbRequestInputDTO.getHead().getAppId());\n            paramMap.put(\"reportType\", reportType);\n            esbSubInspectMapper.saveCriticalValueReport(paramMap);\n\n            // 2.保存危急值详情信息\n            Long cvReportId = Long.parseLong(paramMap.get(\"Out_Param_CvReportId\").toString());\n            List\u003cLAB0110.OrderDetail\u003e orderDetailList = body.getOrderDetail();//医嘱明细信息段】\n            List\u003cLAB0110.ObservationResult\u003e observationResultList = body.getObservationResult();//观察结果列表\n            for (LAB0110.ObservationResult result : observationResultList) {\n                Map\u003cString, Object\u003e resultParamMap = new HashMap\u003c\u003e();\n                resultParamMap.put(\"cvReportId\", cvReportId);\n                if (CollectionUtil.isNotEmpty(orderDetailList)) {\n                    LAB0110.OrderDetail orderDetail = orderDetailList.get(0);\n                    LAB0110.ServiceInfo serviceInfo = orderDetail.getServiceInfo();\n                    if (serviceInfo != null \u0026\u0026 serviceInfo.getItemInfo() != null) {\n                        CodedElementNOType itm = serviceInfo.getItemInfo();\n                        resultParamMap.put(\"itemCode\", itm.getIdentifier());\n                        resultParamMap.put(\"itemName\", itm.getText());\n                        resultParamMap.put(\"itemNo\", itm.getNO());\n                    }\n\n                    List\u003cHandleType\u003e handleList = orderDetail.getHandleList();\n                    if (handleList != null) {\n                        handleList.stream().filter(v -\u003e v.getType() != null \u0026\u0026 \"SendForInspection\".equalsIgnoreCase(v.getType().getIdentifier()))\n                                .findFirst()\n                                .ifPresent(v -\u003e {\n                                    if (v.getHandleBy() != null) {\n                                        resultParamMap.put(\"sendInspectPersonIdNumber\", v.getHandleBy().getIDNumber());\n                                        resultParamMap.put(\"sendInspectPersonName\", v.getHandleBy().getName());\n                                    }\n                                    resultParamMap.put(\"sendInspectTime\", v.getHandleTime());\n                                });\n                    }\n                }\n                resultParamMap.put(\"methodCode\", result.getObservationMethod().getIdentifier());\n                resultParamMap.put(\"methodName\", result.getObservationMethod().getText());\n                resultParamMap.put(\"identifyCode\", result.getObservationIdentifier().getIdentifier());\n                resultParamMap.put(\"identifyDesc\", result.getObservationIdentifier().getText());\n                resultParamMap.put(\"identifyResult\", result.getObservationValue());\n                resultParamMap.put(\"unitsCode\", result.getUnits().getIdentifier());\n                resultParamMap.put(\"unitsName\", result.getUnits().getText());\n                resultParamMap.put(\"referencesRangeHigh\", result.getReferencesRangeHigh());\n                resultParamMap.put(\"referencesRangeLow\", result.getReferencesRangeLow());\n                resultParamMap.put(\"referencesRangeQualitative\", result.getReferencesRangeQualitative());\n                resultParamMap.put(\"abnormalFlag\", result.getAbnormalFlags());\n                resultParamMap.put(\"observationTime\", result.getDTOfTheObservation());\n                resultParamMap.put(\"cvId\", result.getCriticalObsInfo().getCriticalID());\n                resultParamMap.put(\"cvSoid\", result.getCriticalObsInfo().getCriticalCode());\n                resultParamMap.put(\"cvCode\", result.getCriticalObsInfo().getCriticalCodeValue().getIdentifier());\n                resultParamMap.put(\"cvName\", result.getCriticalObsInfo().getCriticalCodeValue().getText());\n                resultParamMap.put(\"cvSystemResourceCode\", result.getCriticalObsInfo().getCriticalSystemResource().getIdentifier());\n                resultParamMap.put(\"cvSystemResourceName\", result.getCriticalObsInfo().getCriticalSystemResource().getText());\n                String cvStatus = \"\";\n                if (CollectionUtil.isNotEmpty(result.getCriticalObsInfo().getHandleList())) {\n                    HandleType handleType = result.getCriticalObsInfo().getHandleList().stream().sorted(Comparator.comparing(HandleType::getHandleTime).reversed()).collect(Collectors.toList()).get(0);\n                    cvStatus = handleType.getType().getIdentifier();\n                }\n                resultParamMap.put(\"cvStatus\", cvStatus);\n                resultParamMap.put(\"cvDesc\", result.getCriticalObsInfo().getCriticalDescription());\n                resultParamMap.put(\"cvComment\", result.getCriticalObsInfo().getComment());\n                resultParamMap.put(\"tranCode\",tranCode);\n                esbSubInspectMapper.saveCriticalValueDetail(resultParamMap);\n                /**保存危急值操作日志*/\n                Long cvDetailId = Long.parseLong(resultParamMap.get(\"Out_Param_CvDetailId\").toString());\n                if (CollectionUtil.isNotEmpty(result.getCriticalObsInfo().getHandleList())) {\n                    for (HandleType handleType : result.getCriticalObsInfo().getHandleList()) {\n                        Map\u003cString, Object\u003e actionLogParam = new HashMap\u003c\u003e();\n                        actionLogParam.put(\"cvDetailId\", cvDetailId);\n                        // TODO\n//                        actionLogParam.put(\"itemCode\", result.getServiceInfo().getItemInfo().getIdentifier());\n//                        actionLogParam.put(\"itemName\", result.getServiceInfo().getItemInfo().getText());\n//                        actionLogParam.put(\"itemNo\", result.getServiceInfo().getItemInfo().getNO());\n                        actionLogParam.put(\"cvId\", result.getCriticalObsInfo().getCriticalID());\n                        actionLogParam.put(\"cvSoid\", result.getCriticalObsInfo().getCriticalCode());\n                        actionLogParam.put(\"cvCode\", result.getCriticalObsInfo().getCriticalCodeValue().getIdentifier());\n                        actionLogParam.put(\"cvName\", result.getCriticalObsInfo().getCriticalCodeValue().getText());\n                        actionLogParam.put(\"cvSystemResourceCode\", result.getCriticalObsInfo().getCriticalSystemResource().getIdentifier());\n                        actionLogParam.put(\"cvSystemResourceName\", result.getCriticalObsInfo().getCriticalSystemResource().getText());\n                        actionLogParam.put(\"cvStatus\", cvStatus);\n                        actionLogParam.put(\"cvDesc\", result.getCriticalObsInfo().getCriticalDescription());\n                        actionLogParam.put(\"handlePersonIdNumber\", handleType.getHandleBy().getIDNumber());\n                        actionLogParam.put(\"handlePersonName\", handleType.getHandleBy().getName());\n                        actionLogParam.put(\"handlePersonNo\", handleType.getHandleBy().getNo());\n                        actionLogParam.put(\"handleTime\", handleType.getHandleTime());\n                        actionLogParam.put(\"handleTypeCode\", handleType.getType().getIdentifier());\n                        actionLogParam.put(\"handleTypeName\", handleType.getType().getText());\n                        esbSubInspectMapper.insertCriticalValueActionLog(actionLogParam);\n                    }\n                }\n            }\n            dealStatusEnum = DealStatusEnum.SUCCESS;\n        } catch (Exception e) {\n            log.error(\"{}危急值信息操作异常-tranCode：{},messageId：{}\", reportTypeName, tranCode, messageId, e);\n            errorMsg = e.getMessage();\n        }\n        tranRecordLog(dealStatusEnum, messageId, esbRequestInputDTO, tranCode, errorMsg, testNo, reportTypeName + \"危急值信息操作失败\");\n    }\n}\n","createAt":1742548368,"id":"fw6cbsvx"}{"content":"rgb(46, 149, 211);","createAt":1742549194,"id":"lo7632cn"}